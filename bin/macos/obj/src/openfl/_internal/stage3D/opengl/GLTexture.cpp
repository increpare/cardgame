// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLCompressedTextureFormats
#include <openfl/_internal/stage3D/GLCompressedTextureFormats.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_atf_ATFReader
#include <openfl/_internal/stage3D/atf/ATFReader.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLTexture
#include <openfl/_internal/stage3D/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLTextureBase
#include <openfl/_internal/stage3D/opengl/GLTextureBase.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b6394c5e8b3012bd_33_create,"openfl._internal.stage3D.opengl.GLTexture","create",0xf7644764,"openfl._internal.stage3D.opengl.GLTexture.create","openfl/_internal/stage3D/opengl/GLTexture.hx",33,0xf4ae1d96)
HX_LOCAL_STACK_FRAME(_hx_pos_b6394c5e8b3012bd_64_uploadCompressedTextureFromByteArray,"openfl._internal.stage3D.opengl.GLTexture","uploadCompressedTextureFromByteArray",0x1f55de36,"openfl._internal.stage3D.opengl.GLTexture.uploadCompressedTextureFromByteArray","openfl/_internal/stage3D/opengl/GLTexture.hx",64,0xf4ae1d96)
HX_LOCAL_STACK_FRAME(_hx_pos_b6394c5e8b3012bd_52_uploadCompressedTextureFromByteArray,"openfl._internal.stage3D.opengl.GLTexture","uploadCompressedTextureFromByteArray",0x1f55de36,"openfl._internal.stage3D.opengl.GLTexture.uploadCompressedTextureFromByteArray","openfl/_internal/stage3D/opengl/GLTexture.hx",52,0xf4ae1d96)
static const bool _hx_array_data_3a7b8306_3[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_b6394c5e8b3012bd_117_uploadFromBitmapData,"openfl._internal.stage3D.opengl.GLTexture","uploadFromBitmapData",0xe5bb4c0c,"openfl._internal.stage3D.opengl.GLTexture.uploadFromBitmapData","openfl/_internal/stage3D/opengl/GLTexture.hx",117,0xf4ae1d96)
HX_LOCAL_STACK_FRAME(_hx_pos_b6394c5e8b3012bd_165_uploadFromByteArray,"openfl._internal.stage3D.opengl.GLTexture","uploadFromByteArray",0xada4167e,"openfl._internal.stage3D.opengl.GLTexture.uploadFromByteArray","openfl/_internal/stage3D/opengl/GLTexture.hx",165,0xf4ae1d96)
HX_LOCAL_STACK_FRAME(_hx_pos_b6394c5e8b3012bd_170_uploadFromTypedArray,"openfl._internal.stage3D.opengl.GLTexture","uploadFromTypedArray",0xaa4a4322,"openfl._internal.stage3D.opengl.GLTexture.uploadFromTypedArray","openfl/_internal/stage3D/opengl/GLTexture.hx",170,0xf4ae1d96)
HX_LOCAL_STACK_FRAME(_hx_pos_b6394c5e8b3012bd_198_setSamplerState,"openfl._internal.stage3D.opengl.GLTexture","setSamplerState",0x9bc58943,"openfl._internal.stage3D.opengl.GLTexture.setSamplerState","openfl/_internal/stage3D/opengl/GLTexture.hx",198,0xf4ae1d96)
namespace openfl{
namespace _internal{
namespace stage3D{
namespace opengl{

void GLTexture_obj::__construct() { }

Dynamic GLTexture_obj::__CreateEmpty() { return new GLTexture_obj; }

void *GLTexture_obj::_hx_vtable = 0;

Dynamic GLTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLTexture_obj > _hx_result = new GLTexture_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLTexture_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3a992640;
}

void GLTexture_obj::create( ::openfl::display3D::textures::Texture texture, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_b6394c5e8b3012bd_33_create)
HXLINE(  35)		 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE(  37)		texture->_hx___textureTarget = gl->TEXTURE_2D;
HXLINE(  39)		gl->bindTexture(texture->_hx___textureTarget,texture->_hx___textureID);
HXLINE(  40)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  42)		int texture1 = texture->_hx___textureTarget;
HXDLIN(  42)		int texture2 = texture->_hx___internalFormat;
HXDLIN(  42)		int texture3 = texture->_hx___width;
HXDLIN(  42)		int texture4 = texture->_hx___height;
HXDLIN(  42)		int texture5 = texture->_hx___format;
HXDLIN(  42)		int gl1 = gl->UNSIGNED_BYTE;
HXDLIN(  42)		gl->texImage2D(texture1,(int)0,texture2,texture3,texture4,(int)0,texture5,gl1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)0));
HXLINE(  43)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  45)		gl->bindTexture(texture->_hx___textureTarget,null());
HXLINE(  47)		::openfl::_internal::stage3D::opengl::GLTexture_obj::uploadFromTypedArray(texture,renderSession,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLTexture_obj,create,(void))

void GLTexture_obj::uploadCompressedTextureFromByteArray( ::openfl::display3D::textures::Texture texture, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0,::Array< bool >,hasTexture,bool,alpha, ::lime::_backend::native::NativeGLRenderContext,gl, ::openfl::display3D::textures::Texture,texture) HXARGC(7)
            		void _hx_run(int target,int level,int gpuFormat,int width,int height,int blockLength, ::haxe::io::Bytes bytes){
            			HX_GC_STACKFRAME(&_hx_pos_b6394c5e8b3012bd_64_uploadCompressedTextureFromByteArray)
HXLINE(  66)			int format = ::openfl::_internal::stage3D::opengl::GLTextureBase_obj::_hx___compressedTextureFormats->toTextureFormat(alpha,gpuFormat);
HXLINE(  67)			if ((format == (int)0)) {
HXLINE(  67)				return;
            			}
HXLINE(  69)			hasTexture[(int)0] = true;
HXLINE(  70)			texture->_hx___format = format;
HXLINE(  71)			texture->_hx___internalFormat = format;
HXLINE(  73)			bool _hx_tmp;
HXDLIN(  73)			if (alpha) {
HXLINE(  73)				_hx_tmp = (gpuFormat == (int)2);
            			}
            			else {
HXLINE(  73)				_hx_tmp = false;
            			}
HXDLIN(  73)			if (_hx_tmp) {
HXLINE(  75)				int size = ::Std_obj::_hx_int(((Float)blockLength / (Float)(int)2));
HXLINE(  77)				int texture1 = texture->_hx___textureTarget;
HXDLIN(  77)				int texture2 = texture->_hx___internalFormat;
HXDLIN(  77)				gl->compressedTexImage2D(texture1,level,texture2,width,height,(int)0,size,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBuffer(bytes));
HXLINE(  78)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  80)				 ::openfl::display3D::textures::Texture alphaTexture =  ::openfl::display3D::textures::Texture_obj::__alloc( HX_CTX ,texture->_hx___context,texture->_hx___width,texture->_hx___height,(int)3,texture->_hx___optimizeForRenderToTexture,texture->_hx___streamingLevels);
HXLINE(  81)				alphaTexture->_hx___format = format;
HXLINE(  82)				alphaTexture->_hx___internalFormat = format;
HXLINE(  84)				gl->bindTexture(alphaTexture->_hx___textureTarget,alphaTexture->_hx___textureID);
HXLINE(  85)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  87)				int alphaTexture1 = alphaTexture->_hx___textureTarget;
HXDLIN(  87)				int alphaTexture2 = alphaTexture->_hx___internalFormat;
HXDLIN(  87)				 ::lime::utils::BytePointerData this1 =  ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,bytes,size);
HXDLIN(  87)				gl->compressedTexImage2D(alphaTexture1,level,alphaTexture2,width,height,(int)0,size,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(this1));
HXLINE(  88)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  90)				texture->_hx___alphaTexture = alphaTexture;
            			}
            			else {
HXLINE(  94)				int texture3 = texture->_hx___textureTarget;
HXDLIN(  94)				int texture4 = texture->_hx___internalFormat;
HXDLIN(  94)				gl->compressedTexImage2D(texture3,level,texture4,width,height,(int)0,blockLength,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBuffer(bytes));
HXLINE(  95)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            		}
            		HX_END_LOCAL_FUNC7((void))

            	HX_GC_STACKFRAME(&_hx_pos_b6394c5e8b3012bd_52_uploadCompressedTextureFromByteArray)
HXLINE(  54)		 ::openfl::_internal::stage3D::atf::ATFReader reader =  ::openfl::_internal::stage3D::atf::ATFReader_obj::__alloc( HX_CTX ,data,byteArrayOffset);
HXLINE(  55)		bool alpha = reader->readHeader(texture->_hx___width,texture->_hx___height,false);
HXLINE(  57)		 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE(  59)		gl->bindTexture(texture->_hx___textureTarget,texture->_hx___textureID);
HXLINE(  60)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  62)		::Array< bool > hasTexture = ::Array_obj< bool >::fromData( _hx_array_data_3a7b8306_3,1);
HXLINE(  64)		reader->readTextures( ::Dynamic(new _hx_Closure_0(hasTexture,alpha,gl,texture)));
HXLINE( 103)		if (!(hasTexture->__get((int)0))) {
HXLINE( 105)			 ::Dynamic elements = ((texture->_hx___width * texture->_hx___height) * (int)4);
HXDLIN( 105)			 ::lime::utils::ArrayBufferView this2;
HXDLIN( 105)			if (hx::IsNotNull( elements )) {
HXLINE( 105)				this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            			}
            			else {
HXLINE( 105)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 105)			 ::lime::utils::ArrayBufferView data1 = this2;
HXLINE( 106)			int texture5 = texture->_hx___textureTarget;
HXDLIN( 106)			int texture6 = texture->_hx___internalFormat;
HXDLIN( 106)			int texture7 = texture->_hx___width;
HXDLIN( 106)			int texture8 = texture->_hx___height;
HXDLIN( 106)			int texture9 = texture->_hx___format;
HXDLIN( 106)			int gl1 = gl->UNSIGNED_BYTE;
HXDLIN( 106)			gl->texImage2D(texture5,(int)0,texture6,texture7,texture8,(int)0,texture9,gl1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(data1));
HXLINE( 107)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 111)		gl->bindTexture(texture->_hx___textureTarget,null());
HXLINE( 112)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLTexture_obj,uploadCompressedTextureFromByteArray,(void))

void GLTexture_obj::uploadFromBitmapData( ::openfl::display3D::textures::Texture texture, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::display::BitmapData source,int miplevel,bool generateMipmap){
            	HX_GC_STACKFRAME(&_hx_pos_b6394c5e8b3012bd_117_uploadFromBitmapData)
HXLINE( 129)		if (hx::IsNull( source )) {
HXLINE( 129)			return;
            		}
HXLINE( 131)		int width = ((int)texture->_hx___width >> (int)miplevel);
HXLINE( 132)		int height = ((int)texture->_hx___height >> (int)miplevel);
HXLINE( 134)		bool _hx_tmp;
HXDLIN( 134)		if ((width == (int)0)) {
HXLINE( 134)			_hx_tmp = (height == (int)0);
            		}
            		else {
HXLINE( 134)			_hx_tmp = false;
            		}
HXDLIN( 134)		if (_hx_tmp) {
HXLINE( 134)			return;
            		}
HXLINE( 136)		if ((width == (int)0)) {
HXLINE( 136)			width = (int)1;
            		}
HXLINE( 137)		if ((height == (int)0)) {
HXLINE( 137)			height = (int)1;
            		}
HXLINE( 139)		bool _hx_tmp1;
HXDLIN( 139)		if ((source->width == width)) {
HXLINE( 139)			_hx_tmp1 = (source->height != height);
            		}
            		else {
HXLINE( 139)			_hx_tmp1 = true;
            		}
HXDLIN( 139)		if (_hx_tmp1) {
HXLINE( 141)			 ::openfl::display::BitmapData copy =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,(int)0);
HXLINE( 142)			copy->draw(source,null(),null(),null(),null(),null());
HXLINE( 143)			source = copy;
            		}
HXLINE( 147)		 ::lime::graphics::Image image = texture->_hx___getImage(source);
HXLINE( 149)		::openfl::_internal::stage3D::opengl::GLTexture_obj::uploadFromTypedArray(texture,renderSession,image->get_data(),miplevel);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLTexture_obj,uploadFromBitmapData,(void))

void GLTexture_obj::uploadFromByteArray( ::openfl::display3D::textures::Texture texture, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::utils::ByteArrayData data,int byteArrayOffset,hx::Null< int >  __o_miplevel){
int miplevel = __o_miplevel.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_b6394c5e8b3012bd_165_uploadFromByteArray)
HXDLIN( 165)		 ::haxe::io::Bytes buffer = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN( 165)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 165)		if (hx::IsNotNull( buffer )) {
HXDLIN( 165)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 165)			int in_byteOffset = byteArrayOffset;
HXDLIN( 165)			if ((in_byteOffset < (int)0)) {
HXDLIN( 165)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 165)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXDLIN( 165)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 165)			int bufferByteLength = buffer->length;
HXDLIN( 165)			int elementSize = _this->bytesPerElement;
HXDLIN( 165)			int newByteLength = bufferByteLength;
HXDLIN( 165)			{
HXDLIN( 165)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 165)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXDLIN( 165)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 165)				if ((newByteLength < (int)0)) {
HXDLIN( 165)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 165)			_this->buffer = buffer;
HXDLIN( 165)			_this->byteOffset = in_byteOffset;
HXDLIN( 165)			_this->byteLength = newByteLength;
HXDLIN( 165)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 165)			this1 = _this;
            		}
            		else {
HXDLIN( 165)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 165)		::openfl::_internal::stage3D::opengl::GLTexture_obj::uploadFromTypedArray(texture,renderSession,this1,miplevel);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLTexture_obj,uploadFromByteArray,(void))

void GLTexture_obj::uploadFromTypedArray( ::openfl::display3D::textures::Texture texture, ::openfl::_internal::renderer::RenderSession renderSession, ::lime::utils::ArrayBufferView data,hx::Null< int >  __o_miplevel){
int miplevel = __o_miplevel.Default(0);
            	HX_STACKFRAME(&_hx_pos_b6394c5e8b3012bd_170_uploadFromTypedArray)
HXLINE( 172)		if (hx::IsNull( data )) {
HXLINE( 172)			return;
            		}
HXLINE( 173)		 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE( 175)		int width = ((int)texture->_hx___width >> (int)miplevel);
HXLINE( 176)		int height = ((int)texture->_hx___height >> (int)miplevel);
HXLINE( 178)		bool _hx_tmp;
HXDLIN( 178)		if ((width == (int)0)) {
HXLINE( 178)			_hx_tmp = (height == (int)0);
            		}
            		else {
HXLINE( 178)			_hx_tmp = false;
            		}
HXDLIN( 178)		if (_hx_tmp) {
HXLINE( 178)			return;
            		}
HXLINE( 180)		if ((width == (int)0)) {
HXLINE( 180)			width = (int)1;
            		}
HXLINE( 181)		if ((height == (int)0)) {
HXLINE( 181)			height = (int)1;
            		}
HXLINE( 183)		gl->bindTexture(texture->_hx___textureTarget,texture->_hx___textureID);
HXLINE( 184)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 186)		int texture1 = texture->_hx___textureTarget;
HXDLIN( 186)		int texture2 = texture->_hx___internalFormat;
HXDLIN( 186)		int texture3 = texture->_hx___format;
HXDLIN( 186)		int gl1 = gl->UNSIGNED_BYTE;
HXDLIN( 186)		gl->texImage2D(texture1,miplevel,texture2,width,height,(int)0,texture3,gl1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(data));
HXLINE( 187)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 189)		gl->bindTexture(texture->_hx___textureTarget,null());
HXLINE( 190)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLTexture_obj,uploadFromTypedArray,(void))

void GLTexture_obj::setSamplerState( ::openfl::display3D::textures::Texture texture, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::_internal::stage3D::SamplerState state){
            	HX_STACKFRAME(&_hx_pos_b6394c5e8b3012bd_198_setSamplerState)
HXLINE( 200)		if (!(state->equals(texture->_hx___samplerState))) {
HXLINE( 202)			 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE( 204)			bool _hx_tmp;
HXDLIN( 204)			bool _hx_tmp1;
HXDLIN( 204)			if ((state->minFilter != gl->NEAREST)) {
HXLINE( 204)				_hx_tmp1 = (state->minFilter != gl->LINEAR);
            			}
            			else {
HXLINE( 204)				_hx_tmp1 = false;
            			}
HXDLIN( 204)			if (_hx_tmp1) {
HXLINE( 204)				_hx_tmp = !(state->mipmapGenerated);
            			}
            			else {
HXLINE( 204)				_hx_tmp = false;
            			}
HXDLIN( 204)			if (_hx_tmp) {
HXLINE( 206)				gl->generateMipmap(gl->TEXTURE_2D);
HXLINE( 207)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 209)				state->mipmapGenerated = true;
            			}
HXLINE( 213)			if ((state->maxAniso != ((Float)0.0))) {
HXLINE( 215)				gl->texParameterf(gl->TEXTURE_2D,::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT,state->maxAniso);
HXLINE( 216)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            		}
HXLINE( 222)		::openfl::_internal::stage3D::opengl::GLTextureBase_obj::setSamplerState(texture,renderSession,state);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLTexture_obj,setSamplerState,(void))


GLTexture_obj::GLTexture_obj()
{
}

bool GLTexture_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setSamplerState") ) { outValue = setSamplerState_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"uploadFromByteArray") ) { outValue = uploadFromByteArray_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"uploadFromBitmapData") ) { outValue = uploadFromBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uploadFromTypedArray") ) { outValue = uploadFromTypedArray_dyn(); return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"uploadCompressedTextureFromByteArray") ) { outValue = uploadCompressedTextureFromByteArray_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLTexture_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLTexture_obj_sStaticStorageInfo = 0;
#endif

static void GLTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLTexture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLTexture_obj::__mClass,"__mClass");
};

#endif

hx::Class GLTexture_obj::__mClass;

static ::String GLTexture_obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("uploadCompressedTextureFromByteArray","\xce","\xc7","\x86","\xc5"),
	HX_HCSTRING("uploadFromBitmapData","\xa4","\x85","\x65","\x0d"),
	HX_HCSTRING("uploadFromByteArray","\xe6","\x17","\x1b","\xee"),
	HX_HCSTRING("uploadFromTypedArray","\xba","\x7c","\xf4","\xd1"),
	HX_HCSTRING("setSamplerState","\xab","\xb6","\x75","\xda"),
	::String(null())
};

void GLTexture_obj::__register()
{
	hx::Object *dummy = new GLTexture_obj;
	GLTexture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.opengl.GLTexture","\x06","\x83","\x7b","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLTexture_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLTexture_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace opengl
