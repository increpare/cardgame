// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_Mouse
#include <haxegon/Mouse.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_12_init,"Main","init",0xea732345,"Main.init","Main.hx",12,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_18_drawPairButton,"Main","drawPairButton",0x8881bb45,"Main.drawPairButton","Main.hx",18,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_76_drawButton,"Main","drawButton",0xb32b5b0b,"Main.drawButton","Main.hx",76,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_124_update,"Main","update",0xb7afa57e,"Main.update","Main.hx",124,0x087e5c05)

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x332f6459;
}

void Main_obj::init(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_12_init)
HXLINE(  14)		::haxegon::Gfx_obj::resizescreen((int)0,(int)0,null());
HXLINE(  15)		::haxegon::Text_obj::set_font(( (::String)(::Globals_obj::GUI->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,init,(void))

bool Main_obj::drawPairButton(int x,int y,::String text1,::String text2,int selection){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_18_drawPairButton)
HXLINE(  19)		Float oldtextsize = ::haxegon::Text_obj::get_size();
HXLINE(  20)		::haxegon::Text_obj::set_size(( (Float)(::Globals_obj::GUI->__Field(HX_("buttonTextSize",20,54,df,c3),hx::paccDynamic)) ));
HXLINE(  22)		int textcolor = ( (int)(::Globals_obj::PAL->__Field(HX_("buttonTextCol",c1,9d,19,bd),hx::paccDynamic)) );
HXLINE(  23)		int color = ( (int)(::Globals_obj::PAL->__Field(HX_("buttonCol",6e,19,fb,4f),hx::paccDynamic)) );
HXLINE(  24)		int colorhover = ( (int)(::Globals_obj::PAL->__Field(HX_("buttonHighlightCol",7e,8b,62,ff),hx::paccDynamic)) );
HXLINE(  25)		int borderCol = ( (int)(::Globals_obj::PAL->__Field(HX_("buttonBorderCol",62,76,52,0a),hx::paccDynamic)) );
HXLINE(  27)		int linethickness = ( (int)(::Globals_obj::GUI->__Field(HX_("linethickness",00,3b,13,fc),hx::paccDynamic)) );
HXLINE(  28)		int xpadding = ( (int)(::Globals_obj::GUI->__Field(HX_("buttonPaddingX",79,9d,c1,11),hx::paccDynamic)) );
HXLINE(  29)		int ypadding = ( (int)(::Globals_obj::GUI->__Field(HX_("buttonPaddingY",7a,9d,c1,11),hx::paccDynamic)) );
HXLINE(  31)		::haxegon::Gfx_obj::set_linethickness(linethickness);
HXLINE(  33)		int width = (int)39;
HXLINE(  34)		int w1 = ::Math_obj::round(::haxegon::Text_obj::width(text1));
HXLINE(  35)		int w2 = ::Math_obj::round(::haxegon::Text_obj::width(text1));
HXLINE(  36)		int w = ((w1 + w2) + (xpadding * (int)2));
HXLINE(  37)		if (((w + (int)6) >= width)) {
HXLINE(  38)			width = (w + (int)6);
            		}
HXLINE(  40)		width = (width + (xpadding * (int)2));
HXLINE(  42)		Float height = ::haxegon::Text_obj::height(text1);
HXDLIN(  42)		int height1 = ::Math_obj::round(::Math_obj::max(height,::haxegon::Text_obj::height(text2)));
HXLINE(  43)		if ((x == ::haxegon::Text_obj::CENTER)) {
HXLINE(  44)			int x1 = ::haxegon::Gfx_obj::screenwidthmid;
HXDLIN(  44)			x = ::Math_obj::round((x1 - ((Float)width / (Float)(int)2)));
            		}
HXLINE(  46)		height1 = (height1 + (ypadding * (int)2));
HXLINE(  48)		int dx = (::haxegon::Mouse_obj::get_x() - x);
HXLINE(  49)		int dy = (::haxegon::Mouse_obj::get_y() - y);
HXLINE(  51)		bool collide;
HXDLIN(  51)		bool collide1;
HXDLIN(  51)		bool collide2;
HXDLIN(  51)		if ((dx >= (int)0)) {
HXLINE(  51)			collide2 = (dx >= width);
            		}
            		else {
HXLINE(  51)			collide2 = true;
            		}
HXDLIN(  51)		if (!(collide2)) {
HXLINE(  51)			collide1 = (dy < (int)0);
            		}
            		else {
HXLINE(  51)			collide1 = true;
            		}
HXDLIN(  51)		if (!(collide1)) {
HXLINE(  51)			collide = (dy >= height1);
            		}
            		else {
HXLINE(  51)			collide = true;
            		}
HXDLIN(  51)		bool collide3 = !(collide);
HXLINE(  53)		bool click;
HXDLIN(  53)		if (collide3) {
HXLINE(  53)			click = ::haxegon::Mouse_obj::leftclick();
            		}
            		else {
HXLINE(  53)			click = false;
            		}
HXLINE(  55)		bool _hx_tmp;
HXDLIN(  55)		if (collide3) {
HXLINE(  55)			_hx_tmp = !(click);
            		}
            		else {
HXLINE(  55)			_hx_tmp = false;
            		}
HXDLIN(  55)		if (_hx_tmp) {
HXLINE(  56)			color = colorhover;
            		}
HXLINE(  59)		::haxegon::Gfx_obj::fillbox(x,y,width,height1,color,null());
HXLINE(  60)		if ((selection == (int)1)) {
HXLINE(  61)			::haxegon::Gfx_obj::fillbox(x,y,(w1 + ((int)2 * xpadding)),height1,( (int)(::Globals_obj::PAL->__Field(HX_("buttonTextCol",c1,9d,19,bd),hx::paccDynamic)) ),null());
            		}
            		else {
HXLINE(  63)			::haxegon::Gfx_obj::fillbox(((x + w1) + ((int)2 * xpadding)),y,((x + width) - ((x + w1) + ((int)2 * xpadding))),height1,( (int)(::Globals_obj::PAL->__Field(HX_("buttonTextCol",c1,9d,19,bd),hx::paccDynamic)) ),null());
            		}
HXLINE(  66)		::haxegon::Gfx_obj::drawbox(x,y,width,height1,borderCol,null());
HXLINE(  68)		int _hx_tmp1;
HXDLIN(  68)		if ((selection == (int)0)) {
HXLINE(  68)			_hx_tmp1 = textcolor;
            		}
            		else {
HXLINE(  68)			_hx_tmp1 = ( (int)(::Globals_obj::PAL->__Field(HX_("buttonCol",6e,19,fb,4f),hx::paccDynamic)) );
            		}
HXDLIN(  68)		::haxegon::Text_obj::display((x + xpadding),(y + ypadding),text1,_hx_tmp1,null());
HXLINE(  69)		int _hx_tmp2;
HXDLIN(  69)		if ((selection == (int)1)) {
HXLINE(  69)			_hx_tmp2 = textcolor;
            		}
            		else {
HXLINE(  69)			_hx_tmp2 = ( (int)(::Globals_obj::PAL->__Field(HX_("buttonCol",6e,19,fb,4f),hx::paccDynamic)) );
            		}
HXDLIN(  69)		::haxegon::Text_obj::display((((x + xpadding) + w1) + (xpadding * (int)2)),(y + ypadding),text2,_hx_tmp2,null());
HXLINE(  71)		::haxegon::Text_obj::set_size(oldtextsize);
HXLINE(  73)		return click;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Main_obj,drawPairButton,return )

bool Main_obj::drawButton(int x,int y,::String text){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_76_drawButton)
HXLINE(  77)		Float oldtextsize = ::haxegon::Text_obj::get_size();
HXLINE(  78)		::haxegon::Text_obj::set_size(( (Float)(::Globals_obj::GUI->__Field(HX_("buttonTextSize",20,54,df,c3),hx::paccDynamic)) ));
HXLINE(  80)		int textcolor = ( (int)(::Globals_obj::PAL->__Field(HX_("buttonTextCol",c1,9d,19,bd),hx::paccDynamic)) );
HXLINE(  81)		int color = ( (int)(::Globals_obj::PAL->__Field(HX_("buttonCol",6e,19,fb,4f),hx::paccDynamic)) );
HXLINE(  82)		int colorhover = ( (int)(::Globals_obj::PAL->__Field(HX_("buttonHighlightCol",7e,8b,62,ff),hx::paccDynamic)) );
HXLINE(  83)		int borderCol = ( (int)(::Globals_obj::PAL->__Field(HX_("buttonBorderCol",62,76,52,0a),hx::paccDynamic)) );
HXLINE(  85)		int linethickness = ( (int)(::Globals_obj::GUI->__Field(HX_("linethickness",00,3b,13,fc),hx::paccDynamic)) );
HXLINE(  86)		int xpadding = ( (int)(::Globals_obj::GUI->__Field(HX_("buttonPaddingX",79,9d,c1,11),hx::paccDynamic)) );
HXLINE(  87)		int ypadding = ( (int)(::Globals_obj::GUI->__Field(HX_("buttonPaddingY",7a,9d,c1,11),hx::paccDynamic)) );
HXLINE(  89)		::haxegon::Gfx_obj::set_linethickness(linethickness);
HXLINE(  91)		int width = (int)39;
HXLINE(  92)		int w = ::Math_obj::round(::haxegon::Text_obj::width(text));
HXLINE(  93)		if (((w + (int)6) >= width)) {
HXLINE(  94)			width = (w + (int)6);
            		}
HXLINE(  96)		width = (width + (xpadding * (int)2));
HXLINE(  98)		int height = ::Math_obj::round(::haxegon::Text_obj::height(text));
HXLINE(  99)		if ((x == ::haxegon::Text_obj::CENTER)) {
HXLINE( 100)			int x1 = ::haxegon::Gfx_obj::screenwidthmid;
HXDLIN( 100)			x = ::Math_obj::round((x1 - ((Float)width / (Float)(int)2)));
            		}
HXLINE( 102)		height = (height + (ypadding * (int)2));
HXLINE( 104)		int dx = (::haxegon::Mouse_obj::get_x() - x);
HXLINE( 105)		int dy = (::haxegon::Mouse_obj::get_y() - y);
HXLINE( 107)		bool collide;
HXDLIN( 107)		bool collide1;
HXDLIN( 107)		bool collide2;
HXDLIN( 107)		if ((dx >= (int)0)) {
HXLINE( 107)			collide2 = (dx >= width);
            		}
            		else {
HXLINE( 107)			collide2 = true;
            		}
HXDLIN( 107)		if (!(collide2)) {
HXLINE( 107)			collide1 = (dy < (int)0);
            		}
            		else {
HXLINE( 107)			collide1 = true;
            		}
HXDLIN( 107)		if (!(collide1)) {
HXLINE( 107)			collide = (dy >= height);
            		}
            		else {
HXLINE( 107)			collide = true;
            		}
HXDLIN( 107)		bool collide3 = !(collide);
HXLINE( 109)		bool click;
HXDLIN( 109)		if (collide3) {
HXLINE( 109)			click = ::haxegon::Mouse_obj::leftclick();
            		}
            		else {
HXLINE( 109)			click = false;
            		}
HXLINE( 111)		bool _hx_tmp;
HXDLIN( 111)		if (collide3) {
HXLINE( 111)			_hx_tmp = !(click);
            		}
            		else {
HXLINE( 111)			_hx_tmp = false;
            		}
HXDLIN( 111)		if (_hx_tmp) {
HXLINE( 112)			color = colorhover;
            		}
HXLINE( 115)		::haxegon::Gfx_obj::fillbox(x,y,width,height,color,null());
HXLINE( 116)		::haxegon::Gfx_obj::drawbox(x,y,width,height,borderCol,null());
HXLINE( 118)		::haxegon::Text_obj::display((x + xpadding),(y + ypadding),text,textcolor,null());
HXLINE( 119)		::haxegon::Text_obj::set_size(oldtextsize);
HXLINE( 121)		return click;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Main_obj,drawButton,return )

void Main_obj::update(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_124_update)
HXLINE( 126)		::haxegon::Gfx_obj::clearscreen(::Globals_obj::PAL->__Field(HX_("bg",c5,55,00,00),hx::paccDynamic));
HXLINE( 127)		int h = ::haxegon::Gfx_obj::screenheight;
HXLINE( 128)		int w = ::haxegon::Gfx_obj::screenwidth;
HXLINE( 129)		::haxegon::Text_obj::set_wordwrap(w);
HXLINE( 131)		::haxegon::Text_obj::set_size(( (Float)(::Globals_obj::GUI->__Field(HX_("titleTextSize",c6,1d,2f,79),hx::paccDynamic)) ));
HXLINE( 132)		int _hx_tmp = ::haxegon::Text_obj::CENTER;
HXDLIN( 132)		::haxegon::Text_obj::display(_hx_tmp,((Float)h / (Float)(int)5),::Globals_obj::S(HX_("Ruestung",8b,e3,9d,39),HX_("Ruestung",8b,e3,9d,39)),null(),null());
HXLINE( 135)		int _hx_tmp1 = ::haxegon::Text_obj::CENTER;
HXDLIN( 135)		int _hx_tmp2 = ::Math_obj::round(((Float)h / (Float)(int)2));
HXDLIN( 135)		this->drawButton(_hx_tmp1,_hx_tmp2,::Globals_obj::S(HX_("Zu einer Reise aufbrechen",f7,e0,a3,90),HX_("Set off on an Adventure",0f,c3,58,ca)));
HXLINE( 137)		int _hx_tmp3 = ::haxegon::Text_obj::CENTER;
HXDLIN( 137)		int _hx_tmp4 = ::Math_obj::round((((Float)h / (Float)(int)2) + (( (int)(::Globals_obj::GUI->__Field(HX_("buttonTextSize",20,54,df,c3),hx::paccDynamic)) ) * ((Float)1.5))));
HXLINE( 138)		::String _hx_tmp5 = ::Globals_obj::S(HX_("Deutsch",98,35,a5,18),HX_("German",a6,92,7c,d6));
HXLINE( 139)		::String _hx_tmp6 = ::Globals_obj::S(HX_("Englisch",fd,9a,99,ec),HX_("English",10,8f,83,c6));
HXLINE( 137)		if (this->drawPairButton(_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,((int)1 - ( (int)(::Globals_obj::state->__Field(HX_("language",58,80,11,7a),hx::paccDynamic)) )))) {
HXLINE( 141)			::Globals_obj::state->__SetField(HX_("language",58,80,11,7a),((int)1 - ( (int)(::Globals_obj::state->__Field(HX_("language",58,80,11,7a),hx::paccDynamic)) )),hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,update,(void))


Main_obj::Main_obj()
{
}

hx::Val Main_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawButton") ) { return hx::Val( drawButton_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"drawPairButton") ) { return hx::Val( drawPairButton_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("drawPairButton","\xd0","\x9e","\xcb","\xf9"),
	HX_HCSTRING("drawButton","\x16","\xdd","\xa3","\x1b"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
};

#endif

hx::Class Main_obj::__mClass;

void Main_obj::__register()
{
	hx::Object *dummy = new Main_obj;
	Main_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Main","\x59","\x64","\x2f","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

