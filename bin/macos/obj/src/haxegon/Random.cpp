// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxegon_Random
#include <haxegon/Random.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_9_bool,"haxegon.Random","bool",0x9a1cf1c7,"haxegon.Random.bool","haxegon/Random.hx",9,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_14_chance,"haxegon.Random","chance",0x65e05cd1,"haxegon.Random.chance","haxegon/Random.hx",14,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_19_int,"haxegon.Random","int",0xd1a501f2,"haxegon.Random.int","haxegon/Random.hx",19,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_24_float,"haxegon.Random","float",0x8ad5415f,"haxegon.Random.float","haxegon/Random.hx",24,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_40_weighted,"haxegon.Random","weighted",0x0de517f4,"haxegon.Random.weighted","haxegon/Random.hx",40,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_77_string,"haxegon.Random","string",0xbf9df7ae,"haxegon.Random.string","haxegon/Random.hx",77,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_86_pick,"haxegon.Random","pick",0xa359567e,"haxegon.Random.pick","haxegon/Random.hx",86,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_93_get_seed,"haxegon.Random","get_seed",0x4cb04117,"haxegon.Random.get_seed","haxegon/Random.hx",93,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_96_set_seed,"haxegon.Random","set_seed",0xfb0d9a8b,"haxegon.Random.set_seed","haxegon/Random.hx",96,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_129_random,"haxegon.Random","random",0x65fcf0e0,"haxegon.Random.random","haxegon/Random.hx",129,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_137_gen31,"haxegon.Random","gen31",0x199a6cf1,"haxegon.Random.gen31","haxegon/Random.hx",137,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_144_gen32,"haxegon.Random","gen32",0x199a6cf2,"haxegon.Random.gen32","haxegon/Random.hx",144,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_154_rand,"haxegon.Random","rand",0xa4a5bb42,"haxegon.Random.rand","haxegon/Random.hx",154,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_173_randinterval,"haxegon.Random","randinterval",0x34124687,"haxegon.Random.randinterval","haxegon/Random.hx",173,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_90_boot,"haxegon.Random","boot",0x9a1cf1cf,"haxegon.Random.boot","haxegon/Random.hx",90,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_182_boot,"haxegon.Random","boot",0x9a1cf1cf,"haxegon.Random.boot","haxegon/Random.hx",182,0xd956af4c)
HX_LOCAL_STACK_FRAME(_hx_pos_17042376b559995e_183_boot,"haxegon.Random","boot",0x9a1cf1cf,"haxegon.Random.boot","haxegon/Random.hx",183,0xd956af4c)
namespace haxegon{

void Random_obj::__construct() { }

Dynamic Random_obj::__CreateEmpty() { return new Random_obj; }

void *Random_obj::_hx_vtable = 0;

Dynamic Random_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Random_obj > _hx_result = new Random_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Random_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x179729c3;
}

bool Random_obj::_hx_bool(){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_9_bool)
HXDLIN(   9)		return (::haxegon::Random_obj::random() < ((Float)0.5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Random_obj,_hx_bool,return )

bool Random_obj::chance(Float n){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_14_chance)
HXDLIN(  14)		return (::haxegon::Random_obj::_hx_float((int)0,(int)100) < n);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Random_obj,chance,return )

int Random_obj::_hx_int(int from,int to){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_19_int)
HXDLIN(  19)		return ::haxegon::Random_obj::randinterval(from,to,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Random_obj,_hx_int,return )

Float Random_obj::_hx_float(Float from,Float to){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_24_float)
HXDLIN(  24)		return (from + ((to - from) * ::haxegon::Random_obj::random()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Random_obj,_hx_float,return )

 ::Dynamic Random_obj::weighted(::cpp::VirtualArray options,::Array< int > odds){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_40_weighted)
HXLINE(  43)		if ((options->get_length() != odds->length)) {
HXLINE(  44)			::haxe::Log_obj::trace(HX_("Error: in Random.weighted(), both arrays should be the same size.",c3,b2,43,e7),hx::SourceInfo(HX_("Random.hx",7b,e4,03,49),44,HX_("haxegon.Random",f1,d7,23,fb),HX_("weighted",d7,17,40,8d)));
HXLINE(  45)			::haxe::Log_obj::trace(HX_("Returning a random option from the first array instead.",cd,16,de,b1),hx::SourceInfo(HX_("Random.hx",7b,e4,03,49),45,HX_("haxegon.Random",f1,d7,23,fb),HX_("weighted",d7,17,40,8d)));
HXLINE(  46)			return ::haxegon::Random_obj::pick(options);
            		}
HXLINE(  49)		int result = (int)0;
HXLINE(  51)		int totalodds = (int)0;
HXLINE(  52)		{
HXLINE(  52)			int _g1 = (int)0;
HXDLIN(  52)			int _g = odds->length;
HXDLIN(  52)			while((_g1 < _g)){
HXLINE(  52)				_g1 = (_g1 + (int)1);
HXDLIN(  52)				int i = (_g1 - (int)1);
HXDLIN(  52)				totalodds = (totalodds + odds->__get(i));
            			}
            		}
HXLINE(  54)		int r = ::haxegon::Random_obj::_hx_int((int)0,totalodds);
HXLINE(  56)		int lastid = (int)-1;
HXLINE(  57)		totalodds = (int)0;
HXLINE(  58)		{
HXLINE(  58)			int _g11 = (int)0;
HXDLIN(  58)			int _g2 = options->get_length();
HXDLIN(  58)			while((_g11 < _g2)){
HXLINE(  58)				_g11 = (_g11 + (int)1);
HXDLIN(  58)				int i1 = (_g11 - (int)1);
HXLINE(  59)				int current = odds->__get(i1);
HXLINE(  60)				totalodds = (totalodds + current);
HXLINE(  61)				if ((current > (int)0)) {
HXLINE(  62)					if ((r <= totalodds)) {
HXLINE(  63)						result = i1;
HXLINE(  64)						goto _hx_goto_5;
            					}
HXLINE(  66)					lastid = i1;
            				}
HXLINE(  69)				if ((i1 == (odds->length - (int)1))) {
HXLINE(  69)					result = lastid;
            				}
            			}
            			_hx_goto_5:;
            		}
HXLINE(  72)		return options->__get(result);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Random_obj,weighted,return )

::String Random_obj::string(int length,::String __o_charactersToUse){
::String charactersToUse = __o_charactersToUse.Default(HX_HCSTRING("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789","\x9f","\x35","\xea","\x01"));
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_77_string)
HXLINE(  78)		::String str = HX_("",00,00,00,00);
HXLINE(  79)		{
HXLINE(  79)			int _g1 = (int)0;
HXDLIN(  79)			int _g = length;
HXDLIN(  79)			while((_g1 < _g)){
HXLINE(  79)				_g1 = (_g1 + (int)1);
HXDLIN(  79)				int i = (_g1 - (int)1);
HXLINE(  80)				str = (str + charactersToUse.charAt(::haxegon::Random_obj::_hx_int((int)0,(charactersToUse.length - (int)1))));
            			}
            		}
HXLINE(  82)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Random_obj,string,return )

 ::Dynamic Random_obj::pick(::cpp::VirtualArray arr){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_86_pick)
HXDLIN(  86)		return arr->__get(::haxegon::Random_obj::_hx_int((int)0,(arr->get_length() - (int)1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Random_obj,pick,return )

 ::Dynamic Random_obj::_seed;

 ::Dynamic Random_obj::get_seed(){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_93_get_seed)
HXDLIN(  93)		return ::haxegon::Random_obj::_seed;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Random_obj,get_seed,return )

 ::Dynamic Random_obj::set_seed( ::Dynamic s){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_96_set_seed)
HXLINE(  97)		if (hx::IsNull( s )) {
HXLINE(  98)			::haxegon::Random_obj::_seed = ::Std_obj::_hx_int(((int)1 + (::Math_obj::random() * (int)2147483646)));
            		}
            		else {
HXLINE(  99)			if (::Std_obj::is(s,hx::ClassOf< ::String >())) {
HXLINE( 100)				if (hx::IsEq( s,HX_("",00,00,00,00) )) {
HXLINE( 101)					s = ::Date_obj::now()->toString();
            				}
HXLINE( 104)				::haxegon::Random_obj::_seed = (int)0;
HXLINE( 105)				{
HXLINE( 105)					int _g1 = (int)0;
HXDLIN( 105)					int _g = ( (int)(s->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN( 105)					while((_g1 < _g)){
HXLINE( 105)						_g1 = (_g1 + (int)1);
HXDLIN( 105)						int i = (_g1 - (int)1);
HXLINE( 106)						 ::Dynamic _hx_tmp = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 106)						 ::Dynamic _hx_tmp1 = ::haxegon::Random_obj::_seed;
HXDLIN( 106)						 ::Dynamic _hx_tmp2 = s->__Field(HX_("charCodeAt",f6,e6,54,35),hx::paccDynamic)(i);
HXDLIN( 106)						::haxegon::Random_obj::_seed = (_hx_tmp1 + (_hx_tmp2 * ((int)(i + (int)1) ^ (int)(int)2)));
            					}
            				}
            			}
            			else {
HXLINE( 108)				if (::Std_obj::is(s,hx::ClassOf< int >())) {
HXLINE( 109)					if (hx::IsEq( s,(int)0 )) {
HXLINE( 110)						::haxegon::Random_obj::_seed = ::Std_obj::_hx_int(((int)1 + (::Math_obj::random() * (int)2147483646)));
            					}
            					else {
HXLINE( 112)						::haxegon::Random_obj::_seed = ::Std_obj::_hx_int(( (Float)(s) ));
            					}
            				}
            				else {
HXLINE( 115)					s = ::Std_obj::string(s);
HXLINE( 116)					::haxegon::Random_obj::_seed = (int)0;
HXLINE( 117)					{
HXLINE( 117)						int _g11 = (int)0;
HXDLIN( 117)						int _g2 = ( (int)(s->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN( 117)						while((_g11 < _g2)){
HXLINE( 117)							_g11 = (_g11 + (int)1);
HXDLIN( 117)							int i1 = (_g11 - (int)1);
HXLINE( 118)							 ::Dynamic _hx_tmp3 = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 118)							 ::Dynamic _hx_tmp4 = ::haxegon::Random_obj::_seed;
HXDLIN( 118)							 ::Dynamic _hx_tmp5 = s->__Field(HX_("charCodeAt",f6,e6,54,35),hx::paccDynamic)(i1);
HXDLIN( 118)							::haxegon::Random_obj::_seed = (_hx_tmp4 + (_hx_tmp5 * ((int)(i1 + (int)1) ^ (int)(int)2)));
            						}
            					}
            				}
            			}
            		}
HXLINE( 122)		return ::haxegon::Random_obj::_seed;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Random_obj,set_seed,return )

Float Random_obj::random(){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_129_random)
HXDLIN( 129)		 ::Dynamic _hx_tmp = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 129)		::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)((int)::haxegon::Random_obj::_seed << (int)(int)13));
HXDLIN( 129)		 ::Dynamic _hx_tmp1 = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 129)		::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)hx::UShr(::haxegon::Random_obj::_seed,(int)17));
HXDLIN( 129)		 ::Dynamic _hx_tmp2 = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 129)		::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)((int)::haxegon::Random_obj::_seed << (int)(int)5));
HXDLIN( 129)		return ((Float)((int)( (int)(::haxegon::Random_obj::_seed) ) & (int)(int)2147483647) / (Float)((Float)2147483648.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Random_obj,random,return )

int Random_obj::gen31(){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_137_gen31)
HXDLIN( 137)		 ::Dynamic _hx_tmp = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 137)		::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)((int)::haxegon::Random_obj::_seed << (int)(int)13));
HXDLIN( 137)		 ::Dynamic _hx_tmp1 = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 137)		::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)hx::UShr(::haxegon::Random_obj::_seed,(int)17));
HXDLIN( 137)		 ::Dynamic _hx_tmp2 = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 137)		::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)((int)::haxegon::Random_obj::_seed << (int)(int)5));
HXDLIN( 137)		return ((int)( (int)(::haxegon::Random_obj::_seed) ) & (int)(int)2147483647);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Random_obj,gen31,return )

int Random_obj::gen32(){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_144_gen32)
HXLINE( 145)		 ::Dynamic _hx_tmp = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 145)		::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)((int)::haxegon::Random_obj::_seed << (int)(int)13));
HXLINE( 146)		 ::Dynamic _hx_tmp1 = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 146)		::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)hx::UShr(::haxegon::Random_obj::_seed,(int)17));
HXLINE( 147)		 ::Dynamic _hx_tmp2 = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 147)		::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)((int)::haxegon::Random_obj::_seed << (int)(int)5));
HXDLIN( 147)		return ( (int)(::haxegon::Random_obj::_seed) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Random_obj,gen32,return )

int Random_obj::rand(int n){
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_154_rand)
HXLINE( 155)		bool _hx_tmp;
HXDLIN( 155)		if ((n > (int)0)) {
HXLINE( 155)			_hx_tmp = (n > (int)2147483647);
            		}
            		else {
HXLINE( 155)			_hx_tmp = true;
            		}
HXDLIN( 155)		if (_hx_tmp) {
HXLINE( 156)			HX_STACK_DO_THROW(HX_("n out of (0, INT_MAX]",ea,35,f2,2c));
            		}
HXLINE( 157)		int bucket_size = ::Std_obj::_hx_int(((Float)(int)2147483647 / (Float)n));
HXLINE( 159)		int r;
HXLINE( 160)		while(true){
HXLINE( 162)			 ::Dynamic r1 = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 162)			::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)((int)::haxegon::Random_obj::_seed << (int)(int)13));
HXDLIN( 162)			 ::Dynamic r2 = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 162)			::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)hx::UShr(::haxegon::Random_obj::_seed,(int)17));
HXDLIN( 162)			 ::Dynamic r3 = hx::ClassOf< ::haxegon::Random >();
HXDLIN( 162)			::haxegon::Random_obj::_seed = ((int)::haxegon::Random_obj::_seed ^ (int)((int)::haxegon::Random_obj::_seed << (int)(int)5));
HXDLIN( 162)			r = ::Std_obj::_hx_int(((Float)((int)( (int)(::haxegon::Random_obj::_seed) ) & (int)(int)2147483647) / (Float)bucket_size));
HXLINE( 160)			if (!((r >= n))) {
HXLINE( 160)				goto _hx_goto_17;
            			}
            		}
            		_hx_goto_17:;
HXLINE( 165)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Random_obj,rand,return )

int Random_obj::randinterval(int min,int max, ::Dynamic __o_includeMax){
 ::Dynamic includeMax = __o_includeMax.Default(false);
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_173_randinterval)
HXLINE( 174)		if ((min == max)) {
HXLINE( 174)			return min;
            		}
HXLINE( 175)		if ((max < min)) {
HXLINE( 175)			return ::haxegon::Random_obj::randinterval(max,min,includeMax);
            		}
HXLINE( 176)		bool _hx_tmp;
HXDLIN( 176)		if ((min >= (int)0)) {
HXLINE( 176)			_hx_tmp = (max < (int)1);
            		}
            		else {
HXLINE( 176)			_hx_tmp = true;
            		}
HXDLIN( 176)		if (_hx_tmp) {
HXLINE( 177)			int _hx_tmp1;
HXDLIN( 177)			if (includeMax) {
HXLINE( 177)				_hx_tmp1 = (int)1;
            			}
            			else {
HXLINE( 177)				_hx_tmp1 = (int)0;
            			}
HXDLIN( 177)			return (::haxegon::Random_obj::rand(((max - min) + _hx_tmp1)) + min);
            		}
HXLINE( 179)		int _hx_tmp2;
HXDLIN( 179)		if (includeMax) {
HXLINE( 179)			_hx_tmp2 = (int)1;
            		}
            		else {
HXLINE( 179)			_hx_tmp2 = (int)0;
            		}
HXDLIN( 179)		return (min + ::haxegon::Random_obj::rand(((max - min) + _hx_tmp2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Random_obj,randinterval,return )

int Random_obj::_hx_INT_MAX;

Float Random_obj::INT_MAXPLUSONE;


Random_obj::Random_obj()
{
}

bool Random_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { outValue = _hx_int_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bool") ) { outValue = _hx_bool_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pick") ) { outValue = pick_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"seed") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_seed() ); return true; } }
		if (HX_FIELD_EQ(inName,"rand") ) { outValue = rand_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"float") ) { outValue = _hx_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_seed") ) { outValue = ( _seed ); return true; }
		if (HX_FIELD_EQ(inName,"gen31") ) { outValue = gen31_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gen32") ) { outValue = gen32_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"chance") ) { outValue = chance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"string") ) { outValue = string_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"random") ) { outValue = random_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"weighted") ) { outValue = weighted_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_seed") ) { outValue = get_seed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_seed") ) { outValue = set_seed_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"randinterval") ) { outValue = randinterval_dyn(); return true; }
	}
	return false;
}

bool Random_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_seed(ioValue.Cast<  ::Dynamic >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_seed") ) { _seed=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Random_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Random_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &Random_obj::_seed,HX_HCSTRING("_seed","\x50","\xa1","\x61","\xff")},
	{hx::fsInt,(void *) &Random_obj::_hx_INT_MAX,HX_HCSTRING("INT_MAX","\xd4","\xa7","\x23","\xa8")},
	{hx::fsFloat,(void *) &Random_obj::INT_MAXPLUSONE,HX_HCSTRING("INT_MAXPLUSONE","\xd8","\x7d","\x72","\xc2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Random_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Random_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Random_obj::_seed,"_seed");
	HX_MARK_MEMBER_NAME(Random_obj::_hx_INT_MAX,"INT_MAX");
	HX_MARK_MEMBER_NAME(Random_obj::INT_MAXPLUSONE,"INT_MAXPLUSONE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Random_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Random_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Random_obj::_seed,"_seed");
	HX_VISIT_MEMBER_NAME(Random_obj::_hx_INT_MAX,"INT_MAX");
	HX_VISIT_MEMBER_NAME(Random_obj::INT_MAXPLUSONE,"INT_MAXPLUSONE");
};

#endif

hx::Class Random_obj::__mClass;

static ::String Random_obj_sStaticFields[] = {
	HX_HCSTRING("bool","\x2a","\x84","\x1b","\x41"),
	HX_HCSTRING("chance","\xf4","\x8d","\x72","\xb7"),
	HX_HCSTRING("int","\xef","\x0c","\x50","\x00"),
	HX_HCSTRING("float","\x9c","\xc5","\x96","\x02"),
	HX_HCSTRING("weighted","\xd7","\x17","\x40","\x8d"),
	HX_HCSTRING("string","\xd1","\x28","\x30","\x11"),
	HX_HCSTRING("pick","\xe1","\xe8","\x57","\x4a"),
	HX_HCSTRING("_seed","\x50","\xa1","\x61","\xff"),
	HX_HCSTRING("get_seed","\xfa","\x40","\x0b","\xcc"),
	HX_HCSTRING("set_seed","\x6e","\x9a","\x68","\x7a"),
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	HX_HCSTRING("gen31","\x2e","\xf1","\x5b","\x91"),
	HX_HCSTRING("gen32","\x2f","\xf1","\x5b","\x91"),
	HX_HCSTRING("rand","\xa5","\x4d","\xa4","\x4b"),
	HX_HCSTRING("randinterval","\xea","\x73","\x4e","\x4a"),
	HX_HCSTRING("INT_MAX","\xd4","\xa7","\x23","\xa8"),
	HX_HCSTRING("INT_MAXPLUSONE","\xd8","\x7d","\x72","\xc2"),
	::String(null())
};

void Random_obj::__register()
{
	hx::Object *dummy = new Random_obj;
	Random_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Random","\xf1","\xd7","\x23","\xfb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Random_obj::__GetStatic;
	__mClass->mSetStaticField = &Random_obj::__SetStatic;
	__mClass->mMarkFunc = Random_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Random_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Random_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Random_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Random_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Random_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Random_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_90_boot)
HXDLIN(  90)		_seed = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_182_boot)
HXDLIN( 182)		_hx_INT_MAX = (int)2147483647;
            	}
{
            	HX_STACKFRAME(&_hx_pos_17042376b559995e_183_boot)
HXDLIN( 183)		INT_MAXPLUSONE = ((Float)2147483648.0);
            	}
}

} // end namespace haxegon
