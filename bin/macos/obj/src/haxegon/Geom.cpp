// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxegon_Geom
#include <haxegon/Geom.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_7_abs,"haxegon.Geom","abs",0x88e05b2e,"haxegon.Geom.abs","haxegon/Geom.hx",7,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_8_acos,"haxegon.Geom","acos",0x3b702c4a,"haxegon.Geom.acos","haxegon/Geom.hx",8,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_9_asin,"haxegon.Geom","asin",0x3b7c4b1b,"haxegon.Geom.asin","haxegon/Geom.hx",9,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_10_atan,"haxegon.Geom","atan",0x3b7d0664,"haxegon.Geom.atan","haxegon/Geom.hx",10,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_11_atan2,"haxegon.Geom","atan2",0xd1e8914e,"haxegon.Geom.atan2","haxegon/Geom.hx",11,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_12_ceil,"haxegon.Geom","ceil",0x3cc418c9,"haxegon.Geom.ceil","haxegon/Geom.hx",12,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_13_cos,"haxegon.Geom","cos",0x88e1eb03,"haxegon.Geom.cos","haxegon/Geom.hx",13,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_14_exp,"haxegon.Geom","exp",0x88e37759,"haxegon.Geom.exp","haxegon/Geom.hx",14,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_15_floor,"haxegon.Geom","floor",0xadaa6388,"haxegon.Geom.floor","haxegon/Geom.hx",15,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_16_fround,"haxegon.Geom","fround",0xbbd8b8ec,"haxegon.Geom.fround","haxegon/Geom.hx",16,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_17_log,"haxegon.Geom","log",0x88e8bf40,"haxegon.Geom.log","haxegon/Geom.hx",17,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_18_max,"haxegon.Geom","max",0x88e97560,"haxegon.Geom.max","haxegon/Geom.hx",18,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_19_min,"haxegon.Geom","min",0x88e97c4e,"haxegon.Geom.min","haxegon/Geom.hx",19,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_20_pow,"haxegon.Geom","pow",0x88ebc854,"haxegon.Geom.pow","haxegon/Geom.hx",20,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_21_round,"haxegon.Geom","round",0x98798a0a,"haxegon.Geom.round","haxegon/Geom.hx",21,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_22_sin,"haxegon.Geom","sin",0x88ee09d4,"haxegon.Geom.sin","haxegon/Geom.hx",22,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_23_sqrt,"haxegon.Geom","sqrt",0x4760a5a4,"haxegon.Geom.sqrt","haxegon/Geom.hx",23,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_24_tan,"haxegon.Geom","tan",0x88eec51d,"haxegon.Geom.tan","haxegon/Geom.hx",24,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_26_inbox,"haxegon.Geom","inbox",0x6926b102,"haxegon.Geom.inbox","haxegon/Geom.hx",26,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_40_clamp,"haxegon.Geom","clamp",0xf36c04b7,"haxegon.Geom.clamp","haxegon/Geom.hx",40,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_43_overlap,"haxegon.Geom","overlap",0xed78bc43,"haxegon.Geom.overlap","haxegon/Geom.hx",43,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_51_distance,"haxegon.Geom","distance",0x02fabef9,"haxegon.Geom.distance","haxegon/Geom.hx",51,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_55_getangle,"haxegon.Geom","getangle",0x868d0f41,"haxegon.Geom.getangle","haxegon/Geom.hx",55,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_59_todegrees,"haxegon.Geom","todegrees",0x26a31348,"haxegon.Geom.todegrees","haxegon/Geom.hx",59,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_63_toradians,"haxegon.Geom","toradians",0x13387613,"haxegon.Geom.toradians","haxegon/Geom.hx",63,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_67_anglebetween,"haxegon.Geom","anglebetween",0x5d801c19,"haxegon.Geom.anglebetween","haxegon/Geom.hx",67,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_6_boot,"haxegon.Geom","boot",0x3c227df6,"haxegon.Geom.boot","haxegon/Geom.hx",6,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_70_boot,"haxegon.Geom","boot",0x3c227df6,"haxegon.Geom.boot","haxegon/Geom.hx",70,0x66950df3)
HX_LOCAL_STACK_FRAME(_hx_pos_7f8acd3e2df07ab2_71_boot,"haxegon.Geom","boot",0x3c227df6,"haxegon.Geom.boot","haxegon/Geom.hx",71,0x66950df3)
namespace haxegon{

void Geom_obj::__construct() { }

Dynamic Geom_obj::__CreateEmpty() { return new Geom_obj; }

void *Geom_obj::_hx_vtable = 0;

Dynamic Geom_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Geom_obj > _hx_result = new Geom_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Geom_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0396daec;
}

Float Geom_obj::PI;

Float Geom_obj::abs(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_7_abs)
HXDLIN(   7)		return ::Math_obj::abs(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,abs,return )

Float Geom_obj::acos(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_8_acos)
HXDLIN(   8)		return ((Float)(::Math_obj::acos(v) * (int)180) / (Float)::Math_obj::PI);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,acos,return )

Float Geom_obj::asin(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_9_asin)
HXDLIN(   9)		return ((Float)(::Math_obj::asin(v) * (int)180) / (Float)::Math_obj::PI);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,asin,return )

Float Geom_obj::atan(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_10_atan)
HXDLIN(  10)		return ((Float)(::Math_obj::atan(v) * (int)180) / (Float)::Math_obj::PI);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,atan,return )

Float Geom_obj::atan2(Float y,Float x){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_11_atan2)
HXDLIN(  11)		return ((Float)(::Math_obj::atan2(y,x) * (int)180) / (Float)::Math_obj::PI);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Geom_obj,atan2,return )

Float Geom_obj::ceil(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_12_ceil)
HXDLIN(  12)		return ::Math_obj::ceil(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,ceil,return )

Float Geom_obj::cos(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_13_cos)
HXDLIN(  13)		return ::Math_obj::cos(((Float)(v * ::Math_obj::PI) / (Float)(int)180));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,cos,return )

Float Geom_obj::exp(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_14_exp)
HXDLIN(  14)		return ::Math_obj::exp(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,exp,return )

Float Geom_obj::floor(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_15_floor)
HXDLIN(  15)		return ::Math_obj::floor(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,floor,return )

Float Geom_obj::fround(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_16_fround)
HXDLIN(  16)		return ::Math_obj::fround(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,fround,return )

Float Geom_obj::log(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_17_log)
HXDLIN(  17)		return ::Math_obj::log(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,log,return )

Float Geom_obj::max(Float a,Float b){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_18_max)
HXDLIN(  18)		return ::Math_obj::max(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Geom_obj,max,return )

Float Geom_obj::min(Float a,Float b){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_19_min)
HXDLIN(  19)		return ::Math_obj::min(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Geom_obj,min,return )

Float Geom_obj::pow(Float v,Float exp){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_20_pow)
HXDLIN(  20)		return ::Math_obj::pow(v,exp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Geom_obj,pow,return )

Float Geom_obj::round(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_21_round)
HXDLIN(  21)		return ::Math_obj::round(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,round,return )

Float Geom_obj::sin(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_22_sin)
HXDLIN(  22)		return ::Math_obj::sin(((Float)(v * ::Math_obj::PI) / (Float)(int)180));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,sin,return )

Float Geom_obj::sqrt(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_23_sqrt)
HXDLIN(  23)		return ::Math_obj::sqrt(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,sqrt,return )

Float Geom_obj::tan(Float v){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_24_tan)
HXDLIN(  24)		return ::Math_obj::tan(((Float)(v * ::Math_obj::PI) / (Float)(int)180));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,tan,return )

bool Geom_obj::inbox(Float x,Float y,Float rectx,Float recty,Float rectw,Float recth){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_26_inbox)
HXLINE(  27)		if ((x >= rectx)) {
HXLINE(  28)			if ((x < (rectx + rectw))) {
HXLINE(  29)				if ((y >= recty)) {
HXLINE(  30)					if ((y < (recty + recth))) {
HXLINE(  31)						return true;
            					}
            				}
            			}
            		}
HXLINE(  36)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Geom_obj,inbox,return )

Float Geom_obj::clamp(Float value,Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_40_clamp)
HXDLIN(  40)		return ::Math_obj::min(max,::Math_obj::max(value,min));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Geom_obj,clamp,return )

bool Geom_obj::overlap(Float x1,Float y1,Float w1,Float h1,Float x2,Float y2,Float w2,Float h2){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_43_overlap)
HXLINE(  44)		::haxegon::Geom_obj::rect1->setTo(x1,y1,w1,h1);
HXLINE(  45)		::haxegon::Geom_obj::rect2->setTo(x2,y2,w2,h2);
HXLINE(  47)		return ::haxegon::Geom_obj::rect1->intersects(::haxegon::Geom_obj::rect2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Geom_obj,overlap,return )

Float Geom_obj::distance(Float x1,Float y1,Float x2,Float y2){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_51_distance)
HXDLIN(  51)		Float _hx_tmp = ::Math_obj::pow((x2 - x1),(int)2);
HXDLIN(  51)		return ::Math_obj::sqrt((_hx_tmp + ::Math_obj::pow((y2 - y1),(int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Geom_obj,distance,return )

Float Geom_obj::getangle(Float x1,Float y1,Float x2,Float y2){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_55_getangle)
HXDLIN(  55)		Float rad = (::Math_obj::PI * (int)2);
HXDLIN(  55)		Float rad1 = (rad - ::Math_obj::atan2((y2 - y1),(x2 - x1)));
HXDLIN(  55)		return ((Float)(hx::Mod(rad1,(::Math_obj::PI * (int)2)) * (int)180) / (Float)::Math_obj::PI);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Geom_obj,getangle,return )

Float Geom_obj::todegrees(Float rad){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_59_todegrees)
HXDLIN(  59)		return ((Float)(rad * (int)180) / (Float)::Math_obj::PI);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,todegrees,return )

Float Geom_obj::toradians(Float degrees){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_63_toradians)
HXDLIN(  63)		return ((Float)(degrees * ::Math_obj::PI) / (Float)(int)180);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Geom_obj,toradians,return )

Float Geom_obj::anglebetween(Float angle1,Float angle2){
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_67_anglebetween)
HXDLIN(  67)		return -(((Float)(::Math_obj::atan2(::Math_obj::sin(((Float)((angle1 - angle2) * ::Math_obj::PI) / (Float)(int)180)),::Math_obj::cos(((Float)((angle1 - angle2) * ::Math_obj::PI) / (Float)(int)180))) * (int)180) / (Float)::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Geom_obj,anglebetween,return )

 ::openfl::geom::Rectangle Geom_obj::rect1;

 ::openfl::geom::Rectangle Geom_obj::rect2;


Geom_obj::Geom_obj()
{
}

bool Geom_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"abs") ) { outValue = abs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cos") ) { outValue = cos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"exp") ) { outValue = exp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"log") ) { outValue = log_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pow") ) { outValue = pow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sin") ) { outValue = sin_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tan") ) { outValue = tan_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"acos") ) { outValue = acos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"asin") ) { outValue = asin_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"atan") ) { outValue = atan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ceil") ) { outValue = ceil_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sqrt") ) { outValue = sqrt_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"atan2") ) { outValue = atan2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floor") ) { outValue = floor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inbox") ) { outValue = inbox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rect1") ) { outValue = ( rect1 ); return true; }
		if (HX_FIELD_EQ(inName,"rect2") ) { outValue = ( rect2 ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fround") ) { outValue = fround_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"overlap") ) { outValue = overlap_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getangle") ) { outValue = getangle_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"todegrees") ) { outValue = todegrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toradians") ) { outValue = toradians_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"anglebetween") ) { outValue = anglebetween_dyn(); return true; }
	}
	return false;
}

bool Geom_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"rect1") ) { rect1=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"rect2") ) { rect2=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Geom_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Geom_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Geom_obj::PI,HX_HCSTRING("PI","\xf9","\x45","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Geom_obj::rect1,HX_HCSTRING("rect1","\x8d","\x32","\xbc","\xe6")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Geom_obj::rect2,HX_HCSTRING("rect2","\x8e","\x32","\xbc","\xe6")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Geom_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Geom_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Geom_obj::PI,"PI");
	HX_MARK_MEMBER_NAME(Geom_obj::rect1,"rect1");
	HX_MARK_MEMBER_NAME(Geom_obj::rect2,"rect2");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Geom_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Geom_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Geom_obj::PI,"PI");
	HX_VISIT_MEMBER_NAME(Geom_obj::rect1,"rect1");
	HX_VISIT_MEMBER_NAME(Geom_obj::rect2,"rect2");
};

#endif

hx::Class Geom_obj::__mClass;

static ::String Geom_obj_sStaticFields[] = {
	HX_HCSTRING("PI","\xf9","\x45","\x00","\x00"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("acos","\x86","\x32","\x69","\x40"),
	HX_HCSTRING("asin","\x57","\x51","\x75","\x40"),
	HX_HCSTRING("atan","\xa0","\x0c","\x76","\x40"),
	HX_HCSTRING("atan2","\x92","\xff","\xd4","\x26"),
	HX_HCSTRING("ceil","\x05","\x1f","\xbd","\x41"),
	HX_HCSTRING("cos","\x47","\x80","\x4b","\x00"),
	HX_HCSTRING("exp","\x9d","\x0c","\x4d","\x00"),
	HX_HCSTRING("floor","\xcc","\xd1","\x96","\x02"),
	HX_HCSTRING("fround","\x28","\xc6","\xcc","\xb5"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("pow","\x98","\x5d","\x55","\x00"),
	HX_HCSTRING("round","\x4e","\xf8","\x65","\xed"),
	HX_HCSTRING("sin","\x18","\x9f","\x57","\x00"),
	HX_HCSTRING("sqrt","\xe0","\xab","\x59","\x4c"),
	HX_HCSTRING("tan","\x61","\x5a","\x58","\x00"),
	HX_HCSTRING("inbox","\x46","\x1f","\x13","\xbe"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	HX_HCSTRING("overlap","\x87","\x43","\x10","\xa9"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("getangle","\x7d","\xe3","\x8b","\xef"),
	HX_HCSTRING("todegrees","\x8c","\xf3","\x9d","\x9c"),
	HX_HCSTRING("toradians","\x57","\x56","\x33","\x89"),
	HX_HCSTRING("anglebetween","\x55","\xbe","\x83","\x9c"),
	HX_HCSTRING("rect1","\x8d","\x32","\xbc","\xe6"),
	HX_HCSTRING("rect2","\x8e","\x32","\xbc","\xe6"),
	::String(null())
};

void Geom_obj::__register()
{
	hx::Object *dummy = new Geom_obj;
	Geom_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Geom","\x2a","\xbd","\x37","\x98");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Geom_obj::__GetStatic;
	__mClass->mSetStaticField = &Geom_obj::__SetStatic;
	__mClass->mMarkFunc = Geom_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Geom_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Geom_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Geom_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Geom_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Geom_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Geom_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_6_boot)
HXDLIN(   6)		PI = ((Float)3.141592653589793);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_70_boot)
HXDLIN(  70)		rect1 =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_7f8acd3e2df07ab2_71_boot)
HXDLIN(  71)		rect2 =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace haxegon
