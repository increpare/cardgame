// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxegon_Data
#include <haxegon/Data.h>
#endif
#ifndef INCLUDED_haxegon_Debug
#include <haxegon/Debug.h>
#endif
#ifndef INCLUDED_haxegon_S
#include <haxegon/S.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_13_loadjson,"haxegon.Data","loadjson",0x0bcb5de4,"haxegon.Data.loadjson","haxegon/Data.hx",13,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_33_sanitisefields,"haxegon.Data","sanitisefields",0x5d25b39f,"haxegon.Data.sanitisefields","haxegon/Data.hx",33,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_59_populatefields,"haxegon.Data","populatefields",0x12e3e3f9,"haxegon.Data.populatefields","haxegon/Data.hx",59,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_82_xmltojson,"haxegon.Data","xmltojson",0xc145b6e4,"haxegon.Data.xmltojson","haxegon/Data.hx",82,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_139_loadxml,"haxegon.Data","loadxml",0x62d21d9b,"haxegon.Data.loadxml","haxegon/Data.hx",139,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_157_loadtext,"haxegon.Data","loadtext",0x125ce869,"haxegon.Data.loadtext","haxegon/Data.hx",157,0x29798f45)
static const ::String _hx_array_data_96391498_12[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_259_initassets,"haxegon.Data","initassets",0xd44bf7a9,"haxegon.Data.initassets","haxegon/Data.hx",259,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_265_assetexists,"haxegon.Data","assetexists",0xece4e6f6,"haxegon.Data.assetexists","haxegon/Data.hx",265,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_270_assetexists_infolder,"haxegon.Data","assetexists_infolder",0x9aedcdfc,"haxegon.Data.assetexists_infolder","haxegon/Data.hx",270,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_286_getsoundasset,"haxegon.Data","getsoundasset",0x23125081,"haxegon.Data.getsoundasset","haxegon/Data.hx",286,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_292_getgraphicsasset,"haxegon.Data","getgraphicsasset",0xe8070785,"haxegon.Data.getgraphicsasset","haxegon/Data.hx",292,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_298_getfontasset,"haxegon.Data","getfontasset",0x9095d401,"haxegon.Data.getfontasset","haxegon/Data.hx",298,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_304_gettextasset,"haxegon.Data","gettextasset",0x7da7c063,"haxegon.Data.gettextasset","haxegon/Data.hx",304,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_10_boot,"haxegon.Data","boot",0xe22777c8,"haxegon.Data.boot","haxegon/Data.hx",10,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_11_boot,"haxegon.Data","boot",0xe22777c8,"haxegon.Data.boot","haxegon/Data.hx",11,0x29798f45)
namespace haxegon{

void Data_obj::__construct() { }

Dynamic Data_obj::__CreateEmpty() { return new Data_obj; }

void *Data_obj::_hx_vtable = 0;

Dynamic Data_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Data_obj > _hx_result = new Data_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Data_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0198325a;
}

int Data_obj::width;

int Data_obj::height;

 ::Dynamic Data_obj::loadjson(::String jsonfile){
            	HX_GC_STACKFRAME(&_hx_pos_0c832802bf20cfc6_13_loadjson)
HXLINE(  14)		jsonfile = jsonfile.toLowerCase();
HXLINE(  15)		if (!(::haxegon::S_obj::isinstring(jsonfile,HX_(".",2e,00,00,00)))) {
HXLINE(  15)			jsonfile = (jsonfile + HX_(".json",56,f1,d6,c2));
            		}
HXLINE(  17)		 ::Dynamic jfile;
HXLINE(  18)		if (::openfl::utils::Assets_obj::exists((HX_("data/text/",fd,91,6c,8f) + jsonfile),null())) {
HXLINE(  19)			jfile =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getText((HX_("data/text/",fd,91,6c,8f) + jsonfile)))->parseRec();
            		}
            		else {
HXLINE(  21)			::haxegon::Debug_obj::log(((HX_("ERROR: In loadjson, cannot find \"data/text/",66,11,13,68) + jsonfile) + HX_("\".",cc,1d,00,00)),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),21,HX_("haxegon.Data",98,14,39,96),HX_("loadjson",4e,e7,2e,cc)));
HXLINE(  22)			return null();
            		}
HXLINE(  26)		::haxegon::Data_obj::populatefields(jfile);
HXLINE(  27)		::haxegon::Data_obj::sanitisefields(jfile);
HXLINE(  29)		return jfile;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,loadjson,return )

void Data_obj::sanitisefields( ::Dynamic j){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_33_sanitisefields)
HXDLIN(  33)		if (::Std_obj::is(j,hx::ArrayBase::__mClass)) {
HXLINE(  34)			int _g1 = (int)0;
HXDLIN(  34)			int _g = ( (int)(j->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN(  34)			while((_g1 < _g)){
HXLINE(  34)				_g1 = (_g1 + (int)1);
HXDLIN(  34)				int i = (_g1 - (int)1);
HXLINE(  35)				::haxegon::Data_obj::sanitisefields(j->__GetItem(i));
            			}
            		}
            		else {
HXLINE(  37)			if (::Std_obj::is(j,hx::ClassOf< ::String >())) {
HXLINE(  38)				j = ::haxegon::S_obj::replacechar(( (::String)(j) ),HX_(":",3a,00,00,00),HX_("_",5f,00,00,00));
HXLINE(  39)				j = ::haxegon::S_obj::replacechar(( (::String)(j) ),HX_(";",3b,00,00,00),HX_("_",5f,00,00,00));
HXLINE(  40)				j = ::haxegon::S_obj::replacechar(( (::String)(j) ),HX_("-",2d,00,00,00),HX_("_",5f,00,00,00));
            			}
            			else {
HXLINE(  42)				if (::Reflect_obj::hasField(j,HX_("_fields",18,a0,05,ef))) {
HXLINE(  43)					if (hx::IsNotNull(  ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic)) )) {
HXLINE(  44)						int _g11 = (int)0;
HXDLIN(  44)						int _g2 = ( (int)( ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN(  44)						while((_g11 < _g2)){
HXLINE(  44)							_g11 = (_g11 + (int)1);
HXDLIN(  44)							int i1 = (_g11 - (int)1);
HXLINE(  45)							::String before = ( (::String)( ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic))->__GetItem(i1)) );
HXLINE(  46)							 ::Dynamic j1 =  ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic));
HXDLIN(  46)							j1->__SetItem(i1,::haxegon::S_obj::replacechar(( (::String)( ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic))->__GetItem(i1)) ),HX_(":",3a,00,00,00),HX_("_",5f,00,00,00)));
HXLINE(  47)							 ::Dynamic j2 =  ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic));
HXDLIN(  47)							j2->__SetItem(i1,::haxegon::S_obj::replacechar(( (::String)( ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic))->__GetItem(i1)) ),HX_(";",3b,00,00,00),HX_("_",5f,00,00,00)));
HXLINE(  48)							 ::Dynamic j3 =  ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic));
HXDLIN(  48)							j3->__SetItem(i1,::haxegon::S_obj::replacechar(( (::String)( ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic))->__GetItem(i1)) ),HX_("-",2d,00,00,00),HX_("_",5f,00,00,00)));
HXLINE(  49)							::String j4 = ( (::String)( ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic))->__GetItem(i1)) );
HXDLIN(  49)							::Reflect_obj::setField(j,j4,::Reflect_obj::getProperty(j,before));
HXLINE(  51)							::haxegon::Data_obj::sanitisefields(::Reflect_obj::field(j,before));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,sanitisefields,(void))

void Data_obj::populatefields( ::Dynamic j){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_59_populatefields)
HXDLIN(  59)		if (::Std_obj::is(j,hx::ArrayBase::__mClass)) {
HXLINE(  60)			int _g1 = (int)0;
HXDLIN(  60)			int _g = ( (int)(j->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN(  60)			while((_g1 < _g)){
HXLINE(  60)				_g1 = (_g1 + (int)1);
HXDLIN(  60)				int i = (_g1 - (int)1);
HXLINE(  61)				::haxegon::Data_obj::populatefields(j->__GetItem(i));
            			}
            		}
            		else {
HXLINE(  63)			if (!(::Std_obj::is(j,hx::ClassOf< ::String >()))) {
HXLINE(  64)				if (!(::Reflect_obj::hasField(j,HX_("_fields",18,a0,05,ef)))) {
HXLINE(  65)					::Array< ::String > jfields = ::Reflect_obj::fields(j);
HXLINE(  66)					bool _hx_tmp;
HXDLIN(  66)					if (hx::IsNotNull( jfields )) {
HXLINE(  66)						_hx_tmp = hx::IsNotEq( jfields,::Array_obj< ::String >::__new(0) );
            					}
            					else {
HXLINE(  66)						_hx_tmp = false;
            					}
HXDLIN(  66)					if (_hx_tmp) {
HXLINE(  67)						if ((jfields->length > (int)0)) {
HXLINE(  68)							j->__SetField(HX_("_fields",18,a0,05,ef),jfields,hx::paccDynamic);
HXLINE(  69)							if (hx::IsNotNull(  ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic)) )) {
HXLINE(  70)								if (!(::Std_obj::is( ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic)),hx::ClassOf< ::String >()))) {
HXLINE(  71)									int _g11 = (int)0;
HXDLIN(  71)									int _g2 = ( (int)( ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN(  71)									while((_g11 < _g2)){
HXLINE(  71)										_g11 = (_g11 + (int)1);
HXDLIN(  71)										int i1 = (_g11 - (int)1);
HXLINE(  72)										::haxegon::Data_obj::populatefields(::Reflect_obj::field(j,( (::String)( ::Dynamic(j->__Field(HX_("_fields",18,a0,05,ef),hx::paccDynamic))->__GetItem(i1)) )));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,populatefields,(void))

 ::Dynamic Data_obj::xmltojson( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_82_xmltojson)
HXLINE(  83)		 ::Dynamic jsonbit =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE(  84)		bool hasattributes = false;
HXLINE(  86)		if ((x->nodeType == ::Xml_obj::Element)) {
HXLINE(  87)			int attcount = (int)0;
HXLINE(  88)			{
HXLINE(  88)				 ::Dynamic attribute = x->attributes();
HXDLIN(  88)				while(( (bool)(attribute->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  88)					::String attribute1 = ( (::String)(attribute->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  89)					attcount = (attcount + (int)1);
HXLINE(  90)					::String attributename = attribute1;
HXLINE(  91)					attributename = ::haxegon::S_obj::replacechar(attributename,HX_(":",3a,00,00,00),HX_("_",5f,00,00,00));
HXLINE(  92)					attributename = ::haxegon::S_obj::replacechar(attributename,HX_(";",3b,00,00,00),HX_("_",5f,00,00,00));
HXLINE(  93)					attributename = ::haxegon::S_obj::replacechar(attributename,HX_("-",2d,00,00,00),HX_("_",5f,00,00,00));
HXLINE(  94)					::Reflect_obj::setField(jsonbit,attributename,x->get(attribute1));
            				}
            			}
HXLINE(  96)			if ((attcount > (int)0)) {
HXLINE(  96)				hasattributes = true;
            			}
            		}
HXLINE(  99)		{
HXLINE(  99)			bool _hx_tmp;
HXDLIN(  99)			if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE(  99)				_hx_tmp = (x->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  99)				_hx_tmp = false;
            			}
HXDLIN(  99)			if (_hx_tmp) {
HXLINE(  99)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + x->nodeType));
            			}
HXDLIN(  99)			 ::Dynamic xchild = x->children->iterator();
HXDLIN(  99)			while(( (bool)(xchild->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  99)				 ::Xml xchild1 = ( ( ::Xml)(xchild->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 100)				if ((xchild1->nodeType == ::Xml_obj::Element)) {
HXLINE( 101)					if ((xchild1->nodeType != ::Xml_obj::Element)) {
HXLINE( 101)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + xchild1->nodeType));
            					}
HXDLIN( 101)					::String nodename = xchild1->nodeName;
HXLINE( 102)					nodename = ::haxegon::S_obj::replacechar(nodename,HX_(":",3a,00,00,00),HX_("_",5f,00,00,00));
HXLINE( 103)					nodename = ::haxegon::S_obj::replacechar(nodename,HX_(";",3b,00,00,00),HX_("_",5f,00,00,00));
HXLINE( 104)					nodename = ::haxegon::S_obj::replacechar(nodename,HX_("-",2d,00,00,00),HX_("_",5f,00,00,00));
HXLINE( 105)					if (::Reflect_obj::hasField(jsonbit,nodename)) {
HXLINE( 107)						 ::Dynamic currentnode = ::Reflect_obj::field(jsonbit,nodename);
HXLINE( 108)						if (::Std_obj::is(currentnode,hx::ArrayBase::__mClass)) {
HXLINE( 109)							 ::Dynamic n = ::haxegon::Data_obj::xmltojson(xchild1);
HXLINE( 110)							currentnode->__Field(HX_("push",da,11,61,4a),hx::paccDynamic)(n);
HXLINE( 111)							::Reflect_obj::setField(jsonbit,nodename,currentnode);
            						}
            						else {
HXLINE( 113)							::cpp::VirtualArray nodearray = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 114)							nodearray->push(currentnode);
HXLINE( 115)							nodearray->push(::haxegon::Data_obj::xmltojson(xchild1));
HXLINE( 116)							::Reflect_obj::setField(jsonbit,nodename,nodearray);
            						}
            					}
            					else {
HXLINE( 119)						::Reflect_obj::setField(jsonbit,nodename,::haxegon::Data_obj::xmltojson(xchild1));
            					}
            				}
            				else {
HXLINE( 121)					if ((xchild1->nodeType == ::Xml_obj::PCData)) {
HXLINE( 122)						bool _hx_tmp1;
HXDLIN( 122)						if ((xchild1->nodeType != ::Xml_obj::Document)) {
HXLINE( 122)							_hx_tmp1 = (xchild1->nodeType == ::Xml_obj::Element);
            						}
            						else {
HXLINE( 122)							_hx_tmp1 = true;
            						}
HXDLIN( 122)						if (_hx_tmp1) {
HXLINE( 122)							HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + xchild1->nodeType));
            						}
HXDLIN( 122)						::String textval = xchild1->nodeValue;
HXLINE( 123)						textval = ::haxegon::S_obj::replacechar(textval,HX_("\r",0d,00,00,00),HX_("",00,00,00,00));
HXLINE( 124)						textval = ::haxegon::S_obj::replacechar(textval,HX_("\n",0a,00,00,00),HX_("",00,00,00,00));
HXLINE( 125)						textval = ::haxegon::S_obj::trimspaces(textval);
HXLINE( 126)						if ((textval != HX_("",00,00,00,00))) {
HXLINE( 127)							if (hasattributes) {
HXLINE( 128)								jsonbit->__SetField(HX_("_text",8c,e8,0a,00),textval,hx::paccDynamic);
            							}
            							else {
HXLINE( 130)								jsonbit = textval;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 136)		return jsonbit;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,xmltojson,return )

 ::Dynamic Data_obj::loadxml(::String xmlfile){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_139_loadxml)
HXLINE( 140)		 ::Dynamic xfile =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 141)		if (!(::haxegon::S_obj::isinstring(xmlfile,HX_(".",2e,00,00,00)))) {
HXLINE( 141)			xmlfile = (xmlfile + HX_(".xml",69,3e,c3,1e));
            		}
HXLINE( 143)		if (::openfl::utils::Assets_obj::exists((HX_("data/text/",fd,91,6c,8f) + xmlfile),null())) {
HXLINE( 144)			xfile = ::haxegon::Data_obj::xmltojson(::Xml_obj::parse(::openfl::utils::Assets_obj::getText((HX_("data/text/",fd,91,6c,8f) + xmlfile))));
            		}
            		else {
HXLINE( 146)			::haxegon::Debug_obj::log(((HX_("ERROR: In loadxml, cannot find \"data/text/",5d,01,f3,62) + xmlfile) + HX_("\".",cc,1d,00,00)),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),146,HX_("haxegon.Data",98,14,39,96),HX_("loadxml",71,2f,fe,08)));
HXLINE( 147)			return null();
            		}
HXLINE( 151)		::haxegon::Data_obj::populatefields(xfile);
HXLINE( 152)		::haxegon::Data_obj::sanitisefields(xfile);
HXLINE( 154)		return xfile;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,loadxml,return )

::Array< ::String > Data_obj::loadtext(::String textfile){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_157_loadtext)
HXLINE( 158)		textfile = textfile.toLowerCase();
HXLINE( 159)		if (!(::haxegon::S_obj::isinstring(textfile,HX_(".",2e,00,00,00)))) {
HXLINE( 159)			textfile = (textfile + HX_(".txt",02,3f,c0,1e));
            		}
HXLINE( 160)		::String tempstring = HX_("",00,00,00,00);
HXLINE( 162)		if (::openfl::utils::Assets_obj::exists((HX_("data/text/",fd,91,6c,8f) + textfile),null())) {
HXLINE( 163)			tempstring = ::openfl::utils::Assets_obj::getText((HX_("data/text/",fd,91,6c,8f) + textfile));
            		}
            		else {
HXLINE( 165)			::haxegon::Debug_obj::log(((HX_("ERROR: In loadtext, cannot find \"data/text/",41,34,fd,7c) + textfile) + HX_("\".",cc,1d,00,00)),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),165,HX_("haxegon.Data",98,14,39,96),HX_("loadtext",d3,71,c0,d2)));
HXLINE( 166)			return ::Array_obj< ::String >::fromData( _hx_array_data_96391498_12,1);
            		}
HXLINE( 169)		tempstring = ::haxegon::S_obj::replacechar(tempstring,HX_("\r",0d,00,00,00),HX_("",00,00,00,00));
HXLINE( 171)		return tempstring.split(HX_("\n",0a,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,loadtext,return )

::Array< ::String > Data_obj::embeddedassets_original;

::Array< ::String > Data_obj::embeddedassets;

void Data_obj::initassets(){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_259_initassets)
HXLINE( 260)		::haxegon::Data_obj::embeddedassets_original = ::openfl::utils::Assets_obj::list(null());
HXLINE( 261)		::haxegon::Data_obj::embeddedassets = ::Array_obj< ::String >::__new(0);
HXLINE( 262)		{
HXLINE( 262)			int _g1 = (int)0;
HXDLIN( 262)			int _g = ::haxegon::Data_obj::embeddedassets_original->length;
HXDLIN( 262)			while((_g1 < _g)){
HXLINE( 262)				_g1 = (_g1 + (int)1);
HXDLIN( 262)				int i = (_g1 - (int)1);
HXDLIN( 262)				::Array< ::String > _hx_tmp = ::haxegon::Data_obj::embeddedassets;
HXDLIN( 262)				_hx_tmp->push(::haxegon::Data_obj::embeddedassets_original->__get(i).toLowerCase());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Data_obj,initassets,(void))

bool Data_obj::assetexists(::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_265_assetexists)
HXLINE( 266)		filename = filename.toLowerCase();
HXLINE( 267)		return (::haxegon::Data_obj::embeddedassets->indexOf(filename,null()) >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,assetexists,return )

bool Data_obj::assetexists_infolder(::String folder,::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_270_assetexists_infolder)
HXLINE( 271)		filename = filename.toLowerCase();
HXLINE( 272)		folder = folder.toLowerCase();
HXLINE( 274)		int folderlength = folder.length;
HXLINE( 275)		int filenamelength = filename.length;
HXLINE( 276)		{
HXLINE( 276)			int _g1 = (int)0;
HXDLIN( 276)			int _g = ::haxegon::Data_obj::embeddedassets->length;
HXDLIN( 276)			while((_g1 < _g)){
HXLINE( 276)				_g1 = (_g1 + (int)1);
HXDLIN( 276)				int i = (_g1 - (int)1);
HXLINE( 277)				if ((::haxegon::Data_obj::embeddedassets->__get(i).substr((int)0,folderlength) == folder)) {
HXLINE( 278)					::String currentstring = ::haxegon::Data_obj::embeddedassets->__get(i);
HXDLIN( 278)					if ((currentstring.substr((currentstring.length - filenamelength),filenamelength) == filename)) {
HXLINE( 279)						return true;
            					}
            				}
            			}
            		}
HXLINE( 283)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,assetexists_infolder,return )

 ::openfl::media::Sound Data_obj::getsoundasset(::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_286_getsoundasset)
HXLINE( 287)		filename = filename.toLowerCase();
HXLINE( 288)		::Array< ::String > realfilename = ::haxegon::Data_obj::embeddedassets_original;
HXDLIN( 288)		::String realfilename1 = realfilename->__get(::haxegon::Data_obj::embeddedassets->indexOf(filename,null()));
HXLINE( 289)		return ::openfl::utils::Assets_obj::getSound(realfilename1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,getsoundasset,return )

 ::openfl::display::BitmapData Data_obj::getgraphicsasset(::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_292_getgraphicsasset)
HXLINE( 293)		filename = filename.toLowerCase();
HXLINE( 294)		::Array< ::String > realfilename = ::haxegon::Data_obj::embeddedassets_original;
HXDLIN( 294)		::String realfilename1 = realfilename->__get(::haxegon::Data_obj::embeddedassets->indexOf(filename,null()));
HXLINE( 295)		return ::openfl::utils::Assets_obj::getBitmapData(realfilename1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,getgraphicsasset,return )

 ::openfl::text::Font Data_obj::getfontasset(::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_298_getfontasset)
HXLINE( 299)		filename = filename.toLowerCase();
HXLINE( 300)		::Array< ::String > realfilename = ::haxegon::Data_obj::embeddedassets_original;
HXDLIN( 300)		::String realfilename1 = realfilename->__get(::haxegon::Data_obj::embeddedassets->indexOf(filename,null()));
HXLINE( 301)		return ::openfl::utils::Assets_obj::getFont(realfilename1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,getfontasset,return )

::String Data_obj::gettextasset(::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_304_gettextasset)
HXLINE( 305)		filename = filename.toLowerCase();
HXLINE( 306)		::Array< ::String > realfilename = ::haxegon::Data_obj::embeddedassets_original;
HXDLIN( 306)		::String realfilename1 = realfilename->__get(::haxegon::Data_obj::embeddedassets->indexOf(filename,null()));
HXLINE( 307)		return ::openfl::utils::Assets_obj::getText(realfilename1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,gettextasset,return )


Data_obj::Data_obj()
{
}

bool Data_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { outValue = ( width ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { outValue = ( height ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadxml") ) { outValue = loadxml_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loadjson") ) { outValue = loadjson_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadtext") ) { outValue = loadtext_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"xmltojson") ) { outValue = xmltojson_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initassets") ) { outValue = initassets_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"assetexists") ) { outValue = assetexists_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getfontasset") ) { outValue = getfontasset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gettextasset") ) { outValue = gettextasset_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getsoundasset") ) { outValue = getsoundasset_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sanitisefields") ) { outValue = sanitisefields_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"populatefields") ) { outValue = populatefields_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"embeddedassets") ) { outValue = ( embeddedassets ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getgraphicsasset") ) { outValue = getgraphicsasset_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"assetexists_infolder") ) { outValue = assetexists_infolder_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"embeddedassets_original") ) { outValue = ( embeddedassets_original ); return true; }
	}
	return false;
}

bool Data_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"embeddedassets") ) { embeddedassets=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"embeddedassets_original") ) { embeddedassets_original=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Data_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Data_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Data_obj::width,HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(void *) &Data_obj::height,HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Data_obj::embeddedassets_original,HX_HCSTRING("embeddedassets_original","\x83","\x6c","\xc5","\xcf")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Data_obj::embeddedassets,HX_HCSTRING("embeddedassets","\x8d","\x25","\x10","\x23")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Data_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Data_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Data_obj::width,"width");
	HX_MARK_MEMBER_NAME(Data_obj::height,"height");
	HX_MARK_MEMBER_NAME(Data_obj::embeddedassets_original,"embeddedassets_original");
	HX_MARK_MEMBER_NAME(Data_obj::embeddedassets,"embeddedassets");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Data_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Data_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Data_obj::width,"width");
	HX_VISIT_MEMBER_NAME(Data_obj::height,"height");
	HX_VISIT_MEMBER_NAME(Data_obj::embeddedassets_original,"embeddedassets_original");
	HX_VISIT_MEMBER_NAME(Data_obj::embeddedassets,"embeddedassets");
};

#endif

hx::Class Data_obj::__mClass;

static ::String Data_obj_sStaticFields[] = {
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("loadjson","\x4e","\xe7","\x2e","\xcc"),
	HX_HCSTRING("sanitisefields","\x89","\x28","\x39","\x3e"),
	HX_HCSTRING("populatefields","\xe3","\x58","\xf7","\xf3"),
	HX_HCSTRING("xmltojson","\x3a","\x6a","\xfa","\x57"),
	HX_HCSTRING("loadxml","\x71","\x2f","\xfe","\x08"),
	HX_HCSTRING("loadtext","\xd3","\x71","\xc0","\xd2"),
	HX_HCSTRING("embeddedassets_original","\x83","\x6c","\xc5","\xcf"),
	HX_HCSTRING("embeddedassets","\x8d","\x25","\x10","\x23"),
	HX_HCSTRING("initassets","\x93","\x2f","\xb4","\x1b"),
	HX_HCSTRING("assetexists","\xcc","\x9b","\xad","\x20"),
	HX_HCSTRING("assetexists_infolder","\x66","\xce","\xae","\xc8"),
	HX_HCSTRING("getsoundasset","\xd7","\x66","\x12","\x62"),
	HX_HCSTRING("getgraphicsasset","\xef","\x0a","\x91","\xcc"),
	HX_HCSTRING("getfontasset","\x6b","\x5a","\x6b","\xac"),
	HX_HCSTRING("gettextasset","\xcd","\x46","\x7d","\x99"),
	::String(null())
};

void Data_obj::__register()
{
	hx::Object *dummy = new Data_obj;
	Data_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Data","\x98","\x14","\x39","\x96");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Data_obj::__GetStatic;
	__mClass->mSetStaticField = &Data_obj::__SetStatic;
	__mClass->mMarkFunc = Data_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Data_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Data_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Data_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Data_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Data_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Data_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_10_boot)
HXDLIN(  10)		width = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_11_boot)
HXDLIN(  11)		height = (int)0;
            	}
}

} // end namespace haxegon
