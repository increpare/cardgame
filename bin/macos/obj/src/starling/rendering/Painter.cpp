// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DCompareMode_Context3DCompareMode_Impl_
#include <openfl/display3D/_Context3DCompareMode/Context3DCompareMode_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DProfile_Context3DProfile_Impl_
#include <openfl/display3D/_Context3DProfile/Context3DProfile_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTriangleFace_Context3DTriangleFace_Impl_
#include <openfl/display3D/_Context3DTriangleFace/Context3DTriangleFace_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_openfl_utils__Dictionary_Dictionary_Impl_
#include <openfl/utils/_Dictionary/Dictionary_Impl_.h>
#endif
#ifndef INCLUDED_openfl_utils__Dictionary_UtilsObjectMap
#include <openfl/utils/_Dictionary/UtilsObjectMap.h>
#endif
#ifndef INCLUDED_starling_display_BlendMode
#include <starling/display/BlendMode.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_MeshBatch
#include <starling/display/MeshBatch.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchProcessor
#include <starling/rendering/BatchProcessor.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchToken
#include <starling/rendering/BatchToken.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_rendering_Program
#include <starling/rendering/Program.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MeshSubset
#include <starling/utils/MeshSubset.h>
#endif
#ifndef INCLUDED_starling_utils_Pool
#include <starling/utils/Pool.h>
#endif
#ifndef INCLUDED_starling_utils_RectangleUtil
#include <starling/utils/RectangleUtil.h>
#endif
#ifndef INCLUDED_starling_utils_RenderUtil
#include <starling/utils/RenderUtil.h>
#endif
#ifndef INCLUDED_starling_utils_SystemUtil
#include <starling/utils/SystemUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_04b80e41a22e953e_75_new,"starling.rendering.Painter","new",0x6daddd95,"starling.rendering.Painter.new","starling/rendering/Painter.hx",75,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_194_dispose,"starling.rendering.Painter","dispose",0x976dcc54,"starling.rendering.Painter.dispose","starling/rendering/Painter.hx",194,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_218_requestContext3D,"starling.rendering.Painter","requestContext3D",0xd6b590bc,"starling.rendering.Painter.requestContext3D","starling/rendering/Painter.hx",218,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_222_onContextCreated,"starling.rendering.Painter","onContextCreated",0x9e8396e3,"starling.rendering.Painter.onContextCreated","starling/rendering/Painter.hx",222,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_247_configureBackBuffer,"starling.rendering.Painter","configureBackBuffer",0xc38fc342,"starling.rendering.Painter.configureBackBuffer","starling/rendering/Painter.hx",247,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_284_registerProgram,"starling.rendering.Painter","registerProgram",0xeaa13716,"starling.rendering.Painter.registerProgram","starling/rendering/Painter.hx",284,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_291_deleteProgram,"starling.rendering.Painter","deleteProgram",0xaddb5f0e,"starling.rendering.Painter.deleteProgram","starling/rendering/Painter.hx",291,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_304_getProgram,"starling.rendering.Painter","getProgram",0xfc7e03f9,"starling.rendering.Painter.getProgram","starling/rendering/Painter.hx",304,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_310_hasProgram,"starling.rendering.Painter","hasProgram",0x37d065b5,"starling.rendering.Painter.hasProgram","starling/rendering/Painter.hx",310,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_322_pushState,"starling.rendering.Painter","pushState",0xe7fa40cc,"starling.rendering.Painter.pushState","starling/rendering/Painter.hx",322,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_340_setStateTo,"starling.rendering.Painter","setStateTo",0x42647dd5,"starling.rendering.Painter.setStateTo","starling/rendering/Painter.hx",340,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_355_popState,"starling.rendering.Painter","popState",0xae12ad6b,"starling.rendering.Painter.popState","starling/rendering/Painter.hx",355,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_368_restoreState,"starling.rendering.Painter","restoreState",0x8f70680e,"starling.rendering.Painter.restoreState","starling/rendering/Painter.hx",368,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_379_fillToken,"starling.rendering.Painter","fillToken",0x02a60c6b,"starling.rendering.Painter.fillToken","starling/rendering/Painter.hx",379,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_401_drawMask,"starling.rendering.Painter","drawMask",0x1dc0ddbb,"starling.rendering.Painter.drawMask","starling/rendering/Painter.hx",401,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_452_eraseMask,"starling.rendering.Painter","eraseMask",0xe8dd23e7,"starling.rendering.Painter.eraseMask","starling/rendering/Painter.hx",452,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_493_renderMask,"starling.rendering.Painter","renderMask",0x9e836ecd,"starling.rendering.Painter.renderMask","starling/rendering/Painter.hx",493,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_526_pushClipRect,"starling.rendering.Painter","pushClipRect",0x9df0ec39,"starling.rendering.Painter.pushClipRect","starling/rendering/Painter.hx",526,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_541_popClipRect,"starling.rendering.Painter","popClipRect",0x82fcecfa,"starling.rendering.Painter.popClipRect","starling/rendering/Painter.hx",541,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_558_isRectangularMask,"starling.rendering.Painter","isRectangularMask",0x13daf575,"starling.rendering.Painter.isRectangularMask","starling/rendering/Painter.hx",558,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_590_batchMesh,"starling.rendering.Painter","batchMesh",0x0e4825bc,"starling.rendering.Painter.batchMesh","starling/rendering/Painter.hx",590,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_596_finishMeshBatch,"starling.rendering.Painter","finishMeshBatch",0xf2fef86f,"starling.rendering.Painter.finishMeshBatch","starling/rendering/Painter.hx",596,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_601_finishFrame,"starling.rendering.Painter","finishFrame",0x7332650f,"starling.rendering.Painter.finishFrame","starling/rendering/Painter.hx",601,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_611_processCacheExclusions,"starling.rendering.Painter","processCacheExclusions",0xb7d01503,"starling.rendering.Painter.processCacheExclusions","starling/rendering/Painter.hx",611,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_620_setupContextDefaults,"starling.rendering.Painter","setupContextDefaults",0x642d1ecf,"starling.rendering.Painter.setupContextDefaults","starling/rendering/Painter.hx",620,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_630_nextFrame,"starling.rendering.Painter","nextFrame",0xcd9bf52f,"starling.rendering.Painter.nextFrame","starling/rendering/Painter.hx",630,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_647_swapBatchProcessors,"starling.rendering.Painter","swapBatchProcessors",0xb159c51d,"starling.rendering.Painter.swapBatchProcessors","starling/rendering/Painter.hx",647,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_657_drawFromCache,"starling.rendering.Painter","drawFromCache",0xb01d1949,"starling.rendering.Painter.drawFromCache","starling/rendering/Painter.hx",657,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_706_excludeFromCache,"starling.rendering.Painter","excludeFromCache",0xd7e40fe9,"starling.rendering.Painter.excludeFromCache","starling/rendering/Painter.hx",706,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_710_drawBatch,"starling.rendering.Painter","drawBatch",0x9599800b,"starling.rendering.Painter.drawBatch","starling/rendering/Painter.hx",710,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_729_prepareToDraw,"starling.rendering.Painter","prepareToDraw",0x99c87d7b,"starling.rendering.Painter.prepareToDraw","starling/rendering/Painter.hx",729,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_740_clear,"starling.rendering.Painter","clear",0x4a3af602,"starling.rendering.Painter.clear","starling/rendering/Painter.hx",740,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_748_present,"starling.rendering.Painter","present",0x15fd86b0,"starling.rendering.Painter.present","starling/rendering/Painter.hx",748,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_755_applyBlendMode,"starling.rendering.Painter","applyBlendMode",0x8ccee5f1,"starling.rendering.Painter.applyBlendMode","starling/rendering/Painter.hx",755,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_766_applyCulling,"starling.rendering.Painter","applyCulling",0x41dc52cd,"starling.rendering.Painter.applyCulling","starling/rendering/Painter.hx",766,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_777_applyDepthTest,"starling.rendering.Painter","applyDepthTest",0x24142492,"starling.rendering.Painter.applyDepthTest","starling/rendering/Painter.hx",777,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_790_applyRenderTarget,"starling.rendering.Painter","applyRenderTarget",0xbf0915ca,"starling.rendering.Painter.applyRenderTarget","starling/rendering/Painter.hx",790,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_812_applyClipRect,"starling.rendering.Painter","applyClipRect",0xf3f87117,"starling.rendering.Painter.applyClipRect","starling/rendering/Painter.hx",812,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_862_get_drawCount,"starling.rendering.Painter","get_drawCount",0x2f2acf77,"starling.rendering.Painter.get_drawCount","starling/rendering/Painter.hx",862,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_863_set_drawCount,"starling.rendering.Painter","set_drawCount",0x7430b183,"starling.rendering.Painter.set_drawCount","starling/rendering/Painter.hx",863,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_872_get_stencilReferenceValue,"starling.rendering.Painter","get_stencilReferenceValue",0x45c2320e,"starling.rendering.Painter.get_stencilReferenceValue","starling/rendering/Painter.hx",872,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_879_set_stencilReferenceValue,"starling.rendering.Painter","set_stencilReferenceValue",0xb218f61a,"starling.rendering.Painter.set_stencilReferenceValue","starling/rendering/Painter.hx",879,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_896_get_cacheEnabled,"starling.rendering.Painter","get_cacheEnabled",0x0eb94093,"starling.rendering.Painter.get_cacheEnabled","starling/rendering/Painter.hx",896,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_898_set_cacheEnabled,"starling.rendering.Painter","set_cacheEnabled",0x64fb2e07,"starling.rendering.Painter.set_cacheEnabled","starling/rendering/Painter.hx",898,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_918_get_state,"starling.rendering.Painter","get_state",0xe788355d,"starling.rendering.Painter.get_state","starling/rendering/Painter.hx",918,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_922_get_stage3D,"starling.rendering.Painter","get_stage3D",0xf96e6d3b,"starling.rendering.Painter.get_stage3D","starling/rendering/Painter.hx",922,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_926_get_context,"starling.rendering.Painter","get_context",0xe51bc03b,"starling.rendering.Painter.get_context","starling/rendering/Painter.hx",926,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_932_set_frameID,"starling.rendering.Painter","set_frameID",0x1e850ea0,"starling.rendering.Painter.set_frameID","starling/rendering/Painter.hx",932,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_935_get_frameID,"starling.rendering.Painter","get_frameID",0x14180794,"starling.rendering.Painter.get_frameID","starling/rendering/Painter.hx",935,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_940_get_pixelSize,"starling.rendering.Painter","get_pixelSize",0x2299a3b3,"starling.rendering.Painter.get_pixelSize","starling/rendering/Painter.hx",940,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_941_set_pixelSize,"starling.rendering.Painter","set_pixelSize",0x679f85bf,"starling.rendering.Painter.set_pixelSize","starling/rendering/Painter.hx",941,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_946_get_shareContext,"starling.rendering.Painter","get_shareContext",0x08e4c504,"starling.rendering.Painter.get_shareContext","starling/rendering/Painter.hx",946,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_947_set_shareContext,"starling.rendering.Painter","set_shareContext",0x5f26b278,"starling.rendering.Painter.set_shareContext","starling/rendering/Painter.hx",947,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_952_get_enableErrorChecking,"starling.rendering.Painter","get_enableErrorChecking",0xb579a8cb,"starling.rendering.Painter.get_enableErrorChecking","starling/rendering/Painter.hx",952,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_954_set_enableErrorChecking,"starling.rendering.Painter","set_enableErrorChecking",0xb7db11d7,"starling.rendering.Painter.set_enableErrorChecking","starling/rendering/Painter.hx",954,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_966_get_backBufferWidth,"starling.rendering.Painter","get_backBufferWidth",0xd6dd504b,"starling.rendering.Painter.get_backBufferWidth","starling/rendering/Painter.hx",966,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_974_get_backBufferHeight,"starling.rendering.Painter","get_backBufferHeight",0xe1186a02,"starling.rendering.Painter.get_backBufferHeight","starling/rendering/Painter.hx",974,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_980_get_backBufferScaleFactor,"starling.rendering.Painter","get_backBufferScaleFactor",0x92c47afe,"starling.rendering.Painter.get_backBufferScaleFactor","starling/rendering/Painter.hx",980,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_987_get_contextValid,"starling.rendering.Painter","get_contextValid",0x9a406ec1,"starling.rendering.Painter.get_contextValid","starling/rendering/Painter.hx",987,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_1000_get_profile,"starling.rendering.Painter","get_profile",0xbeed7375,"starling.rendering.Painter.get_profile","starling/rendering/Painter.hx",1000,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_1010_get_sharedData,"starling.rendering.Painter","get_sharedData",0x6f9ae4a3,"starling.rendering.Painter.get_sharedData","starling/rendering/Painter.hx",1010,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_1022_get_programs,"starling.rendering.Painter","get_programs",0xea28c1a3,"starling.rendering.Painter.get_programs","starling/rendering/Painter.hx",1022,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_78_boot,"starling.rendering.Painter","boot",0x828d055d,"starling.rendering.Painter.boot","starling/rendering/Painter.hx",78,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_82_boot,"starling.rendering.Painter","boot",0x828d055d,"starling.rendering.Painter.boot","starling/rendering/Painter.hx",82,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_119_boot,"starling.rendering.Painter","boot",0x828d055d,"starling.rendering.Painter.boot","starling/rendering/Painter.hx",119,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_122_boot,"starling.rendering.Painter","boot",0x828d055d,"starling.rendering.Painter.boot","starling/rendering/Painter.hx",122,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_123_boot,"starling.rendering.Painter","boot",0x828d055d,"starling.rendering.Painter.boot","starling/rendering/Painter.hx",123,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_124_boot,"starling.rendering.Painter","boot",0x828d055d,"starling.rendering.Painter.boot","starling/rendering/Painter.hx",124,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_125_boot,"starling.rendering.Painter","boot",0x828d055d,"starling.rendering.Painter.boot","starling/rendering/Painter.hx",125,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_126_boot,"starling.rendering.Painter","boot",0x828d055d,"starling.rendering.Painter.boot","starling/rendering/Painter.hx",126,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_127_boot,"starling.rendering.Painter","boot",0x828d055d,"starling.rendering.Painter.boot","starling/rendering/Painter.hx",127,0x83f67d3d)
HX_LOCAL_STACK_FRAME(_hx_pos_04b80e41a22e953e_128_boot,"starling.rendering.Painter","boot",0x828d055d,"starling.rendering.Painter.boot","starling/rendering/Painter.hx",128,0x83f67d3d)
namespace starling{
namespace rendering{

void Painter_obj::__construct( ::openfl::display::Stage3D stage3D){
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_75_new)
HXLINE(  90)		this->_frameID = (int)0;
HXLINE( 162)		this->_stage3D = stage3D;
HXLINE( 163)		this->_stage3D->addEventListener(HX_("context3DCreate",7c,bf,59,7b),this->onContextCreated_dyn(),false,(int)40,true);
HXLINE( 164)		this->_context = this->_stage3D->context3D;
HXLINE( 165)		this->_shareContext = false;
HXLINE( 166)		int _hx_tmp;
HXDLIN( 166)		if (hx::IsNotNull( this->_context )) {
HXLINE( 166)			_hx_tmp = this->_context->backBufferWidth;
            		}
            		else {
HXLINE( 166)			_hx_tmp = (int)0;
            		}
HXDLIN( 166)		this->_backBufferWidth = _hx_tmp;
HXLINE( 167)		int _hx_tmp1;
HXDLIN( 167)		if (hx::IsNotNull( this->_context )) {
HXLINE( 167)			_hx_tmp1 = this->_context->backBufferHeight;
            		}
            		else {
HXLINE( 167)			_hx_tmp1 = (int)0;
            		}
HXDLIN( 167)		this->_backBufferHeight = _hx_tmp1;
HXLINE( 168)		this->_backBufferScaleFactor = (this->_pixelSize = ((Float)1.0));
HXLINE( 169)		this->_stencilReferenceValues = ::openfl::utils::_Dictionary::Dictionary_Impl__obj::toUtilsObjectMap(null(),null());
HXLINE( 170)		int length = null();
HXDLIN( 170)		bool fixed = null();
HXDLIN( 170)		this->_clipRectStack =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE( 172)		this->_batchProcessorCurr =  ::starling::rendering::BatchProcessor_obj::__alloc( HX_CTX );
HXLINE( 173)		this->_batchProcessorCurr->set_onBatchComplete(this->drawBatch_dyn());
HXLINE( 175)		this->_batchProcessorPrev =  ::starling::rendering::BatchProcessor_obj::__alloc( HX_CTX );
HXLINE( 176)		this->_batchProcessorPrev->set_onBatchComplete(this->drawBatch_dyn());
HXLINE( 178)		this->_batchProcessorSpec =  ::starling::rendering::BatchProcessor_obj::__alloc( HX_CTX );
HXLINE( 179)		this->_batchProcessorSpec->set_onBatchComplete(this->drawBatch_dyn());
HXLINE( 181)		this->_batchProcessor = this->_batchProcessorCurr;
HXLINE( 182)		int length1 = null();
HXDLIN( 182)		bool fixed1 = null();
HXDLIN( 182)		this->_batchCacheExclusions =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length1,fixed1,null()),null());
HXLINE( 184)		this->_state =  ::starling::rendering::RenderState_obj::__alloc( HX_CTX );
HXLINE( 185)		this->_state->set_onDrawRequired(this->finishMeshBatch_dyn());
HXLINE( 186)		int length2 = null();
HXDLIN( 186)		bool fixed2 = null();
HXDLIN( 186)		this->_stateStack =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length2,fixed2,null()),null());
HXLINE( 187)		this->_stateStackPos = (int)-1;
HXLINE( 188)		this->_stateStackLength = (int)0;
            	}

Dynamic Painter_obj::__CreateEmpty() { return new Painter_obj; }

void *Painter_obj::_hx_vtable = 0;

Dynamic Painter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Painter_obj > _hx_result = new Painter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Painter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ee41f67;
}

void Painter_obj::dispose(){
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_194_dispose)
HXLINE( 195)		this->_batchProcessorCurr->dispose();
HXLINE( 196)		this->_batchProcessorPrev->dispose();
HXLINE( 197)		this->_batchProcessorSpec->dispose();
HXLINE( 199)		if (!(this->_shareContext)) {
HXLINE( 201)			this->_context->dispose(false);
HXLINE( 202)			::starling::rendering::Painter_obj::sSharedData =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,dispose,(void))

void Painter_obj::requestContext3D(::String renderMode, ::Dynamic profile){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_218_requestContext3D)
HXDLIN( 218)		::starling::utils::RenderUtil_obj::requestContext3D(this->_stage3D,renderMode,profile);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Painter_obj,requestContext3D,(void))

void Painter_obj::onContextCreated( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_222_onContextCreated)
HXLINE( 223)		this->_context = this->_stage3D->context3D;
HXLINE( 224)		this->_context->set_enableErrorChecking(this->_enableErrorChecking);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,onContextCreated,(void))

void Painter_obj::configureBackBuffer( ::openfl::geom::Rectangle viewPort,Float contentScaleFactor,int antiAlias,bool enableDepthAndStencil){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_247_configureBackBuffer)
HXLINE( 248)		if (!(this->_shareContext)) {
HXLINE( 250)			if (enableDepthAndStencil) {
HXLINE( 250)				enableDepthAndStencil = ::starling::utils::SystemUtil_obj::get_supportsDepthAndStencil();
            			}
            			else {
HXLINE( 250)				enableDepthAndStencil = false;
            			}
HXLINE( 255)			if ((::openfl::display3D::_Context3DProfile::Context3DProfile_Impl__obj::toString(this->_context->profile) == HX_("baselineConstrained",d1,73,c8,e8))) {
HXLINE( 256)				this->_context->configureBackBuffer((int)32,(int)32,antiAlias,enableDepthAndStencil,null(),null());
            			}
HXLINE( 261)			bool _hx_tmp;
HXDLIN( 261)			if (!(((viewPort->width * contentScaleFactor) > this->_context->maxBackBufferWidth))) {
HXLINE( 261)				_hx_tmp = ((viewPort->height * contentScaleFactor) > this->_context->maxBackBufferHeight);
            			}
            			else {
HXLINE( 261)				_hx_tmp = true;
            			}
HXDLIN( 261)			if (_hx_tmp) {
HXLINE( 264)				contentScaleFactor = ((Float)1.0);
            			}
HXLINE( 267)			this->_stage3D->set_x(viewPort->x);
HXLINE( 268)			this->_stage3D->set_y(viewPort->y);
HXLINE( 270)			 ::openfl::display3D::Context3D _hx_tmp1 = this->_context;
HXDLIN( 270)			int _hx_tmp2 = ::Std_obj::_hx_int(viewPort->width);
HXDLIN( 270)			int _hx_tmp3 = ::Std_obj::_hx_int(viewPort->height);
HXDLIN( 270)			_hx_tmp1->configureBackBuffer(_hx_tmp2,_hx_tmp3,antiAlias,enableDepthAndStencil,(contentScaleFactor != ((Float)1.0)),null());
            		}
HXLINE( 274)		this->_backBufferWidth = ::Std_obj::_hx_int(viewPort->width);
HXLINE( 275)		this->_backBufferHeight = ::Std_obj::_hx_int(viewPort->height);
HXLINE( 276)		this->_backBufferScaleFactor = contentScaleFactor;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Painter_obj,configureBackBuffer,(void))

void Painter_obj::registerProgram(::String name, ::starling::rendering::Program program){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_284_registerProgram)
HXLINE( 285)		this->deleteProgram(name);
HXLINE( 286)		this->get_programs()->set(name,program);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Painter_obj,registerProgram,(void))

void Painter_obj::deleteProgram(::String name){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_291_deleteProgram)
HXLINE( 292)		 ::starling::rendering::Program program = this->getProgram(name);
HXLINE( 293)		if (hx::IsNotNull( program )) {
HXLINE( 295)			program->dispose();
HXLINE( 296)			this->get_programs()->remove(name);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,deleteProgram,(void))

 ::starling::rendering::Program Painter_obj::getProgram(::String name){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_304_getProgram)
HXDLIN( 304)		return this->get_programs()->get(name).StaticCast<  ::starling::rendering::Program >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,getProgram,return )

bool Painter_obj::hasProgram(::String name){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_310_hasProgram)
HXDLIN( 310)		return this->get_programs()->exists(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,hasProgram,return )

void Painter_obj::pushState( ::starling::rendering::BatchToken token){
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_322_pushState)
HXLINE( 323)		this->_stateStackPos++;
HXLINE( 325)		int _hx_tmp = this->_stateStackLength;
HXDLIN( 325)		if ((_hx_tmp < (this->_stateStackPos + (int)1))) {
HXLINE( 325)			 ::openfl::_Vector::AbstractVector this1 = this->_stateStack;
HXDLIN( 325)			int index = this->_stateStackLength++;
HXDLIN( 325)			 ::starling::rendering::RenderState value =  ::starling::rendering::RenderState_obj::__alloc( HX_CTX );
HXDLIN( 325)			::openfl::_Vector::IVector_obj::set(this1->data,index,value);
            		}
HXLINE( 326)		if (hx::IsNotNull( token )) {
HXLINE( 326)			this->_batchProcessor->fillToken(token);
            		}
HXLINE( 328)		 ::starling::rendering::RenderState _hx_tmp1 = ( ( ::starling::rendering::RenderState)(::openfl::_Vector::IVector_obj::get(this->_stateStack->data,this->_stateStackPos)) );
HXDLIN( 328)		_hx_tmp1->copyFrom(this->_state);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,pushState,(void))

void Painter_obj::setStateTo( ::openfl::geom::Matrix transformationMatrix,hx::Null< Float >  __o_alphaFactor,::String __o_blendMode){
Float alphaFactor = __o_alphaFactor.Default(((Float)1.0));
::String blendMode = __o_blendMode.Default(HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40"));
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_340_setStateTo)
HXLINE( 341)		if (hx::IsNotNull( transformationMatrix )) {
HXLINE( 341)			::starling::utils::MatrixUtil_obj::prependMatrix(this->_state->_modelviewMatrix,transformationMatrix);
            		}
HXLINE( 342)		if ((alphaFactor != ((Float)1.0))) {
HXLINE( 342)			 ::starling::rendering::RenderState _hx_tmp = this->_state;
HXDLIN( 342)			_hx_tmp->_alpha = (_hx_tmp->_alpha * alphaFactor);
            		}
HXLINE( 343)		if ((blendMode != HX_("auto",6f,df,76,40))) {
HXLINE( 343)			this->_state->set_blendMode(blendMode);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Painter_obj,setStateTo,(void))

void Painter_obj::popState( ::starling::rendering::BatchToken token){
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_355_popState)
HXLINE( 356)		if ((this->_stateStackPos < (int)0)) {
HXLINE( 357)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot pop empty state stack",da,8c,f4,0e)));
            		}
HXLINE( 359)		 ::starling::rendering::RenderState _hx_tmp = this->_state;
HXDLIN( 359)		_hx_tmp->copyFrom(( ( ::starling::rendering::RenderState)(::openfl::_Vector::IVector_obj::get(this->_stateStack->data,this->_stateStackPos)) ));
HXLINE( 360)		this->_stateStackPos--;
HXLINE( 362)		if (hx::IsNotNull( token )) {
HXLINE( 362)			this->_batchProcessor->fillToken(token);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,popState,(void))

void Painter_obj::restoreState(){
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_368_restoreState)
HXLINE( 369)		if ((this->_stateStackPos < (int)0)) {
HXLINE( 370)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot restore from empty state stack",9f,56,09,35)));
            		}
HXLINE( 372)		 ::starling::rendering::RenderState _hx_tmp = this->_state;
HXDLIN( 372)		_hx_tmp->copyFrom(( ( ::starling::rendering::RenderState)(::openfl::_Vector::IVector_obj::get(this->_stateStack->data,this->_stateStackPos)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,restoreState,(void))

void Painter_obj::fillToken( ::starling::rendering::BatchToken token){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_379_fillToken)
HXDLIN( 379)		if (hx::IsNotNull( token )) {
HXDLIN( 379)			this->_batchProcessor->fillToken(token);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,fillToken,(void))

void Painter_obj::drawMask( ::starling::display::DisplayObject mask, ::starling::display::DisplayObject maskee){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_401_drawMask)
HXLINE( 402)		if (hx::IsNull( this->_context )) {
HXLINE( 402)			return;
            		}
HXLINE( 404)		this->finishMeshBatch();
HXLINE( 406)		if (this->isRectangularMask(mask,maskee,::starling::rendering::Painter_obj::sMatrix)) {
HXLINE( 408)			mask->getBounds(mask,::starling::rendering::Painter_obj::sClipRect);
HXLINE( 409)			::starling::utils::RectangleUtil_obj::getBounds(::starling::rendering::Painter_obj::sClipRect,::starling::rendering::Painter_obj::sMatrix,::starling::rendering::Painter_obj::sClipRect);
HXLINE( 410)			this->pushClipRect(::starling::rendering::Painter_obj::sClipRect);
            		}
            		else {
HXLINE( 418)			bool _hx_tmp;
HXDLIN( 418)			if (hx::IsNotNull( maskee )) {
HXLINE( 418)				_hx_tmp = maskee->get_maskInverted();
            			}
            			else {
HXLINE( 418)				_hx_tmp = false;
            			}
HXDLIN( 418)			if (_hx_tmp) {
HXLINE( 420)				this->_context->setStencilActions((int)2,(int)0,(int)5,(int)0,null());
HXLINE( 424)				this->renderMask(mask);
            			}
            			else {
HXLINE( 428)				this->_context->setStencilActions((int)2,(int)1,(int)5,(int)2,null());
HXLINE( 432)				this->renderMask(mask);
HXLINE( 433)				{
HXLINE( 433)					 ::starling::rendering::Painter _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 433)					int _g1 = _g->get_stencilReferenceValue();
HXDLIN( 433)					_g->set_stencilReferenceValue((_g1 + (int)1));
            				}
            			}
HXLINE( 436)			this->_context->setStencilActions((int)2,(int)1,null(),null(),null());
            		}
HXLINE( 440)		this->excludeFromCache(maskee);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Painter_obj,drawMask,(void))

void Painter_obj::eraseMask( ::starling::display::DisplayObject mask, ::starling::display::DisplayObject maskee){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_452_eraseMask)
HXLINE( 453)		if (hx::IsNull( this->_context )) {
HXLINE( 453)			return;
            		}
HXLINE( 455)		this->finishMeshBatch();
HXLINE( 457)		if (this->isRectangularMask(mask,maskee,::starling::rendering::Painter_obj::sMatrix)) {
HXLINE( 459)			this->popClipRect();
            		}
            		else {
HXLINE( 467)			bool _hx_tmp;
HXDLIN( 467)			if (hx::IsNotNull( maskee )) {
HXLINE( 467)				_hx_tmp = maskee->get_maskInverted();
            			}
            			else {
HXLINE( 467)				_hx_tmp = false;
            			}
HXDLIN( 467)			if (_hx_tmp) {
HXLINE( 469)				this->_context->setStencilActions((int)2,(int)0,(int)5,(int)2,null());
HXLINE( 473)				this->renderMask(mask);
            			}
            			else {
HXLINE( 477)				this->_context->setStencilActions((int)2,(int)1,(int)5,(int)0,null());
HXLINE( 481)				this->renderMask(mask);
HXLINE( 482)				{
HXLINE( 482)					 ::starling::rendering::Painter _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 482)					int _g1 = _g->get_stencilReferenceValue();
HXDLIN( 482)					_g->set_stencilReferenceValue((_g1 - (int)1));
            				}
            			}
HXLINE( 487)			this->_context->setStencilActions((int)2,(int)1,null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Painter_obj,eraseMask,(void))

void Painter_obj::renderMask( ::starling::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_493_renderMask)
HXLINE( 494)		 ::openfl::geom::Matrix matrix = null();
HXLINE( 495)		 ::openfl::geom::Matrix3D matrix3D = null();
HXLINE( 496)		bool wasCacheEnabled = this->get_cacheEnabled();
HXLINE( 498)		this->pushState(null());
HXLINE( 499)		this->set_cacheEnabled(false);
HXLINE( 500)		 ::starling::rendering::RenderState _hx_tmp = this->_state;
HXDLIN( 500)		_hx_tmp->set_depthTest(::openfl::display3D::_Context3DCompareMode::Context3DCompareMode_Impl__obj::toString((int)6));
HXLINE( 502)		if (hx::IsNotNull( mask->get_stage() )) {
HXLINE( 504)			this->_state->setModelviewMatricesToIdentity();
HXLINE( 506)			if (mask->get_is3D()) {
HXLINE( 506)				matrix3D = mask->getTransformationMatrix3D(null(),::starling::rendering::Painter_obj::sMatrix3D);
            			}
            			else {
HXLINE( 507)				matrix = mask->getTransformationMatrix(null(),::starling::rendering::Painter_obj::sMatrix);
            			}
            		}
            		else {
HXLINE( 511)			if (mask->get_is3D()) {
HXLINE( 511)				matrix3D = mask->get_transformationMatrix3D();
            			}
            			else {
HXLINE( 512)				matrix = mask->get_transformationMatrix();
            			}
            		}
HXLINE( 515)		if (hx::IsNotNull( matrix3D )) {
HXLINE( 515)			this->_state->transformModelviewMatrix3D(matrix3D);
            		}
            		else {
HXLINE( 516)			this->_state->transformModelviewMatrix(matrix);
            		}
HXLINE( 518)		mask->render(hx::ObjectPtr<OBJ_>(this));
HXLINE( 519)		this->finishMeshBatch();
HXLINE( 521)		this->set_cacheEnabled(wasCacheEnabled);
HXLINE( 522)		this->popState(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,renderMask,(void))

void Painter_obj::pushClipRect( ::openfl::geom::Rectangle clipRect){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_526_pushClipRect)
HXLINE( 527)		 ::openfl::_Vector::AbstractVector stack = this->_clipRectStack;
HXLINE( 528)		int stackLength = ::openfl::_Vector::IVector_obj::get_length(stack->data);
HXLINE( 529)		 ::openfl::geom::Rectangle intersection = ::starling::utils::Pool_obj::getRectangle(null(),null(),null(),null());
HXLINE( 531)		if ((stackLength != (int)0)) {
HXLINE( 532)			::starling::utils::RectangleUtil_obj::intersect(( ( ::openfl::geom::Rectangle)(::openfl::_Vector::IVector_obj::get(stack->data,(stackLength - (int)1))) ),clipRect,intersection);
            		}
            		else {
HXLINE( 534)			intersection->copyFrom(clipRect);
            		}
HXLINE( 536)		::openfl::_Vector::IVector_obj::set(stack->data,stackLength,intersection);
HXLINE( 537)		this->_state->set_clipRect(intersection);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,pushClipRect,(void))

void Painter_obj::popClipRect(){
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_541_popClipRect)
HXLINE( 542)		 ::openfl::_Vector::AbstractVector stack = this->_clipRectStack;
HXLINE( 543)		int stackLength = ::openfl::_Vector::IVector_obj::get_length(stack->data);
HXLINE( 545)		if ((stackLength == (int)0)) {
HXLINE( 546)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Trying to pop from empty clip rectangle stack",55,6b,11,3f),null()));
            		}
HXLINE( 548)		stackLength = (stackLength - (int)1);
HXLINE( 549)		::starling::utils::Pool_obj::putRectangle(( ( ::openfl::geom::Rectangle)(::openfl::_Vector::IVector_obj::pop(stack->data)) ));
HXLINE( 550)		 ::starling::rendering::RenderState _hx_tmp = this->_state;
HXDLIN( 550)		 ::openfl::geom::Rectangle _hx_tmp1;
HXDLIN( 550)		if ((stackLength != (int)0)) {
HXLINE( 550)			_hx_tmp1 = ( ( ::openfl::geom::Rectangle)(::openfl::_Vector::IVector_obj::get(stack->data,(stackLength - (int)1))) );
            		}
            		else {
HXLINE( 550)			_hx_tmp1 = null();
            		}
HXDLIN( 550)		_hx_tmp->set_clipRect(_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,popClipRect,(void))

bool Painter_obj::isRectangularMask( ::starling::display::DisplayObject mask, ::starling::display::DisplayObject maskee, ::openfl::geom::Matrix out){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_558_isRectangularMask)
HXLINE( 559)		 ::starling::display::Quad quad;
HXDLIN( 559)		if (::Std_obj::is(mask,hx::ClassOf< ::starling::display::Quad >())) {
HXLINE( 559)			quad = ( ( ::starling::display::Quad)(mask) );
            		}
            		else {
HXLINE( 559)			quad = null();
            		}
HXLINE( 560)		bool isInverted;
HXDLIN( 560)		if (hx::IsNotNull( maskee )) {
HXLINE( 560)			isInverted = maskee->get_maskInverted();
            		}
            		else {
HXLINE( 560)			isInverted = false;
            		}
HXLINE( 561)		bool is3D;
HXDLIN( 561)		if (!(mask->get_is3D())) {
HXLINE( 561)			bool is3D1;
HXDLIN( 561)			if (hx::IsNotNull( maskee )) {
HXLINE( 561)				is3D1 = maskee->get_is3D();
            			}
            			else {
HXLINE( 561)				is3D1 = false;
            			}
HXDLIN( 561)			if (is3D1) {
HXLINE( 561)				is3D = hx::IsNull( mask->get_stage() );
            			}
            			else {
HXLINE( 561)				is3D = false;
            			}
            		}
            		else {
HXLINE( 561)			is3D = true;
            		}
HXLINE( 563)		bool _hx_tmp;
HXDLIN( 563)		bool _hx_tmp1;
HXDLIN( 563)		bool _hx_tmp2;
HXDLIN( 563)		if (hx::IsNotNull( quad )) {
HXLINE( 563)			_hx_tmp2 = !(isInverted);
            		}
            		else {
HXLINE( 563)			_hx_tmp2 = false;
            		}
HXDLIN( 563)		if (_hx_tmp2) {
HXLINE( 563)			_hx_tmp1 = !(is3D);
            		}
            		else {
HXLINE( 563)			_hx_tmp1 = false;
            		}
HXDLIN( 563)		if (_hx_tmp1) {
HXLINE( 563)			_hx_tmp = hx::IsNull( quad->get_texture() );
            		}
            		else {
HXLINE( 563)			_hx_tmp = false;
            		}
HXDLIN( 563)		if (_hx_tmp) {
HXLINE( 565)			if (hx::IsNotNull( mask->get_stage() )) {
HXLINE( 565)				mask->getTransformationMatrix(null(),out);
            			}
            			else {
HXLINE( 568)				out->copyFrom(mask->get_transformationMatrix());
HXLINE( 569)				out->concat(this->_state->get_modelviewMatrix());
            			}
HXLINE( 572)			bool _hx_tmp3;
HXDLIN( 572)			if (::starling::utils::MathUtil_obj::isEquivalent(out->a,(int)0,null())) {
HXLINE( 572)				_hx_tmp3 = ::starling::utils::MathUtil_obj::isEquivalent(out->d,(int)0,null());
            			}
            			else {
HXLINE( 572)				_hx_tmp3 = false;
            			}
HXDLIN( 572)			if (!(_hx_tmp3)) {
HXLINE( 573)				if (::starling::utils::MathUtil_obj::isEquivalent(out->b,(int)0,null())) {
HXLINE( 573)					return ::starling::utils::MathUtil_obj::isEquivalent(out->c,(int)0,null());
            				}
            				else {
HXLINE( 573)					return false;
            				}
            			}
            			else {
HXLINE( 572)				return true;
            			}
            		}
HXLINE( 575)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Painter_obj,isRectangularMask,return )

void Painter_obj::batchMesh( ::starling::display::Mesh mesh, ::starling::utils::MeshSubset subset){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_590_batchMesh)
HXDLIN( 590)		this->_batchProcessor->addMesh(mesh,this->_state,subset,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(Painter_obj,batchMesh,(void))

void Painter_obj::finishMeshBatch(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_596_finishMeshBatch)
HXDLIN( 596)		this->_batchProcessor->finishBatch();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,finishMeshBatch,(void))

void Painter_obj::finishFrame(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_601_finishFrame)
HXLINE( 602)		int _hx_int = this->_frameID;
HXDLIN( 602)		Float a;
HXDLIN( 602)		if ((_hx_int < (int)0)) {
HXLINE( 602)			a = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 602)			a = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 602)		int int1 = (int)99;
HXDLIN( 602)		Float a1;
HXDLIN( 602)		if ((int1 < (int)0)) {
HXLINE( 602)			a1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE( 602)			a1 = (int1 + ((Float)0.0));
            		}
HXDLIN( 602)		if ((::Std_obj::_hx_int(hx::Mod(a,a1)) == (int)0)) {
HXLINE( 602)			this->_batchProcessorCurr->trim();
            		}
HXLINE( 603)		int int2 = this->_frameID;
HXDLIN( 603)		Float a2;
HXDLIN( 603)		if ((int2 < (int)0)) {
HXLINE( 603)			a2 = (((Float)4294967296.0) + int2);
            		}
            		else {
HXLINE( 603)			a2 = (int2 + ((Float)0.0));
            		}
HXDLIN( 603)		int int3 = (int)150;
HXDLIN( 603)		Float a3;
HXDLIN( 603)		if ((int3 < (int)0)) {
HXLINE( 603)			a3 = (((Float)4294967296.0) + int3);
            		}
            		else {
HXLINE( 603)			a3 = (int3 + ((Float)0.0));
            		}
HXDLIN( 603)		if ((::Std_obj::_hx_int(hx::Mod(a2,a3)) == (int)0)) {
HXLINE( 603)			this->_batchProcessorSpec->trim();
            		}
HXLINE( 605)		this->_batchProcessor->finishBatch();
HXLINE( 606)		this->_batchProcessor = this->_batchProcessorSpec;
HXLINE( 607)		this->processCacheExclusions();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,finishFrame,(void))

void Painter_obj::processCacheExclusions(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_611_processCacheExclusions)
HXLINE( 612)		int i;
HXDLIN( 612)		int length = ::openfl::_Vector::IVector_obj::get_length(this->_batchCacheExclusions->data);
HXLINE( 613)		{
HXLINE( 613)			int _g1 = (int)0;
HXDLIN( 613)			int _g = length;
HXDLIN( 613)			while((_g1 < _g)){
HXLINE( 613)				_g1 = (_g1 + (int)1);
HXDLIN( 613)				int i1 = (_g1 - (int)1);
HXDLIN( 613)				( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_batchCacheExclusions->data,i1)) )->excludeFromCache();
            			}
            		}
HXLINE( 614)		::openfl::_Vector::IVector_obj::set_length(this->_batchCacheExclusions->data,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,processCacheExclusions,(void))

void Painter_obj::setupContextDefaults(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_620_setupContextDefaults)
HXLINE( 621)		this->_actualBlendMode = null();
HXLINE( 622)		this->_actualCulling = null();
HXLINE( 623)		this->_actualDepthMask = false;
HXLINE( 624)		this->_actualDepthTest = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,setupContextDefaults,(void))

void Painter_obj::nextFrame(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_630_nextFrame)
HXLINE( 632)		this->_batchProcessor = this->swapBatchProcessors();
HXLINE( 633)		this->_batchProcessor->clear();
HXLINE( 634)		this->_batchProcessorSpec->clear();
HXLINE( 636)		this->setupContextDefaults();
HXLINE( 639)		this->set_stencilReferenceValue((int)127);
HXLINE( 640)		::openfl::_Vector::IVector_obj::set_length(this->_clipRectStack->data,(int)0);
HXLINE( 641)		this->_drawCount = (int)0;
HXLINE( 642)		this->_stateStackPos = (int)-1;
HXLINE( 643)		this->_state->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,nextFrame,(void))

 ::starling::rendering::BatchProcessor Painter_obj::swapBatchProcessors(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_647_swapBatchProcessors)
HXLINE( 648)		 ::starling::rendering::BatchProcessor tmp = this->_batchProcessorPrev;
HXLINE( 649)		this->_batchProcessorPrev = this->_batchProcessorCurr;
HXLINE( 650)		return (this->_batchProcessorCurr = tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,swapBatchProcessors,return )

void Painter_obj::drawFromCache( ::starling::rendering::BatchToken startToken, ::starling::rendering::BatchToken endToken){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_657_drawFromCache)
HXLINE( 658)		 ::starling::display::MeshBatch meshBatch;
HXLINE( 659)		 ::starling::utils::MeshSubset subset = ::starling::rendering::Painter_obj::sMeshSubset;
HXLINE( 661)		if (!(startToken->equals(endToken))) {
HXLINE( 663)			this->pushState(null());
HXLINE( 665)			{
HXLINE( 665)				int _g1 = startToken->batchID;
HXDLIN( 665)				int _g = (endToken->batchID + (int)1);
HXDLIN( 665)				while((_g1 < _g)){
HXLINE( 665)					_g1 = (_g1 + (int)1);
HXDLIN( 665)					int i = (_g1 - (int)1);
HXLINE( 667)					meshBatch = this->_batchProcessorPrev->getBatchAt(i);
HXLINE( 668)					subset->setTo(null(),null(),null(),null());
HXLINE( 670)					if ((i == startToken->batchID)) {
HXLINE( 672)						subset->vertexID = startToken->vertexID;
HXLINE( 673)						subset->indexID = startToken->indexID;
HXLINE( 674)						int _hx_tmp = meshBatch->get_numVertices();
HXDLIN( 674)						subset->numVertices = (_hx_tmp - subset->vertexID);
HXLINE( 675)						int _hx_tmp1 = meshBatch->get_numIndices();
HXDLIN( 675)						subset->numIndices = (_hx_tmp1 - subset->indexID);
            					}
HXLINE( 678)					if ((i == endToken->batchID)) {
HXLINE( 680)						subset->numVertices = (endToken->vertexID - subset->vertexID);
HXLINE( 681)						subset->numIndices = (endToken->indexID - subset->indexID);
            					}
HXLINE( 684)					if ((subset->numVertices != (int)0)) {
HXLINE( 686)						this->_state->set_alpha(((Float)1.0));
HXLINE( 687)						 ::starling::rendering::RenderState _hx_tmp2 = this->_state;
HXDLIN( 687)						_hx_tmp2->set_blendMode(meshBatch->get_blendMode());
HXLINE( 688)						this->_batchProcessor->addMesh(meshBatch,this->_state,subset,true);
            					}
            				}
            			}
HXLINE( 692)			this->popState(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Painter_obj,drawFromCache,(void))

void Painter_obj::excludeFromCache( ::starling::display::DisplayObject object){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_706_excludeFromCache)
HXDLIN( 706)		if (hx::IsNotNull( object )) {
HXDLIN( 706)			 ::openfl::_Vector::AbstractVector this1 = this->_batchCacheExclusions;
HXDLIN( 706)			int index = ::openfl::_Vector::IVector_obj::get_length(this->_batchCacheExclusions->data);
HXDLIN( 706)			::openfl::_Vector::IVector_obj::set(this1->data,index,object);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,excludeFromCache,(void))

void Painter_obj::drawBatch( ::starling::display::MeshBatch meshBatch){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_710_drawBatch)
HXLINE( 711)		this->pushState(null());
HXLINE( 713)		 ::starling::rendering::RenderState _hx_tmp = this->get_state();
HXDLIN( 713)		_hx_tmp->set_blendMode(meshBatch->get_blendMode());
HXLINE( 714)		this->get_state()->get_modelviewMatrix()->identity();
HXLINE( 715)		this->get_state()->set_alpha(((Float)1.0));
HXLINE( 717)		meshBatch->render(hx::ObjectPtr<OBJ_>(this));
HXLINE( 719)		this->popState(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,drawBatch,(void))

void Painter_obj::prepareToDraw(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_729_prepareToDraw)
HXLINE( 730)		this->applyBlendMode();
HXLINE( 731)		this->applyRenderTarget();
HXLINE( 732)		this->applyClipRect();
HXLINE( 733)		this->applyCulling();
HXLINE( 734)		this->applyDepthTest();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,prepareToDraw,(void))

void Painter_obj::clear(hx::Null< int >  __o_rgb,hx::Null< Float >  __o_alpha){
int rgb = __o_rgb.Default(0);
Float alpha = __o_alpha.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_740_clear)
HXLINE( 741)		this->applyRenderTarget();
HXLINE( 742)		this->set_stencilReferenceValue((int)127);
HXLINE( 743)		::starling::utils::RenderUtil_obj::clear(rgb,alpha,((Float)1.0),(int)127);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Painter_obj,clear,(void))

void Painter_obj::present(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_748_present)
HXLINE( 749)		this->_state->set_renderTarget(null());
HXLINE( 750)		this->_actualRenderTarget = null();
HXLINE( 751)		this->_context->present();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,present,(void))

void Painter_obj::applyBlendMode(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_755_applyBlendMode)
HXLINE( 756)		::String blendMode = this->_state->get_blendMode();
HXLINE( 758)		if ((blendMode != this->_actualBlendMode)) {
HXLINE( 760)			::starling::display::BlendMode_obj::get(this->_state->get_blendMode())->activate();
HXLINE( 761)			this->_actualBlendMode = blendMode;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,applyBlendMode,(void))

void Painter_obj::applyCulling(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_766_applyCulling)
HXLINE( 767)		::String culling = this->_state->get_culling();
HXLINE( 769)		if ((culling != this->_actualCulling)) {
HXLINE( 771)			 ::openfl::display3D::Context3D _hx_tmp = this->_context;
HXDLIN( 771)			_hx_tmp->setCulling(::openfl::display3D::_Context3DTriangleFace::Context3DTriangleFace_Impl__obj::fromString(culling));
HXLINE( 772)			this->_actualCulling = culling;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,applyCulling,(void))

void Painter_obj::applyDepthTest(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_777_applyDepthTest)
HXLINE( 778)		bool depthMask = this->_state->get_depthMask();
HXLINE( 779)		::String depthTest = this->_state->get_depthTest();
HXLINE( 781)		bool _hx_tmp;
HXDLIN( 781)		if ((depthMask == this->_actualDepthMask)) {
HXLINE( 781)			_hx_tmp = (depthTest != this->_actualDepthTest);
            		}
            		else {
HXLINE( 781)			_hx_tmp = true;
            		}
HXDLIN( 781)		if (_hx_tmp) {
HXLINE( 783)			 ::openfl::display3D::Context3D _hx_tmp1 = this->_context;
HXDLIN( 783)			_hx_tmp1->setDepthTest(depthMask,::openfl::display3D::_Context3DCompareMode::Context3DCompareMode_Impl__obj::fromString(depthTest));
HXLINE( 784)			this->_actualDepthMask = depthMask;
HXLINE( 785)			this->_actualDepthTest = depthTest;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,applyDepthTest,(void))

void Painter_obj::applyRenderTarget(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_790_applyRenderTarget)
HXLINE( 791)		 ::openfl::display3D::textures::TextureBase target = this->_state->get_renderTargetBase();
HXLINE( 792)		int options = this->_state->renderTargetOptions;
HXLINE( 794)		bool _hx_tmp;
HXDLIN( 794)		if (hx::IsEq( target,this->_actualRenderTarget )) {
HXLINE( 794)			_hx_tmp = (options != this->_actualRenderTargetOptions);
            		}
            		else {
HXLINE( 794)			_hx_tmp = true;
            		}
HXDLIN( 794)		if (_hx_tmp) {
HXLINE( 796)			if (hx::IsNotNull( target )) {
HXLINE( 798)				int antiAlias = this->_state->get_renderTargetAntiAlias();
HXLINE( 799)				bool depthAndStencil = this->_state->get_renderTargetSupportsDepthAndStencil();
HXLINE( 800)				this->_context->setRenderToTexture(target,depthAndStencil,antiAlias,null());
            			}
            			else {
HXLINE( 803)				this->_context->setRenderToBackBuffer();
            			}
HXLINE( 805)			 ::openfl::display3D::Context3D _hx_tmp1 = this->_context;
HXDLIN( 805)			_hx_tmp1->setStencilReferenceValue(this->get_stencilReferenceValue(),null(),null());
HXLINE( 806)			this->_actualRenderTargetOptions = options;
HXLINE( 807)			this->_actualRenderTarget = target;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,applyRenderTarget,(void))

void Painter_obj::applyClipRect(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_812_applyClipRect)
HXLINE( 813)		 ::openfl::geom::Rectangle clipRect = this->_state->get_clipRect();
HXLINE( 815)		if (hx::IsNotNull( clipRect )) {
HXLINE( 817)			int width;
HXDLIN( 817)			int height;
HXLINE( 818)			 ::openfl::geom::Matrix3D projMatrix = this->_state->get_projectionMatrix3D();
HXLINE( 819)			 ::starling::textures::Texture renderTarget = this->_state->get_renderTarget();
HXLINE( 821)			if (hx::IsNotNull( renderTarget )) {
HXLINE( 823)				width = ::Std_obj::_hx_int(renderTarget->get_root()->get_nativeWidth());
HXLINE( 824)				height = ::Std_obj::_hx_int(renderTarget->get_root()->get_nativeHeight());
            			}
            			else {
HXLINE( 828)				width = this->_backBufferWidth;
HXLINE( 829)				height = this->_backBufferHeight;
            			}
HXLINE( 833)			::starling::utils::MatrixUtil_obj::transformCoords3D(projMatrix,clipRect->x,clipRect->y,((Float)0.0),::starling::rendering::Painter_obj::sPoint3D);
HXLINE( 834)			::starling::rendering::Painter_obj::sPoint3D->project();
HXLINE( 835)			::starling::rendering::Painter_obj::sClipRect->x = (((::starling::rendering::Painter_obj::sPoint3D->x * ((Float)0.5)) + ((Float)0.5)) * width);
HXLINE( 836)			::starling::rendering::Painter_obj::sClipRect->y = ((((Float)0.5) - (::starling::rendering::Painter_obj::sPoint3D->y * ((Float)0.5))) * height);
HXLINE( 838)			Float _hx_tmp = clipRect->get_right();
HXDLIN( 838)			Float _hx_tmp1 = clipRect->get_bottom();
HXDLIN( 838)			::starling::utils::MatrixUtil_obj::transformCoords3D(projMatrix,_hx_tmp,_hx_tmp1,((Float)0.0),::starling::rendering::Painter_obj::sPoint3D);
HXLINE( 839)			::starling::rendering::Painter_obj::sPoint3D->project();
HXLINE( 840)			 ::openfl::geom::Rectangle _hx_tmp2 = ::starling::rendering::Painter_obj::sClipRect;
HXDLIN( 840)			_hx_tmp2->set_right((((::starling::rendering::Painter_obj::sPoint3D->x * ((Float)0.5)) + ((Float)0.5)) * width));
HXLINE( 841)			 ::openfl::geom::Rectangle _hx_tmp3 = ::starling::rendering::Painter_obj::sClipRect;
HXDLIN( 841)			_hx_tmp3->set_bottom(((((Float)0.5) - (::starling::rendering::Painter_obj::sPoint3D->y * ((Float)0.5))) * height));
HXLINE( 843)			::starling::rendering::Painter_obj::sBufferRect->setTo((int)0,(int)0,width,height);
HXLINE( 844)			::starling::utils::RectangleUtil_obj::intersect(::starling::rendering::Painter_obj::sClipRect,::starling::rendering::Painter_obj::sBufferRect,::starling::rendering::Painter_obj::sScissorRect);
HXLINE( 847)			bool _hx_tmp4;
HXDLIN( 847)			if (!((::starling::rendering::Painter_obj::sScissorRect->width < (int)1))) {
HXLINE( 847)				_hx_tmp4 = (::starling::rendering::Painter_obj::sScissorRect->height < (int)1);
            			}
            			else {
HXLINE( 847)				_hx_tmp4 = true;
            			}
HXDLIN( 847)			if (_hx_tmp4) {
HXLINE( 848)				::starling::rendering::Painter_obj::sScissorRect->setTo((int)0,(int)0,(int)1,(int)1);
            			}
HXLINE( 850)			this->_context->setScissorRectangle(::starling::rendering::Painter_obj::sScissorRect);
            		}
            		else {
HXLINE( 854)			this->_context->setScissorRectangle(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,applyClipRect,(void))

int Painter_obj::get_drawCount(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_862_get_drawCount)
HXDLIN( 862)		return this->_drawCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_drawCount,return )

int Painter_obj::set_drawCount(int value){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_863_set_drawCount)
HXDLIN( 863)		return (this->_drawCount = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,set_drawCount,return )

int Painter_obj::get_stencilReferenceValue(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_872_get_stencilReferenceValue)
HXLINE( 873)		 ::Dynamic key;
HXDLIN( 873)		if (hx::IsNotNull( this->_state->get_renderTarget() )) {
HXLINE( 873)			key = this->_state->get_renderTargetBase();
            		}
            		else {
HXLINE( 873)			key = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 874)		if (this->_stencilReferenceValues->exists(key)) {
HXLINE( 874)			return ( (int)(this->_stencilReferenceValues->get(key)) );
            		}
            		else {
HXLINE( 875)			return (int)127;
            		}
HXLINE( 874)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_stencilReferenceValue,return )

int Painter_obj::set_stencilReferenceValue(int value){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_879_set_stencilReferenceValue)
HXLINE( 880)		 ::Dynamic key;
HXDLIN( 880)		if (hx::IsNotNull( this->_state->get_renderTarget() )) {
HXLINE( 880)			key = this->_state->get_renderTargetBase();
            		}
            		else {
HXLINE( 880)			key = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 881)		this->_stencilReferenceValues->set(key,value);
HXLINE( 883)		if (this->get_contextValid()) {
HXLINE( 884)			this->_context->setStencilReferenceValue(value,null(),null());
            		}
HXLINE( 885)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,set_stencilReferenceValue,return )

bool Painter_obj::get_cacheEnabled(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_896_get_cacheEnabled)
HXDLIN( 896)		return hx::IsEq( this->_batchProcessor,this->_batchProcessorCurr );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_cacheEnabled,return )

bool Painter_obj::set_cacheEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_898_set_cacheEnabled)
HXLINE( 899)		if ((value != this->get_cacheEnabled())) {
HXLINE( 901)			this->finishMeshBatch();
HXLINE( 903)			if (value) {
HXLINE( 903)				this->_batchProcessor = this->_batchProcessorCurr;
            			}
            			else {
HXLINE( 904)				this->_batchProcessor = this->_batchProcessorSpec;
            			}
            		}
HXLINE( 906)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,set_cacheEnabled,return )

 ::starling::rendering::RenderState Painter_obj::get_state(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_918_get_state)
HXDLIN( 918)		return this->_state;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_state,return )

 ::openfl::display::Stage3D Painter_obj::get_stage3D(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_922_get_stage3D)
HXDLIN( 922)		return this->_stage3D;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_stage3D,return )

 ::openfl::display3D::Context3D Painter_obj::get_context(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_926_get_context)
HXDLIN( 926)		return this->_context;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_context,return )

int Painter_obj::set_frameID(int value){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_932_set_frameID)
HXDLIN( 932)		return (this->_frameID = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,set_frameID,return )

int Painter_obj::get_frameID(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_935_get_frameID)
HXDLIN( 935)		if (hx::IsEq( this->_batchProcessor,this->_batchProcessorCurr )) {
HXDLIN( 935)			return this->_frameID;
            		}
            		else {
HXDLIN( 935)			return (int)0;
            		}
HXDLIN( 935)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_frameID,return )

Float Painter_obj::get_pixelSize(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_940_get_pixelSize)
HXDLIN( 940)		return this->_pixelSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_pixelSize,return )

Float Painter_obj::set_pixelSize(Float value){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_941_set_pixelSize)
HXDLIN( 941)		return (this->_pixelSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,set_pixelSize,return )

bool Painter_obj::get_shareContext(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_946_get_shareContext)
HXDLIN( 946)		return this->_shareContext;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_shareContext,return )

bool Painter_obj::set_shareContext(bool value){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_947_set_shareContext)
HXDLIN( 947)		return (this->_shareContext = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,set_shareContext,return )

bool Painter_obj::get_enableErrorChecking(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_952_get_enableErrorChecking)
HXDLIN( 952)		return this->_enableErrorChecking;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_enableErrorChecking,return )

bool Painter_obj::set_enableErrorChecking(bool value){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_954_set_enableErrorChecking)
HXLINE( 955)		this->_enableErrorChecking = value;
HXLINE( 956)		if (hx::IsNotNull( this->_context )) {
HXLINE( 956)			this->_context->set_enableErrorChecking(value);
            		}
HXLINE( 957)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Painter_obj,set_enableErrorChecking,return )

int Painter_obj::get_backBufferWidth(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_966_get_backBufferWidth)
HXDLIN( 966)		return this->_backBufferWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_backBufferWidth,return )

int Painter_obj::get_backBufferHeight(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_974_get_backBufferHeight)
HXDLIN( 974)		return this->_backBufferHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_backBufferHeight,return )

Float Painter_obj::get_backBufferScaleFactor(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_980_get_backBufferScaleFactor)
HXDLIN( 980)		return this->_backBufferScaleFactor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_backBufferScaleFactor,return )

bool Painter_obj::get_contextValid(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_987_get_contextValid)
HXDLIN( 987)		if (hx::IsNotNull( this->_context )) {
HXLINE( 989)			::String driverInfo = this->_context->driverInfo;
HXLINE( 990)			bool _hx_tmp;
HXDLIN( 990)			if (hx::IsNotNull( driverInfo )) {
HXLINE( 990)				_hx_tmp = (driverInfo != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 990)				_hx_tmp = false;
            			}
HXDLIN( 990)			if (_hx_tmp) {
HXLINE( 990)				return (driverInfo != HX_("Disposed",05,c7,55,01));
            			}
            			else {
HXLINE( 990)				return false;
            			}
            		}
            		else {
HXLINE( 992)			return false;
            		}
HXLINE( 987)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_contextValid,return )

::String Painter_obj::get_profile(){
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_1000_get_profile)
HXDLIN(1000)		if (hx::IsNotNull( this->_context )) {
HXDLIN(1000)			return ::openfl::display3D::_Context3DProfile::Context3DProfile_Impl__obj::toString(this->_context->profile);
            		}
            		else {
HXLINE(1001)			return null();
            		}
HXLINE(1000)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_profile,return )

 ::haxe::ds::StringMap Painter_obj::get_sharedData(){
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_1010_get_sharedData)
HXLINE(1011)		::Dynamic this1 = ::starling::rendering::Painter_obj::sSharedData;
HXDLIN(1011)		 ::haxe::ds::StringMap data = ( ( ::haxe::ds::ObjectMap)(this1) )->get(this->get_stage3D()).StaticCast<  ::haxe::ds::StringMap >();
HXLINE(1012)		if (hx::IsNull( data )) {
HXLINE(1014)			data =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1015)			{
HXLINE(1015)				::Dynamic this2 = ::starling::rendering::Painter_obj::sSharedData;
HXDLIN(1015)				( ( ::haxe::ds::ObjectMap)(this2) )->set(this->get_stage3D(),data);
            			}
            		}
HXLINE(1017)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_sharedData,return )

 ::haxe::ds::StringMap Painter_obj::get_programs(){
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_1022_get_programs)
HXLINE(1023)		 ::haxe::ds::StringMap programs = ( ( ::haxe::ds::StringMap)(this->get_sharedData()->get(HX_("starling.rendering.Painter.Programs",3a,98,da,20))) );
HXLINE(1024)		if (hx::IsNull( programs )) {
HXLINE(1026)			programs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1027)			this->get_sharedData()->set(HX_("starling.rendering.Painter.Programs",3a,98,da,20),programs);
            		}
HXLINE(1029)		return programs;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Painter_obj,get_programs,return )

::String Painter_obj::PROGRAM_DATA_NAME;

int Painter_obj::DEFAULT_STENCIL_VALUE;

 ::haxe::ds::ObjectMap Painter_obj::sSharedData;

 ::openfl::geom::Matrix Painter_obj::sMatrix;

 ::openfl::geom::Vector3D Painter_obj::sPoint3D;

 ::openfl::geom::Matrix3D Painter_obj::sMatrix3D;

 ::openfl::geom::Rectangle Painter_obj::sClipRect;

 ::openfl::geom::Rectangle Painter_obj::sBufferRect;

 ::openfl::geom::Rectangle Painter_obj::sScissorRect;

 ::starling::utils::MeshSubset Painter_obj::sMeshSubset;


hx::ObjectPtr< Painter_obj > Painter_obj::__new( ::openfl::display::Stage3D stage3D) {
	hx::ObjectPtr< Painter_obj > __this = new Painter_obj();
	__this->__construct(stage3D);
	return __this;
}

hx::ObjectPtr< Painter_obj > Painter_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Stage3D stage3D) {
	Painter_obj *__this = (Painter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Painter_obj), true, "starling.rendering.Painter"));
	*(void **)__this = Painter_obj::_hx_vtable;
	__this->__construct(stage3D);
	return __this;
}

Painter_obj::Painter_obj()
{
}

void Painter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Painter);
	HX_MARK_MEMBER_NAME(_stage3D,"_stage3D");
	HX_MARK_MEMBER_NAME(_context,"_context");
	HX_MARK_MEMBER_NAME(_shareContext,"_shareContext");
	HX_MARK_MEMBER_NAME(_drawCount,"_drawCount");
	HX_MARK_MEMBER_NAME(_frameID,"_frameID");
	HX_MARK_MEMBER_NAME(_pixelSize,"_pixelSize");
	HX_MARK_MEMBER_NAME(_enableErrorChecking,"_enableErrorChecking");
	HX_MARK_MEMBER_NAME(_stencilReferenceValues,"_stencilReferenceValues");
	HX_MARK_MEMBER_NAME(_clipRectStack,"_clipRectStack");
	HX_MARK_MEMBER_NAME(_batchCacheExclusions,"_batchCacheExclusions");
	HX_MARK_MEMBER_NAME(_batchProcessor,"_batchProcessor");
	HX_MARK_MEMBER_NAME(_batchProcessorCurr,"_batchProcessorCurr");
	HX_MARK_MEMBER_NAME(_batchProcessorPrev,"_batchProcessorPrev");
	HX_MARK_MEMBER_NAME(_batchProcessorSpec,"_batchProcessorSpec");
	HX_MARK_MEMBER_NAME(_actualRenderTarget,"_actualRenderTarget");
	HX_MARK_MEMBER_NAME(_actualRenderTargetOptions,"_actualRenderTargetOptions");
	HX_MARK_MEMBER_NAME(_actualCulling,"_actualCulling");
	HX_MARK_MEMBER_NAME(_actualBlendMode,"_actualBlendMode");
	HX_MARK_MEMBER_NAME(_actualDepthMask,"_actualDepthMask");
	HX_MARK_MEMBER_NAME(_actualDepthTest,"_actualDepthTest");
	HX_MARK_MEMBER_NAME(_backBufferWidth,"_backBufferWidth");
	HX_MARK_MEMBER_NAME(_backBufferHeight,"_backBufferHeight");
	HX_MARK_MEMBER_NAME(_backBufferScaleFactor,"_backBufferScaleFactor");
	HX_MARK_MEMBER_NAME(_state,"_state");
	HX_MARK_MEMBER_NAME(_stateStack,"_stateStack");
	HX_MARK_MEMBER_NAME(_stateStackPos,"_stateStackPos");
	HX_MARK_MEMBER_NAME(_stateStackLength,"_stateStackLength");
	HX_MARK_END_CLASS();
}

void Painter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_stage3D,"_stage3D");
	HX_VISIT_MEMBER_NAME(_context,"_context");
	HX_VISIT_MEMBER_NAME(_shareContext,"_shareContext");
	HX_VISIT_MEMBER_NAME(_drawCount,"_drawCount");
	HX_VISIT_MEMBER_NAME(_frameID,"_frameID");
	HX_VISIT_MEMBER_NAME(_pixelSize,"_pixelSize");
	HX_VISIT_MEMBER_NAME(_enableErrorChecking,"_enableErrorChecking");
	HX_VISIT_MEMBER_NAME(_stencilReferenceValues,"_stencilReferenceValues");
	HX_VISIT_MEMBER_NAME(_clipRectStack,"_clipRectStack");
	HX_VISIT_MEMBER_NAME(_batchCacheExclusions,"_batchCacheExclusions");
	HX_VISIT_MEMBER_NAME(_batchProcessor,"_batchProcessor");
	HX_VISIT_MEMBER_NAME(_batchProcessorCurr,"_batchProcessorCurr");
	HX_VISIT_MEMBER_NAME(_batchProcessorPrev,"_batchProcessorPrev");
	HX_VISIT_MEMBER_NAME(_batchProcessorSpec,"_batchProcessorSpec");
	HX_VISIT_MEMBER_NAME(_actualRenderTarget,"_actualRenderTarget");
	HX_VISIT_MEMBER_NAME(_actualRenderTargetOptions,"_actualRenderTargetOptions");
	HX_VISIT_MEMBER_NAME(_actualCulling,"_actualCulling");
	HX_VISIT_MEMBER_NAME(_actualBlendMode,"_actualBlendMode");
	HX_VISIT_MEMBER_NAME(_actualDepthMask,"_actualDepthMask");
	HX_VISIT_MEMBER_NAME(_actualDepthTest,"_actualDepthTest");
	HX_VISIT_MEMBER_NAME(_backBufferWidth,"_backBufferWidth");
	HX_VISIT_MEMBER_NAME(_backBufferHeight,"_backBufferHeight");
	HX_VISIT_MEMBER_NAME(_backBufferScaleFactor,"_backBufferScaleFactor");
	HX_VISIT_MEMBER_NAME(_state,"_state");
	HX_VISIT_MEMBER_NAME(_stateStack,"_stateStack");
	HX_VISIT_MEMBER_NAME(_stateStackPos,"_stateStackPos");
	HX_VISIT_MEMBER_NAME(_stateStackLength,"_stateStackLength");
}

hx::Val Painter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"state") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_state() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_state") ) { return hx::Val( _state ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"present") ) { return hx::Val( present_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stage3D() ); }
		if (HX_FIELD_EQ(inName,"context") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_context() ); }
		if (HX_FIELD_EQ(inName,"frameID") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_frameID() ); }
		if (HX_FIELD_EQ(inName,"profile") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_profile() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_stage3D") ) { return hx::Val( _stage3D ); }
		if (HX_FIELD_EQ(inName,"_context") ) { return hx::Val( _context ); }
		if (HX_FIELD_EQ(inName,"_frameID") ) { return hx::Val( _frameID ); }
		if (HX_FIELD_EQ(inName,"popState") ) { return hx::Val( popState_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawMask") ) { return hx::Val( drawMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"programs") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_programs() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pushState") ) { return hx::Val( pushState_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillToken") ) { return hx::Val( fillToken_dyn() ); }
		if (HX_FIELD_EQ(inName,"eraseMask") ) { return hx::Val( eraseMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"batchMesh") ) { return hx::Val( batchMesh_dyn() ); }
		if (HX_FIELD_EQ(inName,"nextFrame") ) { return hx::Val( nextFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawBatch") ) { return hx::Val( drawBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawCount") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_drawCount() ); }
		if (HX_FIELD_EQ(inName,"get_state") ) { return hx::Val( get_state_dyn() ); }
		if (HX_FIELD_EQ(inName,"pixelSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pixelSize() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_drawCount") ) { return hx::Val( _drawCount ); }
		if (HX_FIELD_EQ(inName,"_pixelSize") ) { return hx::Val( _pixelSize ); }
		if (HX_FIELD_EQ(inName,"getProgram") ) { return hx::Val( getProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasProgram") ) { return hx::Val( hasProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"setStateTo") ) { return hx::Val( setStateTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderMask") ) { return hx::Val( renderMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"sharedData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_sharedData() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_stateStack") ) { return hx::Val( _stateStack ); }
		if (HX_FIELD_EQ(inName,"popClipRect") ) { return hx::Val( popClipRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishFrame") ) { return hx::Val( finishFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stage3D") ) { return hx::Val( get_stage3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_context") ) { return hx::Val( get_context_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frameID") ) { return hx::Val( set_frameID_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_frameID") ) { return hx::Val( get_frameID_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_profile") ) { return hx::Val( get_profile_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"restoreState") ) { return hx::Val( restoreState_dyn() ); }
		if (HX_FIELD_EQ(inName,"pushClipRect") ) { return hx::Val( pushClipRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyCulling") ) { return hx::Val( applyCulling_dyn() ); }
		if (HX_FIELD_EQ(inName,"cacheEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_cacheEnabled() ); }
		if (HX_FIELD_EQ(inName,"shareContext") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shareContext() ); }
		if (HX_FIELD_EQ(inName,"contextValid") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_contextValid() ); }
		if (HX_FIELD_EQ(inName,"get_programs") ) { return hx::Val( get_programs_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_shareContext") ) { return hx::Val( _shareContext ); }
		if (HX_FIELD_EQ(inName,"deleteProgram") ) { return hx::Val( deleteProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawFromCache") ) { return hx::Val( drawFromCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"prepareToDraw") ) { return hx::Val( prepareToDraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyClipRect") ) { return hx::Val( applyClipRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_drawCount") ) { return hx::Val( get_drawCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_drawCount") ) { return hx::Val( set_drawCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pixelSize") ) { return hx::Val( get_pixelSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pixelSize") ) { return hx::Val( set_pixelSize_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_clipRectStack") ) { return hx::Val( _clipRectStack ); }
		if (HX_FIELD_EQ(inName,"_actualCulling") ) { return hx::Val( _actualCulling ); }
		if (HX_FIELD_EQ(inName,"_stateStackPos") ) { return hx::Val( _stateStackPos ); }
		if (HX_FIELD_EQ(inName,"applyBlendMode") ) { return hx::Val( applyBlendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyDepthTest") ) { return hx::Val( applyDepthTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_sharedData") ) { return hx::Val( get_sharedData_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_batchProcessor") ) { return hx::Val( _batchProcessor ); }
		if (HX_FIELD_EQ(inName,"registerProgram") ) { return hx::Val( registerProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishMeshBatch") ) { return hx::Val( finishMeshBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_backBufferWidth() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_actualBlendMode") ) { return hx::Val( _actualBlendMode ); }
		if (HX_FIELD_EQ(inName,"_actualDepthMask") ) { return hx::Val( _actualDepthMask ); }
		if (HX_FIELD_EQ(inName,"_actualDepthTest") ) { return hx::Val( _actualDepthTest ); }
		if (HX_FIELD_EQ(inName,"_backBufferWidth") ) { return hx::Val( _backBufferWidth ); }
		if (HX_FIELD_EQ(inName,"requestContext3D") ) { return hx::Val( requestContext3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"onContextCreated") ) { return hx::Val( onContextCreated_dyn() ); }
		if (HX_FIELD_EQ(inName,"excludeFromCache") ) { return hx::Val( excludeFromCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_cacheEnabled") ) { return hx::Val( get_cacheEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cacheEnabled") ) { return hx::Val( set_cacheEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_shareContext") ) { return hx::Val( get_shareContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shareContext") ) { return hx::Val( set_shareContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_backBufferHeight() ); }
		if (HX_FIELD_EQ(inName,"get_contextValid") ) { return hx::Val( get_contextValid_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_backBufferHeight") ) { return hx::Val( _backBufferHeight ); }
		if (HX_FIELD_EQ(inName,"_stateStackLength") ) { return hx::Val( _stateStackLength ); }
		if (HX_FIELD_EQ(inName,"isRectangularMask") ) { return hx::Val( isRectangularMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyRenderTarget") ) { return hx::Val( applyRenderTarget_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_batchProcessorCurr") ) { return hx::Val( _batchProcessorCurr ); }
		if (HX_FIELD_EQ(inName,"_batchProcessorPrev") ) { return hx::Val( _batchProcessorPrev ); }
		if (HX_FIELD_EQ(inName,"_batchProcessorSpec") ) { return hx::Val( _batchProcessorSpec ); }
		if (HX_FIELD_EQ(inName,"_actualRenderTarget") ) { return hx::Val( _actualRenderTarget ); }
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { return hx::Val( configureBackBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapBatchProcessors") ) { return hx::Val( swapBatchProcessors_dyn() ); }
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_enableErrorChecking() ); }
		if (HX_FIELD_EQ(inName,"get_backBufferWidth") ) { return hx::Val( get_backBufferWidth_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_enableErrorChecking") ) { return hx::Val( _enableErrorChecking ); }
		if (HX_FIELD_EQ(inName,"setupContextDefaults") ) { return hx::Val( setupContextDefaults_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backBufferHeight") ) { return hx::Val( get_backBufferHeight_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_batchCacheExclusions") ) { return hx::Val( _batchCacheExclusions ); }
		if (HX_FIELD_EQ(inName,"stencilReferenceValue") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stencilReferenceValue() ); }
		if (HX_FIELD_EQ(inName,"backBufferScaleFactor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_backBufferScaleFactor() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_backBufferScaleFactor") ) { return hx::Val( _backBufferScaleFactor ); }
		if (HX_FIELD_EQ(inName,"processCacheExclusions") ) { return hx::Val( processCacheExclusions_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_stencilReferenceValues") ) { return hx::Val( _stencilReferenceValues ); }
		if (HX_FIELD_EQ(inName,"get_enableErrorChecking") ) { return hx::Val( get_enableErrorChecking_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_enableErrorChecking") ) { return hx::Val( set_enableErrorChecking_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"get_stencilReferenceValue") ) { return hx::Val( get_stencilReferenceValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_stencilReferenceValue") ) { return hx::Val( set_stencilReferenceValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backBufferScaleFactor") ) { return hx::Val( get_backBufferScaleFactor_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_actualRenderTargetOptions") ) { return hx::Val( _actualRenderTargetOptions ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Painter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sMatrix") ) { outValue = ( sMatrix ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sPoint3D") ) { outValue = ( sPoint3D ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sMatrix3D") ) { outValue = ( sMatrix3D ); return true; }
		if (HX_FIELD_EQ(inName,"sClipRect") ) { outValue = ( sClipRect ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sSharedData") ) { outValue = ( sSharedData ); return true; }
		if (HX_FIELD_EQ(inName,"sBufferRect") ) { outValue = ( sBufferRect ); return true; }
		if (HX_FIELD_EQ(inName,"sMeshSubset") ) { outValue = ( sMeshSubset ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sScissorRect") ) { outValue = ( sScissorRect ); return true; }
	}
	return false;
}

hx::Val Painter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_state") ) { _state=inValue.Cast<  ::starling::rendering::RenderState >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"frameID") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frameID(inValue.Cast< int >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_stage3D") ) { _stage3D=inValue.Cast<  ::openfl::display::Stage3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_context") ) { _context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_frameID") ) { _frameID=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawCount") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_drawCount(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"pixelSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pixelSize(inValue.Cast< Float >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_drawCount") ) { _drawCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pixelSize") ) { _pixelSize=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_stateStack") ) { _stateStack=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cacheEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheEnabled(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"shareContext") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shareContext(inValue.Cast< bool >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_shareContext") ) { _shareContext=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_clipRectStack") ) { _clipRectStack=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_actualCulling") ) { _actualCulling=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateStackPos") ) { _stateStackPos=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_batchProcessor") ) { _batchProcessor=inValue.Cast<  ::starling::rendering::BatchProcessor >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_actualBlendMode") ) { _actualBlendMode=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_actualDepthMask") ) { _actualDepthMask=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_actualDepthTest") ) { _actualDepthTest=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_backBufferWidth") ) { _backBufferWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_backBufferHeight") ) { _backBufferHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateStackLength") ) { _stateStackLength=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_batchProcessorCurr") ) { _batchProcessorCurr=inValue.Cast<  ::starling::rendering::BatchProcessor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_batchProcessorPrev") ) { _batchProcessorPrev=inValue.Cast<  ::starling::rendering::BatchProcessor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_batchProcessorSpec") ) { _batchProcessorSpec=inValue.Cast<  ::starling::rendering::BatchProcessor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_actualRenderTarget") ) { _actualRenderTarget=inValue.Cast<  ::openfl::display3D::textures::TextureBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enableErrorChecking(inValue.Cast< bool >()) ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_enableErrorChecking") ) { _enableErrorChecking=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_batchCacheExclusions") ) { _batchCacheExclusions=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stencilReferenceValue") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_stencilReferenceValue(inValue.Cast< int >()) ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_backBufferScaleFactor") ) { _backBufferScaleFactor=inValue.Cast< Float >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_stencilReferenceValues") ) { _stencilReferenceValues=inValue.Cast<  ::openfl::utils::_Dictionary::UtilsObjectMap >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_actualRenderTargetOptions") ) { _actualRenderTargetOptions=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Painter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sMatrix") ) { sMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sPoint3D") ) { sPoint3D=ioValue.Cast<  ::openfl::geom::Vector3D >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sMatrix3D") ) { sMatrix3D=ioValue.Cast<  ::openfl::geom::Matrix3D >(); return true; }
		if (HX_FIELD_EQ(inName,"sClipRect") ) { sClipRect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sSharedData") ) { sSharedData=ioValue.Cast<  ::haxe::ds::ObjectMap >(); return true; }
		if (HX_FIELD_EQ(inName,"sBufferRect") ) { sBufferRect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"sMeshSubset") ) { sMeshSubset=ioValue.Cast<  ::starling::utils::MeshSubset >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sScissorRect") ) { sScissorRect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
	}
	return false;
}

void Painter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_stage3D","\x70","\x9c","\x82","\x67"));
	outFields->push(HX_HCSTRING("_context","\x70","\xef","\x2f","\x53"));
	outFields->push(HX_HCSTRING("_shareContext","\xaf","\x55","\x30","\x09"));
	outFields->push(HX_HCSTRING("_drawCount","\xec","\xf5","\x10","\x6e"));
	outFields->push(HX_HCSTRING("_frameID","\xc9","\x36","\x2c","\x82"));
	outFields->push(HX_HCSTRING("_pixelSize","\x28","\xca","\x7f","\x61"));
	outFields->push(HX_HCSTRING("_enableErrorChecking","\x80","\x53","\x72","\xb9"));
	outFields->push(HX_HCSTRING("_stencilReferenceValues","\x10","\xcf","\x1a","\x61"));
	outFields->push(HX_HCSTRING("_clipRectStack","\xd5","\x6e","\xf9","\x9f"));
	outFields->push(HX_HCSTRING("_batchCacheExclusions","\x0c","\x5e","\x14","\x5c"));
	outFields->push(HX_HCSTRING("_batchProcessor","\xd7","\x36","\x8a","\x71"));
	outFields->push(HX_HCSTRING("_batchProcessorCurr","\x69","\x65","\xa6","\x99"));
	outFields->push(HX_HCSTRING("_batchProcessorPrev","\x6a","\xd9","\x3b","\xa2"));
	outFields->push(HX_HCSTRING("_batchProcessorSpec","\xb2","\xf8","\x35","\xa4"));
	outFields->push(HX_HCSTRING("_actualRenderTarget","\x14","\xaf","\x0b","\xc4"));
	outFields->push(HX_HCSTRING("_actualRenderTargetOptions","\xaa","\x76","\x98","\x44"));
	outFields->push(HX_HCSTRING("_actualCulling","\xc3","\x3d","\xb4","\x8f"));
	outFields->push(HX_HCSTRING("_actualBlendMode","\x67","\xfa","\xaf","\xf0"));
	outFields->push(HX_HCSTRING("_actualDepthMask","\xa2","\xb1","\x51","\x83"));
	outFields->push(HX_HCSTRING("_actualDepthTest","\x08","\x39","\xf5","\x87"));
	outFields->push(HX_HCSTRING("_backBufferWidth","\x80","\x3c","\x33","\x77"));
	outFields->push(HX_HCSTRING("_backBufferHeight","\x2d","\x2c","\xf1","\x8b"));
	outFields->push(HX_HCSTRING("_backBufferScaleFactor","\xf3","\xfc","\x44","\x06"));
	outFields->push(HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f"));
	outFields->push(HX_HCSTRING("_stateStack","\x96","\x90","\x7c","\xc6"));
	outFields->push(HX_HCSTRING("_stateStackPos","\x9e","\x86","\x20","\x01"));
	outFields->push(HX_HCSTRING("_stateStackLength","\x1c","\x2e","\x78","\x0f"));
	outFields->push(HX_HCSTRING("drawCount","\x2b","\x7a","\x6e","\x12"));
	outFields->push(HX_HCSTRING("stencilReferenceValue","\xc2","\x1a","\x35","\x60"));
	outFields->push(HX_HCSTRING("cacheEnabled","\x5f","\x3e","\x96","\x2c"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("stage3D","\xef","\x42","\xca","\x2d"));
	outFields->push(HX_HCSTRING("context","\xef","\x95","\x77","\x19"));
	outFields->push(HX_HCSTRING("frameID","\x48","\xdd","\x73","\x48"));
	outFields->push(HX_HCSTRING("pixelSize","\x67","\x4e","\xdd","\x05"));
	outFields->push(HX_HCSTRING("shareContext","\xd0","\xc2","\xc1","\x26"));
	outFields->push(HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"));
	outFields->push(HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"));
	outFields->push(HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"));
	outFields->push(HX_HCSTRING("backBufferScaleFactor","\xb2","\x63","\x37","\xad"));
	outFields->push(HX_HCSTRING("contextValid","\x8d","\x6c","\x1d","\xb8"));
	outFields->push(HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"));
	outFields->push(HX_HCSTRING("sharedData","\x6f","\x97","\x8c","\x67"));
	outFields->push(HX_HCSTRING("programs","\x6f","\xe9","\x27","\x86"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Painter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Stage3D*/ ,(int)offsetof(Painter_obj,_stage3D),HX_HCSTRING("_stage3D","\x70","\x9c","\x82","\x67")},
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(Painter_obj,_context),HX_HCSTRING("_context","\x70","\xef","\x2f","\x53")},
	{hx::fsBool,(int)offsetof(Painter_obj,_shareContext),HX_HCSTRING("_shareContext","\xaf","\x55","\x30","\x09")},
	{hx::fsInt,(int)offsetof(Painter_obj,_drawCount),HX_HCSTRING("_drawCount","\xec","\xf5","\x10","\x6e")},
	{hx::fsInt,(int)offsetof(Painter_obj,_frameID),HX_HCSTRING("_frameID","\xc9","\x36","\x2c","\x82")},
	{hx::fsFloat,(int)offsetof(Painter_obj,_pixelSize),HX_HCSTRING("_pixelSize","\x28","\xca","\x7f","\x61")},
	{hx::fsBool,(int)offsetof(Painter_obj,_enableErrorChecking),HX_HCSTRING("_enableErrorChecking","\x80","\x53","\x72","\xb9")},
	{hx::fsObject /*::openfl::utils::_Dictionary::UtilsObjectMap*/ ,(int)offsetof(Painter_obj,_stencilReferenceValues),HX_HCSTRING("_stencilReferenceValues","\x10","\xcf","\x1a","\x61")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Painter_obj,_clipRectStack),HX_HCSTRING("_clipRectStack","\xd5","\x6e","\xf9","\x9f")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Painter_obj,_batchCacheExclusions),HX_HCSTRING("_batchCacheExclusions","\x0c","\x5e","\x14","\x5c")},
	{hx::fsObject /*::starling::rendering::BatchProcessor*/ ,(int)offsetof(Painter_obj,_batchProcessor),HX_HCSTRING("_batchProcessor","\xd7","\x36","\x8a","\x71")},
	{hx::fsObject /*::starling::rendering::BatchProcessor*/ ,(int)offsetof(Painter_obj,_batchProcessorCurr),HX_HCSTRING("_batchProcessorCurr","\x69","\x65","\xa6","\x99")},
	{hx::fsObject /*::starling::rendering::BatchProcessor*/ ,(int)offsetof(Painter_obj,_batchProcessorPrev),HX_HCSTRING("_batchProcessorPrev","\x6a","\xd9","\x3b","\xa2")},
	{hx::fsObject /*::starling::rendering::BatchProcessor*/ ,(int)offsetof(Painter_obj,_batchProcessorSpec),HX_HCSTRING("_batchProcessorSpec","\xb2","\xf8","\x35","\xa4")},
	{hx::fsObject /*::openfl::display3D::textures::TextureBase*/ ,(int)offsetof(Painter_obj,_actualRenderTarget),HX_HCSTRING("_actualRenderTarget","\x14","\xaf","\x0b","\xc4")},
	{hx::fsInt,(int)offsetof(Painter_obj,_actualRenderTargetOptions),HX_HCSTRING("_actualRenderTargetOptions","\xaa","\x76","\x98","\x44")},
	{hx::fsString,(int)offsetof(Painter_obj,_actualCulling),HX_HCSTRING("_actualCulling","\xc3","\x3d","\xb4","\x8f")},
	{hx::fsString,(int)offsetof(Painter_obj,_actualBlendMode),HX_HCSTRING("_actualBlendMode","\x67","\xfa","\xaf","\xf0")},
	{hx::fsBool,(int)offsetof(Painter_obj,_actualDepthMask),HX_HCSTRING("_actualDepthMask","\xa2","\xb1","\x51","\x83")},
	{hx::fsString,(int)offsetof(Painter_obj,_actualDepthTest),HX_HCSTRING("_actualDepthTest","\x08","\x39","\xf5","\x87")},
	{hx::fsInt,(int)offsetof(Painter_obj,_backBufferWidth),HX_HCSTRING("_backBufferWidth","\x80","\x3c","\x33","\x77")},
	{hx::fsInt,(int)offsetof(Painter_obj,_backBufferHeight),HX_HCSTRING("_backBufferHeight","\x2d","\x2c","\xf1","\x8b")},
	{hx::fsFloat,(int)offsetof(Painter_obj,_backBufferScaleFactor),HX_HCSTRING("_backBufferScaleFactor","\xf3","\xfc","\x44","\x06")},
	{hx::fsObject /*::starling::rendering::RenderState*/ ,(int)offsetof(Painter_obj,_state),HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Painter_obj,_stateStack),HX_HCSTRING("_stateStack","\x96","\x90","\x7c","\xc6")},
	{hx::fsInt,(int)offsetof(Painter_obj,_stateStackPos),HX_HCSTRING("_stateStackPos","\x9e","\x86","\x20","\x01")},
	{hx::fsInt,(int)offsetof(Painter_obj,_stateStackLength),HX_HCSTRING("_stateStackLength","\x1c","\x2e","\x78","\x0f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Painter_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Painter_obj::PROGRAM_DATA_NAME,HX_HCSTRING("PROGRAM_DATA_NAME","\xe5","\x9e","\x20","\xf0")},
	{hx::fsInt,(void *) &Painter_obj::DEFAULT_STENCIL_VALUE,HX_HCSTRING("DEFAULT_STENCIL_VALUE","\x10","\x72","\x18","\xa1")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(void *) &Painter_obj::sSharedData,HX_HCSTRING("sSharedData","\xc2","\xc9","\x27","\x42")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &Painter_obj::sMatrix,HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e")},
	{hx::fsObject /*::openfl::geom::Vector3D*/ ,(void *) &Painter_obj::sPoint3D,HX_HCSTRING("sPoint3D","\xce","\x00","\x1c","\xd0")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(void *) &Painter_obj::sMatrix3D,HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Painter_obj::sClipRect,HX_HCSTRING("sClipRect","\xa7","\x77","\x8e","\xf4")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Painter_obj::sBufferRect,HX_HCSTRING("sBufferRect","\x97","\xe8","\x52","\x77")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Painter_obj::sScissorRect,HX_HCSTRING("sScissorRect","\xad","\xb5","\x84","\xce")},
	{hx::fsObject /*::starling::utils::MeshSubset*/ ,(void *) &Painter_obj::sMeshSubset,HX_HCSTRING("sMeshSubset","\x42","\x82","\x8f","\x58")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Painter_obj_sMemberFields[] = {
	HX_HCSTRING("_stage3D","\x70","\x9c","\x82","\x67"),
	HX_HCSTRING("_context","\x70","\xef","\x2f","\x53"),
	HX_HCSTRING("_shareContext","\xaf","\x55","\x30","\x09"),
	HX_HCSTRING("_drawCount","\xec","\xf5","\x10","\x6e"),
	HX_HCSTRING("_frameID","\xc9","\x36","\x2c","\x82"),
	HX_HCSTRING("_pixelSize","\x28","\xca","\x7f","\x61"),
	HX_HCSTRING("_enableErrorChecking","\x80","\x53","\x72","\xb9"),
	HX_HCSTRING("_stencilReferenceValues","\x10","\xcf","\x1a","\x61"),
	HX_HCSTRING("_clipRectStack","\xd5","\x6e","\xf9","\x9f"),
	HX_HCSTRING("_batchCacheExclusions","\x0c","\x5e","\x14","\x5c"),
	HX_HCSTRING("_batchProcessor","\xd7","\x36","\x8a","\x71"),
	HX_HCSTRING("_batchProcessorCurr","\x69","\x65","\xa6","\x99"),
	HX_HCSTRING("_batchProcessorPrev","\x6a","\xd9","\x3b","\xa2"),
	HX_HCSTRING("_batchProcessorSpec","\xb2","\xf8","\x35","\xa4"),
	HX_HCSTRING("_actualRenderTarget","\x14","\xaf","\x0b","\xc4"),
	HX_HCSTRING("_actualRenderTargetOptions","\xaa","\x76","\x98","\x44"),
	HX_HCSTRING("_actualCulling","\xc3","\x3d","\xb4","\x8f"),
	HX_HCSTRING("_actualBlendMode","\x67","\xfa","\xaf","\xf0"),
	HX_HCSTRING("_actualDepthMask","\xa2","\xb1","\x51","\x83"),
	HX_HCSTRING("_actualDepthTest","\x08","\x39","\xf5","\x87"),
	HX_HCSTRING("_backBufferWidth","\x80","\x3c","\x33","\x77"),
	HX_HCSTRING("_backBufferHeight","\x2d","\x2c","\xf1","\x8b"),
	HX_HCSTRING("_backBufferScaleFactor","\xf3","\xfc","\x44","\x06"),
	HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f"),
	HX_HCSTRING("_stateStack","\x96","\x90","\x7c","\xc6"),
	HX_HCSTRING("_stateStackPos","\x9e","\x86","\x20","\x01"),
	HX_HCSTRING("_stateStackLength","\x1c","\x2e","\x78","\x0f"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("requestContext3D","\x11","\x7b","\x31","\xf9"),
	HX_HCSTRING("onContextCreated","\x38","\x81","\xff","\xc0"),
	HX_HCSTRING("configureBackBuffer","\x0d","\x3c","\x11","\x04"),
	HX_HCSTRING("registerProgram","\x61","\xae","\x0d","\xa7"),
	HX_HCSTRING("deleteProgram","\x99","\xdd","\x82","\x52"),
	HX_HCSTRING("getProgram","\x8e","\xd0","\x5a","\x43"),
	HX_HCSTRING("hasProgram","\x4a","\x32","\xad","\x7e"),
	HX_HCSTRING("pushState","\xd7","\xdd","\x26","\xc8"),
	HX_HCSTRING("setStateTo","\x6a","\x4a","\x41","\x89"),
	HX_HCSTRING("popState","\xc0","\xba","\x11","\xed"),
	HX_HCSTRING("restoreState","\xe3","\x43","\x89","\xe0"),
	HX_HCSTRING("fillToken","\x76","\xa9","\xd2","\xe2"),
	HX_HCSTRING("drawMask","\x10","\xeb","\xbf","\x5c"),
	HX_HCSTRING("eraseMask","\xf2","\xc0","\x09","\xc9"),
	HX_HCSTRING("renderMask","\x62","\x3b","\x60","\xe5"),
	HX_HCSTRING("pushClipRect","\x0e","\xc8","\x09","\xef"),
	HX_HCSTRING("popClipRect","\xc5","\x22","\x53","\x3d"),
	HX_HCSTRING("isRectangularMask","\x80","\x15","\xcc","\x1d"),
	HX_HCSTRING("batchMesh","\xc7","\xc2","\x74","\xee"),
	HX_HCSTRING("finishMeshBatch","\xba","\x6f","\x6b","\xaf"),
	HX_HCSTRING("finishFrame","\xda","\x9a","\x88","\x2d"),
	HX_HCSTRING("processCacheExclusions","\x18","\xed","\xb7","\xd5"),
	HX_HCSTRING("setupContextDefaults","\xa4","\x57","\xf5","\x94"),
	HX_HCSTRING("nextFrame","\x3a","\x92","\xc8","\xad"),
	HX_HCSTRING("swapBatchProcessors","\xe8","\x3d","\xdb","\xf1"),
	HX_HCSTRING("drawFromCache","\xd4","\x97","\xc4","\x54"),
	HX_HCSTRING("excludeFromCache","\x3e","\xfa","\x5f","\xfa"),
	HX_HCSTRING("drawBatch","\x16","\x1d","\xc6","\x75"),
	HX_HCSTRING("prepareToDraw","\x06","\xfc","\x6f","\x3e"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"),
	HX_HCSTRING("applyBlendMode","\x06","\x21","\xb6","\xfa"),
	HX_HCSTRING("applyCulling","\xa2","\x2e","\xf5","\x92"),
	HX_HCSTRING("applyDepthTest","\xa7","\x5f","\xfb","\x91"),
	HX_HCSTRING("applyRenderTarget","\xd5","\x35","\xfa","\xc8"),
	HX_HCSTRING("applyClipRect","\xa2","\xef","\x9f","\x98"),
	HX_HCSTRING("get_drawCount","\x02","\x4e","\xd2","\xd3"),
	HX_HCSTRING("set_drawCount","\x0e","\x30","\xd8","\x18"),
	HX_HCSTRING("get_stencilReferenceValue","\x19","\xd5","\x32","\x66"),
	HX_HCSTRING("set_stencilReferenceValue","\x25","\x99","\x89","\xd2"),
	HX_HCSTRING("get_cacheEnabled","\xe8","\x2a","\x35","\x31"),
	HX_HCSTRING("set_cacheEnabled","\x5c","\x18","\x77","\x87"),
	HX_HCSTRING("get_state","\x68","\xd2","\xb4","\xc7"),
	HX_HCSTRING("get_stage3D","\x06","\xa3","\xc4","\xb3"),
	HX_HCSTRING("get_context","\x06","\xf6","\x71","\x9f"),
	HX_HCSTRING("set_frameID","\x6b","\x44","\xdb","\xd8"),
	HX_HCSTRING("get_frameID","\x5f","\x3d","\x6e","\xce"),
	HX_HCSTRING("get_pixelSize","\x3e","\x22","\x41","\xc7"),
	HX_HCSTRING("set_pixelSize","\x4a","\x04","\x47","\x0c"),
	HX_HCSTRING("get_shareContext","\x59","\xaf","\x60","\x2b"),
	HX_HCSTRING("set_shareContext","\xcd","\x9c","\xa2","\x81"),
	HX_HCSTRING("get_enableErrorChecking","\x16","\xe3","\x6e","\xc2"),
	HX_HCSTRING("set_enableErrorChecking","\x22","\x4c","\xd0","\xc4"),
	HX_HCSTRING("get_backBufferWidth","\x16","\xc9","\x5e","\x17"),
	HX_HCSTRING("get_backBufferHeight","\xd7","\xa2","\xe0","\x11"),
	HX_HCSTRING("get_backBufferScaleFactor","\x09","\x1e","\x35","\xb3"),
	HX_HCSTRING("get_contextValid","\x16","\x59","\xbc","\xbc"),
	HX_HCSTRING("get_profile","\x40","\xa9","\x43","\x79"),
	HX_HCSTRING("get_sharedData","\xb8","\x1f","\x82","\xdd"),
	HX_HCSTRING("get_programs","\x78","\x9d","\x41","\x3b"),
	::String(null()) };

static void Painter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Painter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Painter_obj::PROGRAM_DATA_NAME,"PROGRAM_DATA_NAME");
	HX_MARK_MEMBER_NAME(Painter_obj::DEFAULT_STENCIL_VALUE,"DEFAULT_STENCIL_VALUE");
	HX_MARK_MEMBER_NAME(Painter_obj::sSharedData,"sSharedData");
	HX_MARK_MEMBER_NAME(Painter_obj::sMatrix,"sMatrix");
	HX_MARK_MEMBER_NAME(Painter_obj::sPoint3D,"sPoint3D");
	HX_MARK_MEMBER_NAME(Painter_obj::sMatrix3D,"sMatrix3D");
	HX_MARK_MEMBER_NAME(Painter_obj::sClipRect,"sClipRect");
	HX_MARK_MEMBER_NAME(Painter_obj::sBufferRect,"sBufferRect");
	HX_MARK_MEMBER_NAME(Painter_obj::sScissorRect,"sScissorRect");
	HX_MARK_MEMBER_NAME(Painter_obj::sMeshSubset,"sMeshSubset");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Painter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Painter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Painter_obj::PROGRAM_DATA_NAME,"PROGRAM_DATA_NAME");
	HX_VISIT_MEMBER_NAME(Painter_obj::DEFAULT_STENCIL_VALUE,"DEFAULT_STENCIL_VALUE");
	HX_VISIT_MEMBER_NAME(Painter_obj::sSharedData,"sSharedData");
	HX_VISIT_MEMBER_NAME(Painter_obj::sMatrix,"sMatrix");
	HX_VISIT_MEMBER_NAME(Painter_obj::sPoint3D,"sPoint3D");
	HX_VISIT_MEMBER_NAME(Painter_obj::sMatrix3D,"sMatrix3D");
	HX_VISIT_MEMBER_NAME(Painter_obj::sClipRect,"sClipRect");
	HX_VISIT_MEMBER_NAME(Painter_obj::sBufferRect,"sBufferRect");
	HX_VISIT_MEMBER_NAME(Painter_obj::sScissorRect,"sScissorRect");
	HX_VISIT_MEMBER_NAME(Painter_obj::sMeshSubset,"sMeshSubset");
};

#endif

hx::Class Painter_obj::__mClass;

static ::String Painter_obj_sStaticFields[] = {
	HX_HCSTRING("PROGRAM_DATA_NAME","\xe5","\x9e","\x20","\xf0"),
	HX_HCSTRING("DEFAULT_STENCIL_VALUE","\x10","\x72","\x18","\xa1"),
	HX_HCSTRING("sSharedData","\xc2","\xc9","\x27","\x42"),
	HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e"),
	HX_HCSTRING("sPoint3D","\xce","\x00","\x1c","\xd0"),
	HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03"),
	HX_HCSTRING("sClipRect","\xa7","\x77","\x8e","\xf4"),
	HX_HCSTRING("sBufferRect","\x97","\xe8","\x52","\x77"),
	HX_HCSTRING("sScissorRect","\xad","\xb5","\x84","\xce"),
	HX_HCSTRING("sMeshSubset","\x42","\x82","\x8f","\x58"),
	::String(null())
};

void Painter_obj::__register()
{
	hx::Object *dummy = new Painter_obj;
	Painter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.rendering.Painter","\x23","\x6f","\x88","\x49");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Painter_obj::__GetStatic;
	__mClass->mSetStaticField = &Painter_obj::__SetStatic;
	__mClass->mMarkFunc = Painter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Painter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Painter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Painter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Painter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Painter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Painter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Painter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_78_boot)
HXDLIN(  78)		PROGRAM_DATA_NAME = HX_("starling.rendering.Painter.Programs",3a,98,da,20);
            	}
{
            	HX_STACKFRAME(&_hx_pos_04b80e41a22e953e_82_boot)
HXDLIN(  82)		DEFAULT_STENCIL_VALUE = (int)127;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_119_boot)
HXDLIN( 119)		sSharedData =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_122_boot)
HXDLIN( 122)		sMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_123_boot)
HXDLIN( 123)		sPoint3D =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_124_boot)
HXDLIN( 124)		sMatrix3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_125_boot)
HXDLIN( 125)		sClipRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_126_boot)
HXDLIN( 126)		sBufferRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_127_boot)
HXDLIN( 127)		sScissorRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_04b80e41a22e953e_128_boot)
HXDLIN( 128)		sMeshSubset =  ::starling::utils::MeshSubset_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace starling
} // end namespace rendering
