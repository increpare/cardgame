// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_utils__Dictionary_Dictionary_Impl_
#include <openfl/utils/_Dictionary/Dictionary_Impl_.h>
#endif
#ifndef INCLUDED_openfl_utils__Dictionary_UtilsObjectMap
#include <openfl/utils/_Dictionary/UtilsObjectMap.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_MeshBatch
#include <starling/display/MeshBatch.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchPool
#include <starling/rendering/BatchPool.h>
#endif
#ifndef INCLUDED_starling_styles_MeshStyle
#include <starling/styles/MeshStyle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ec3fb8fd74247e9c_188_new,"starling.rendering.BatchPool","new",0xb1b42b40,"starling.rendering.BatchPool.new","starling/rendering/BatchProcessor.hx",188,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_ec3fb8fd74247e9c_193_purge,"starling.rendering.BatchPool","purge",0xd8e29d0b,"starling.rendering.BatchPool.purge","starling/rendering/BatchProcessor.hx",193,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_ec3fb8fd74247e9c_208_get,"starling.rendering.BatchPool","get",0xb1aedb76,"starling.rendering.BatchPool.get","starling/rendering/BatchProcessor.hx",208,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_ec3fb8fd74247e9c_221_put,"starling.rendering.BatchPool","put",0xb1b5bdaf,"starling.rendering.BatchPool.put","starling/rendering/BatchProcessor.hx",221,0x536ffb9c)
namespace starling{
namespace rendering{

void BatchPool_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ec3fb8fd74247e9c_188_new)
HXDLIN( 188)		this->_batchLists = ::openfl::utils::_Dictionary::Dictionary_Impl__obj::toUtilsObjectMap(null(),null());
            	}

Dynamic BatchPool_obj::__CreateEmpty() { return new BatchPool_obj; }

void *BatchPool_obj::_hx_vtable = 0;

Dynamic BatchPool_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BatchPool_obj > _hx_result = new BatchPool_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BatchPool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x225783f6;
}

void BatchPool_obj::purge(){
            	HX_STACKFRAME(&_hx_pos_ec3fb8fd74247e9c_193_purge)
HXDLIN( 193)		 ::Dynamic batchList = this->_batchLists->iterator();
HXDLIN( 193)		while(( (bool)(batchList->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 193)			 ::openfl::_Vector::AbstractVector batchList1 = ( ( ::openfl::_Vector::AbstractVector)(batchList->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 195)			if (hx::IsNotNull( batchList1 )) {
HXLINE( 197)				{
HXLINE( 197)					int _g1 = (int)0;
HXDLIN( 197)					int _g = ::openfl::_Vector::IVector_obj::get_length(batchList1->data);
HXDLIN( 197)					while((_g1 < _g)){
HXLINE( 197)						_g1 = (_g1 + (int)1);
HXDLIN( 197)						int i = (_g1 - (int)1);
HXLINE( 199)						if (hx::IsNotNull( ( ( ::starling::display::MeshBatch)(::openfl::_Vector::IVector_obj::get(batchList1->data,i)) ) )) {
HXLINE( 200)							( ( ::starling::display::MeshBatch)(::openfl::_Vector::IVector_obj::get(batchList1->data,i)) )->dispose();
            						}
            					}
            				}
HXLINE( 202)				::openfl::_Vector::IVector_obj::set_length(batchList1->data,(int)0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchPool_obj,purge,(void))

 ::starling::display::MeshBatch BatchPool_obj::get(hx::Class styleType){
            	HX_GC_STACKFRAME(&_hx_pos_ec3fb8fd74247e9c_208_get)
HXLINE( 209)		 ::openfl::_Vector::AbstractVector batchList = this->_batchLists->get(styleType).StaticCast<  ::openfl::_Vector::AbstractVector >();
HXLINE( 210)		if (hx::IsNull( batchList )) {
HXLINE( 212)			int length = null();
HXDLIN( 212)			bool fixed = null();
HXDLIN( 212)			batchList =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE( 213)			this->_batchLists->set(styleType,batchList);
            		}
HXLINE( 216)		if ((::openfl::_Vector::IVector_obj::get_length(batchList->data) > (int)0)) {
HXLINE( 216)			return ( ( ::starling::display::MeshBatch)(::openfl::_Vector::IVector_obj::pop(batchList->data)) );
            		}
            		else {
HXLINE( 217)			return  ::starling::display::MeshBatch_obj::__alloc( HX_CTX );
            		}
HXLINE( 216)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BatchPool_obj,get,return )

void BatchPool_obj::put( ::starling::display::MeshBatch meshBatch){
            	HX_GC_STACKFRAME(&_hx_pos_ec3fb8fd74247e9c_221_put)
HXLINE( 222)		hx::Class styleType = meshBatch->get_style()->get_type();
HXLINE( 223)		 ::openfl::_Vector::AbstractVector batchList = this->_batchLists->get(styleType).StaticCast<  ::openfl::_Vector::AbstractVector >();
HXLINE( 224)		if (hx::IsNull( batchList )) {
HXLINE( 226)			int length = null();
HXDLIN( 226)			bool fixed = null();
HXDLIN( 226)			batchList =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE( 227)			this->_batchLists->set(styleType,batchList);
            		}
HXLINE( 230)		meshBatch->clear();
HXLINE( 231)		{
HXLINE( 231)			int index = ::openfl::_Vector::IVector_obj::get_length(batchList->data);
HXDLIN( 231)			::openfl::_Vector::IVector_obj::set(batchList->data,index,meshBatch);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BatchPool_obj,put,(void))


hx::ObjectPtr< BatchPool_obj > BatchPool_obj::__new() {
	hx::ObjectPtr< BatchPool_obj > __this = new BatchPool_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BatchPool_obj > BatchPool_obj::__alloc(hx::Ctx *_hx_ctx) {
	BatchPool_obj *__this = (BatchPool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BatchPool_obj), true, "starling.rendering.BatchPool"));
	*(void **)__this = BatchPool_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BatchPool_obj::BatchPool_obj()
{
}

void BatchPool_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BatchPool);
	HX_MARK_MEMBER_NAME(_batchLists,"_batchLists");
	HX_MARK_END_CLASS();
}

void BatchPool_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_batchLists,"_batchLists");
}

hx::Val BatchPool_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"put") ) { return hx::Val( put_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"purge") ) { return hx::Val( purge_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_batchLists") ) { return hx::Val( _batchLists ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BatchPool_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"_batchLists") ) { _batchLists=inValue.Cast<  ::openfl::utils::_Dictionary::UtilsObjectMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BatchPool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_batchLists","\x5a","\xc9","\x7d","\xf9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BatchPool_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::utils::_Dictionary::UtilsObjectMap*/ ,(int)offsetof(BatchPool_obj,_batchLists),HX_HCSTRING("_batchLists","\x5a","\xc9","\x7d","\xf9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BatchPool_obj_sStaticStorageInfo = 0;
#endif

static ::String BatchPool_obj_sMemberFields[] = {
	HX_HCSTRING("_batchLists","\x5a","\xc9","\x7d","\xf9"),
	HX_HCSTRING("purge","\x2b","\xca","\x8d","\xca"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("put","\xcf","\x62","\x55","\x00"),
	::String(null()) };

static void BatchPool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BatchPool_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BatchPool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BatchPool_obj::__mClass,"__mClass");
};

#endif

hx::Class BatchPool_obj::__mClass;

void BatchPool_obj::__register()
{
	hx::Object *dummy = new BatchPool_obj;
	BatchPool_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.rendering.BatchPool","\x4e","\xcb","\x75","\xf3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BatchPool_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BatchPool_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BatchPool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BatchPool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BatchPool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BatchPool_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace rendering
