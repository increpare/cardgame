// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DBufferUsage_Context3DBufferUsage_Impl_
#include <openfl/display3D/_Context3DBufferUsage/Context3DBufferUsage_Impl_.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_errors_MissingContextError
#include <starling/errors/MissingContextError.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexData
#include <starling/rendering/VertexData.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexDataAttribute
#include <starling/rendering/VertexDataAttribute.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexDataFormat
#include <starling/rendering/VertexDataFormat.h>
#endif
#ifndef INCLUDED_starling_styles_MeshStyle
#include <starling/styles/MeshStyle.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif
#ifndef INCLUDED_starling_utils_StringUtil
#include <starling/utils/StringUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d8443237b718e07d_170_new,"starling.rendering.VertexData","new",0x5cfb5708,"starling.rendering.VertexData.new","starling/rendering/VertexData.hx",170,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_191_clear,"starling.rendering.VertexData","clear",0xc2eff235,"starling.rendering.VertexData.clear","starling/rendering/VertexData.hx",191,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_199_clone,"starling.rendering.VertexData","clone",0xc2f79405,"starling.rendering.VertexData.clone","starling/rendering/VertexData.hx",199,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_226_copyTo,"starling.rendering.VertexData","copyTo",0x908f2ee8,"starling.rendering.VertexData.copyTo","starling/rendering/VertexData.hx",226,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_298_copyAttributeTo,"starling.rendering.VertexData","copyAttributeTo",0x318719aa,"starling.rendering.VertexData.copyAttributeTo","starling/rendering/VertexData.hx",298,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_319_copyAttributeTo_internal,"starling.rendering.VertexData","copyAttributeTo_internal",0x4ccdbfb2,"starling.rendering.VertexData.copyAttributeTo_internal","starling/rendering/VertexData.hx",319,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_370_trim,"starling.rendering.VertexData","trim",0x02f1e93a,"starling.rendering.VertexData.trim","starling/rendering/VertexData.hx",370,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_388_toString,"starling.rendering.VertexData","toString",0x9cb62904,"starling.rendering.VertexData.toString","starling/rendering/VertexData.hx",388,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_396_getUnsignedInt,"starling.rendering.VertexData","getUnsignedInt",0x6550285c,"starling.rendering.VertexData.getUnsignedInt","starling/rendering/VertexData.hx",396,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_403_setUnsignedInt,"starling.rendering.VertexData","setUnsignedInt",0x857010d0,"starling.rendering.VertexData.setUnsignedInt","starling/rendering/VertexData.hx",403,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_413_getFloat,"starling.rendering.VertexData","getFloat",0xc6b52d7e,"starling.rendering.VertexData.getFloat","starling/rendering/VertexData.hx",413,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_420_setFloat,"starling.rendering.VertexData","setFloat",0x751286f2,"starling.rendering.VertexData.setFloat","starling/rendering/VertexData.hx",420,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_430_getPoint,"starling.rendering.VertexData","getPoint",0x8aae1c32,"starling.rendering.VertexData.getPoint","starling/rendering/VertexData.hx",430,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_443_setPoint,"starling.rendering.VertexData","setPoint",0x390b75a6,"starling.rendering.VertexData.setPoint","starling/rendering/VertexData.hx",443,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_456_getPoint3D,"starling.rendering.VertexData","getPoint3D",0x27933963,"starling.rendering.VertexData.getPoint3D","starling/rendering/VertexData.hx",456,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_469_setPoint3D,"starling.rendering.VertexData","setPoint3D",0x2b10d7d7,"starling.rendering.VertexData.setPoint3D","starling/rendering/VertexData.hx",469,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_482_getPoint4D,"starling.rendering.VertexData","getPoint4D",0x27933a42,"starling.rendering.VertexData.getPoint4D","starling/rendering/VertexData.hx",482,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_497_setPoint4D,"starling.rendering.VertexData","setPoint4D",0x2b10d8b6,"starling.rendering.VertexData.setPoint4D","starling/rendering/VertexData.hx",497,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_510_getColor,"starling.rendering.VertexData","getColor",0x0e7ad945,"starling.rendering.VertexData.getColor","starling/rendering/VertexData.hx",510,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_520_setColor,"starling.rendering.VertexData","setColor",0xbcd832b9,"starling.rendering.VertexData.setColor","starling/rendering/VertexData.hx",520,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_530_getAlpha,"starling.rendering.VertexData","getAlpha",0xe5b50f40,"starling.rendering.VertexData.getAlpha","starling/rendering/VertexData.hx",530,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_539_setAlpha,"starling.rendering.VertexData","setAlpha",0x941268b4,"starling.rendering.VertexData.setAlpha","starling/rendering/VertexData.hx",539,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_556_getBounds,"starling.rendering.VertexData","getBounds",0x3c9a0453,"starling.rendering.VertexData.getBounds","starling/rendering/VertexData.hx",556,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_629_getBoundsProjected,"starling.rendering.VertexData","getBoundsProjected",0x18f5cca5,"starling.rendering.VertexData.getBoundsProjected","starling/rendering/VertexData.hx",629,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_684_get_premultipliedAlpha,"starling.rendering.VertexData","get_premultipliedAlpha",0xdbe149c9,"starling.rendering.VertexData.get_premultipliedAlpha","starling/rendering/VertexData.hx",684,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_686_set_premultipliedAlpha,"starling.rendering.VertexData","set_premultipliedAlpha",0x0f8cc63d,"starling.rendering.VertexData.set_premultipliedAlpha","starling/rendering/VertexData.hx",686,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_694_setPremultipliedAlpha,"starling.rendering.VertexData","setPremultipliedAlpha",0x89162f12,"starling.rendering.VertexData.setPremultipliedAlpha","starling/rendering/VertexData.hx",694,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_729_updateTinted,"starling.rendering.VertexData","updateTinted",0xa160a55b,"starling.rendering.VertexData.updateTinted","starling/rendering/VertexData.hx",729,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_756_transformPoints,"starling.rendering.VertexData","transformPoints",0xf5ae6f57,"starling.rendering.VertexData.transformPoints","starling/rendering/VertexData.hx",756,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_782_translatePoints,"starling.rendering.VertexData","translatePoints",0x13f2aeb9,"starling.rendering.VertexData.translatePoints","starling/rendering/VertexData.hx",782,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_808_scaleAlphas,"starling.rendering.VertexData","scaleAlphas",0xd54a0027,"starling.rendering.VertexData.scaleAlphas","starling/rendering/VertexData.hx",808,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_854_colorize,"starling.rendering.VertexData","colorize",0xee47be29,"starling.rendering.VertexData.colorize","starling/rendering/VertexData.hx",854,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_889_getFormat,"starling.rendering.VertexData","getFormat",0xd40b0d15,"starling.rendering.VertexData.getFormat","starling/rendering/VertexData.hx",889,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_895_getSize,"starling.rendering.VertexData","getSize",0xc80a4b1f,"starling.rendering.VertexData.getSize","starling/rendering/VertexData.hx",895,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_901_getSizeIn32Bits,"starling.rendering.VertexData","getSizeIn32Bits",0xaed12329,"starling.rendering.VertexData.getSizeIn32Bits","starling/rendering/VertexData.hx",901,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_907_getOffset,"starling.rendering.VertexData","getOffset",0x36bc1571,"starling.rendering.VertexData.getOffset","starling/rendering/VertexData.hx",907,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_913_getOffsetIn32Bits,"starling.rendering.VertexData","getOffsetIn32Bits",0xc4b08f7b,"starling.rendering.VertexData.getOffsetIn32Bits","starling/rendering/VertexData.hx",913,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_919_hasAttribute,"starling.rendering.VertexData","hasAttribute",0x0a58b9ba,"starling.rendering.VertexData.hasAttribute","starling/rendering/VertexData.hx",919,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_928_createVertexBuffer,"starling.rendering.VertexData","createVertexBuffer",0x4f2222f8,"starling.rendering.VertexData.createVertexBuffer","starling/rendering/VertexData.hx",928,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_942_uploadToVertexBuffer,"starling.rendering.VertexData","uploadToVertexBuffer",0xe74b27d8,"starling.rendering.VertexData.uploadToVertexBuffer","starling/rendering/VertexData.hx",942,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_951_getAttribute,"starling.rendering.VertexData","getAttribute",0x8c5d70fe,"starling.rendering.VertexData.getAttribute","starling/rendering/VertexData.hx",951,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1012_get_numVertices,"starling.rendering.VertexData","get_numVertices",0xda38aa9e,"starling.rendering.VertexData.get_numVertices","starling/rendering/VertexData.hx",1012,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1014_set_numVertices,"starling.rendering.VertexData","set_numVertices",0xd60427aa,"starling.rendering.VertexData.set_numVertices","starling/rendering/VertexData.hx",1014,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1054_get_rawData,"starling.rendering.VertexData","get_rawData",0x2c1d3af1,"starling.rendering.VertexData.get_rawData","starling/rendering/VertexData.hx",1054,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1066_get_format,"starling.rendering.VertexData","get_format",0x75261d58,"starling.rendering.VertexData.get_format","starling/rendering/VertexData.hx",1066,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1070_set_format,"starling.rendering.VertexData","set_format",0x78a3bbcc,"starling.rendering.VertexData.set_format","starling/rendering/VertexData.hx",1070,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1130_get_tinted,"starling.rendering.VertexData","get_tinted",0x971e283b,"starling.rendering.VertexData.get_tinted","starling/rendering/VertexData.hx",1130,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1131_set_tinted,"starling.rendering.VertexData","set_tinted",0x9a9bc6af,"starling.rendering.VertexData.set_tinted","starling/rendering/VertexData.hx",1131,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1137_get_formatString,"starling.rendering.VertexData","get_formatString",0x553f4c49,"starling.rendering.VertexData.get_formatString","starling/rendering/VertexData.hx",1137,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1144_get_vertexSize,"starling.rendering.VertexData","get_vertexSize",0x52bfdce6,"starling.rendering.VertexData.get_vertexSize","starling/rendering/VertexData.hx",1144,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1151_get_vertexSizeIn32Bits,"starling.rendering.VertexData","get_vertexSizeIn32Bits",0x2ca853f0,"starling.rendering.VertexData.get_vertexSizeIn32Bits","starling/rendering/VertexData.hx",1151,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1158_get_size,"starling.rendering.VertexData","get_size",0x3055b4a2,"starling.rendering.VertexData.get_size","starling/rendering/VertexData.hx",1158,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_1165_get_sizeIn32Bits,"starling.rendering.VertexData","get_sizeIn32Bits",0xcfb647ac,"starling.rendering.VertexData.get_sizeIn32Bits","starling/rendering/VertexData.hx",1165,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_965_switchEndian,"starling.rendering.VertexData","switchEndian",0x98beaa07,"starling.rendering.VertexData.switchEndian","starling/rendering/VertexData.hx",965,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_972_premultiplyAlpha,"starling.rendering.VertexData","premultiplyAlpha",0xb8f968ef,"starling.rendering.VertexData.premultiplyAlpha","starling/rendering/VertexData.hx",972,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_990_unmultiplyAlpha,"starling.rendering.VertexData","unmultiplyAlpha",0xebc1ab49,"starling.rendering.VertexData.unmultiplyAlpha","starling/rendering/VertexData.hx",990,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_122_boot,"starling.rendering.VertexData","boot",0xf709d08a,"starling.rendering.VertexData.boot","starling/rendering/VertexData.hx",122,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_123_boot,"starling.rendering.VertexData","boot",0xf709d08a,"starling.rendering.VertexData.boot","starling/rendering/VertexData.hx",123,0xfc8894e6)
HX_LOCAL_STACK_FRAME(_hx_pos_d8443237b718e07d_124_boot,"starling.rendering.VertexData","boot",0xf709d08a,"starling.rendering.VertexData.boot","starling/rendering/VertexData.hx",124,0xfc8894e6)
namespace starling{
namespace rendering{

void VertexData_obj::__construct( ::Dynamic format,hx::Null< int >  __o_initialCapacity){
int initialCapacity = __o_initialCapacity.Default(32);
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_170_new)
HXLINE( 171)		if (hx::IsNull( format )) {
HXLINE( 171)			this->_format = ::starling::styles::MeshStyle_obj::VERTEX_FORMAT;
            		}
            		else {
HXLINE( 172)			if (::Std_obj::is(format,hx::ClassOf< ::starling::rendering::VertexDataFormat >())) {
HXLINE( 172)				this->_format = ( ( ::starling::rendering::VertexDataFormat)(format) );
            			}
            			else {
HXLINE( 173)				if (::Std_obj::is(format,hx::ClassOf< ::String >())) {
HXLINE( 173)					this->_format = ::starling::rendering::VertexDataFormat_obj::fromString(::Std_obj::string(format));
            				}
            				else {
HXLINE( 174)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("'format' must be String or VertexDataFormat",70,47,8f,49)));
            				}
            			}
            		}
HXLINE( 176)		this->_attributes = this->_format->get_attributes();
HXLINE( 177)		this->_numAttributes = ::openfl::_Vector::IVector_obj::get_length(this->_attributes->data);
HXLINE( 178)		int _hx_tmp;
HXDLIN( 178)		if (this->_format->hasAttribute(HX_("position",a9,a0,fa,ca))) {
HXLINE( 178)			_hx_tmp = this->_format->getOffset(HX_("position",a9,a0,fa,ca));
            		}
            		else {
HXLINE( 178)			_hx_tmp = (int)0;
            		}
HXDLIN( 178)		this->_posOffset = _hx_tmp;
HXLINE( 179)		int _hx_tmp1;
HXDLIN( 179)		if (this->_format->hasAttribute(HX_("color",63,71,5c,4a))) {
HXLINE( 179)			_hx_tmp1 = this->_format->getOffset(HX_("color",63,71,5c,4a));
            		}
            		else {
HXLINE( 179)			_hx_tmp1 = (int)0;
            		}
HXDLIN( 179)		this->_colOffset = _hx_tmp1;
HXLINE( 180)		this->_vertexSize = this->_format->get_vertexSize();
HXLINE( 181)		this->_numVertices = (int)0;
HXLINE( 182)		this->_premultipliedAlpha = true;
HXLINE( 183)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN( 183)		this->_rawData = this1;
HXLINE( 184)		this->_rawData->_hx___endian = (::starling::rendering::VertexData_obj::sBytes->_hx___endian = (int)1);
HXLINE( 185)		 ::openfl::utils::ByteArrayData _hx_tmp2 = this->_rawData;
HXDLIN( 185)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(_hx_tmp2,(initialCapacity * this->_vertexSize));
HXLINE( 186)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(this->_rawData,(int)0);
            	}

Dynamic VertexData_obj::__CreateEmpty() { return new VertexData_obj; }

void *VertexData_obj::_hx_vtable = 0;

Dynamic VertexData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VertexData_obj > _hx_result = new VertexData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool VertexData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x463e4552;
}

void VertexData_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_191_clear)
HXLINE( 192)		this->_rawData->clear();
HXLINE( 193)		this->_numVertices = (int)0;
HXLINE( 194)		this->_tinted = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,clear,(void))

 ::starling::rendering::VertexData VertexData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_199_clone)
HXLINE( 200)		 ::starling::rendering::VertexData clone =  ::starling::rendering::VertexData_obj::__alloc( HX_CTX ,this->_format,this->_numVertices);
HXLINE( 201)		clone->_rawData->writeBytes(this->_rawData,null(),null());
HXLINE( 202)		clone->_numVertices = this->_numVertices;
HXLINE( 203)		clone->_premultipliedAlpha = this->_premultipliedAlpha;
HXLINE( 204)		clone->_tinted = this->_tinted;
HXLINE( 205)		return clone;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,clone,return )

void VertexData_obj::copyTo( ::starling::rendering::VertexData target,hx::Null< int >  __o_targetVertexID, ::openfl::geom::Matrix matrix,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices){
int targetVertexID = __o_targetVertexID.Default(0);
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_226_copyTo)
HXLINE( 227)		bool _hx_tmp;
HXDLIN( 227)		if ((numVertices >= (int)0)) {
HXLINE( 227)			_hx_tmp = ((vertexID + numVertices) > this->_numVertices);
            		}
            		else {
HXLINE( 227)			_hx_tmp = true;
            		}
HXDLIN( 227)		if (_hx_tmp) {
HXLINE( 228)			numVertices = (this->_numVertices - vertexID);
            		}
HXLINE( 230)		if (hx::IsEq( this->_format,target->_format )) {
HXLINE( 232)			int target1 = target->_numVertices;
HXDLIN( 232)			if ((target1 < (targetVertexID + numVertices))) {
HXLINE( 233)				target->_numVertices = (targetVertexID + numVertices);
            			}
HXLINE( 235)			bool _hx_tmp1;
HXDLIN( 235)			if (!(target->_tinted)) {
HXLINE( 235)				_hx_tmp1 = this->_tinted;
            			}
            			else {
HXLINE( 235)				_hx_tmp1 = true;
            			}
HXDLIN( 235)			target->_tinted = _hx_tmp1;
HXLINE( 240)			 ::openfl::utils::ByteArrayData targetRawData = target->_rawData;
HXLINE( 241)			targetRawData->position = (targetVertexID * this->_vertexSize);
HXLINE( 242)			 ::openfl::utils::ByteArrayData _hx_tmp2 = this->_rawData;
HXDLIN( 242)			int _hx_tmp3 = (vertexID * this->_vertexSize);
HXDLIN( 242)			targetRawData->writeBytes(_hx_tmp2,_hx_tmp3,(numVertices * this->_vertexSize));
HXLINE( 244)			if (hx::IsNotNull( matrix )) {
HXLINE( 246)				Float x;
HXDLIN( 246)				Float y;
HXLINE( 247)				int pos = ((targetVertexID * this->_vertexSize) + this->_posOffset);
HXLINE( 248)				int endPos = (pos + (numVertices * this->_vertexSize));
HXLINE( 250)				while((pos < endPos)){
HXLINE( 252)					targetRawData->position = pos;
HXLINE( 253)					x = targetRawData->readFloat();
HXLINE( 254)					y = targetRawData->readFloat();
HXLINE( 256)					targetRawData->position = pos;
HXLINE( 257)					Float _hx_tmp4 = (matrix->a * x);
HXDLIN( 257)					targetRawData->writeFloat(((_hx_tmp4 + (matrix->c * y)) + matrix->tx));
HXLINE( 258)					Float _hx_tmp5 = (matrix->d * y);
HXDLIN( 258)					targetRawData->writeFloat(((_hx_tmp5 + (matrix->b * x)) + matrix->ty));
HXLINE( 260)					pos = (pos + this->_vertexSize);
            				}
            			}
            		}
            		else {
HXLINE( 266)			int target2 = target->_numVertices;
HXDLIN( 266)			if ((target2 < (targetVertexID + numVertices))) {
HXLINE( 267)				target->set_numVertices((targetVertexID + numVertices));
            			}
HXLINE( 269)			{
HXLINE( 269)				int _g1 = (int)0;
HXDLIN( 269)				int _g = this->_numAttributes;
HXDLIN( 269)				while((_g1 < _g)){
HXLINE( 269)					_g1 = (_g1 + (int)1);
HXDLIN( 269)					int i = (_g1 - (int)1);
HXLINE( 271)					 ::starling::rendering::VertexDataAttribute srcAttr = ( ( ::starling::rendering::VertexDataAttribute)(::openfl::_Vector::IVector_obj::get(this->_attributes->data,i)) );
HXLINE( 272)					 ::starling::rendering::VertexDataAttribute tgtAttr = target->getAttribute(srcAttr->name);
HXLINE( 274)					if (hx::IsNotNull( tgtAttr )) {
HXLINE( 276)						if ((srcAttr->offset == this->_posOffset)) {
HXLINE( 277)							this->copyAttributeTo_internal(target,targetVertexID,matrix,srcAttr,tgtAttr,vertexID,numVertices);
            						}
            						else {
HXLINE( 280)							this->copyAttributeTo_internal(target,targetVertexID,null(),srcAttr,tgtAttr,vertexID,numVertices);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(VertexData_obj,copyTo,(void))

void VertexData_obj::copyAttributeTo( ::starling::rendering::VertexData target,int targetVertexID,::String attrName, ::openfl::geom::Matrix matrix,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices){
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_298_copyAttributeTo)
HXLINE( 299)		 ::starling::rendering::VertexDataAttribute sourceAttribute = this->getAttribute(attrName);
HXLINE( 300)		 ::starling::rendering::VertexDataAttribute targetAttribute = target->getAttribute(attrName);
HXLINE( 302)		if (hx::IsNull( sourceAttribute )) {
HXLINE( 303)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,((HX_("Attribute '",03,63,34,d0) + attrName) + HX_("' not found in source data",38,a0,e1,04))));
            		}
HXLINE( 305)		if (hx::IsNull( targetAttribute )) {
HXLINE( 306)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,((HX_("Attribute '",03,63,34,d0) + attrName) + HX_("' not found in target data",02,b2,33,66))));
            		}
HXLINE( 308)		if (sourceAttribute->isColor) {
HXLINE( 309)			bool _hx_tmp;
HXDLIN( 309)			if (!(target->_tinted)) {
HXLINE( 309)				_hx_tmp = this->_tinted;
            			}
            			else {
HXLINE( 309)				_hx_tmp = true;
            			}
HXDLIN( 309)			target->_tinted = _hx_tmp;
            		}
HXLINE( 311)		this->copyAttributeTo_internal(target,targetVertexID,matrix,sourceAttribute,targetAttribute,vertexID,numVertices);
            	}


HX_DEFINE_DYNAMIC_FUNC6(VertexData_obj,copyAttributeTo,(void))

void VertexData_obj::copyAttributeTo_internal( ::starling::rendering::VertexData target,int targetVertexID, ::openfl::geom::Matrix matrix, ::starling::rendering::VertexDataAttribute sourceAttribute, ::starling::rendering::VertexDataAttribute targetAttribute,int vertexID,int numVertices){
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_319_copyAttributeTo_internal)
HXLINE( 320)		if ((sourceAttribute->format != targetAttribute->format)) {
HXLINE( 321)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Attribute formats differ between source and target",41,7a,81,86)));
            		}
HXLINE( 323)		bool _hx_tmp;
HXDLIN( 323)		if ((numVertices >= (int)0)) {
HXLINE( 323)			_hx_tmp = ((vertexID + numVertices) > this->_numVertices);
            		}
            		else {
HXLINE( 323)			_hx_tmp = true;
            		}
HXDLIN( 323)		if (_hx_tmp) {
HXLINE( 324)			numVertices = (this->_numVertices - vertexID);
            		}
HXLINE( 326)		int target1 = target->_numVertices;
HXDLIN( 326)		if ((target1 < (targetVertexID + numVertices))) {
HXLINE( 327)			target->_numVertices = (targetVertexID + numVertices);
            		}
HXLINE( 329)		int i;
HXDLIN( 329)		int j;
HXDLIN( 329)		Float x;
HXDLIN( 329)		Float y;
HXLINE( 330)		 ::openfl::utils::ByteArrayData sourceData = this->_rawData;
HXLINE( 331)		 ::openfl::utils::ByteArrayData targetData = target->_rawData;
HXLINE( 332)		int sourceDelta = (this->_vertexSize - sourceAttribute->size);
HXLINE( 333)		int targetDelta = (target->_vertexSize - targetAttribute->size);
HXLINE( 334)		int attributeSizeIn32Bits = ::Std_obj::_hx_int(((Float)sourceAttribute->size / (Float)(int)4));
HXLINE( 336)		sourceData->position = ((vertexID * this->_vertexSize) + sourceAttribute->offset);
HXLINE( 337)		targetData->position = ((targetVertexID * target->_vertexSize) + targetAttribute->offset);
HXLINE( 339)		if (hx::IsNotNull( matrix )) {
HXLINE( 341)			int _g1 = (int)0;
HXDLIN( 341)			int _g = numVertices;
HXDLIN( 341)			while((_g1 < _g)){
HXLINE( 341)				_g1 = (_g1 + (int)1);
HXDLIN( 341)				int i1 = (_g1 - (int)1);
HXLINE( 343)				x = sourceData->readFloat();
HXLINE( 344)				y = sourceData->readFloat();
HXLINE( 346)				Float _hx_tmp1 = (matrix->a * x);
HXDLIN( 346)				targetData->writeFloat(((_hx_tmp1 + (matrix->c * y)) + matrix->tx));
HXLINE( 347)				Float _hx_tmp2 = (matrix->d * y);
HXDLIN( 347)				targetData->writeFloat(((_hx_tmp2 + (matrix->b * x)) + matrix->ty));
HXLINE( 349)				 ::openfl::utils::ByteArrayData sourceData1 = sourceData;
HXDLIN( 349)				sourceData1->position = (sourceData1->position + sourceDelta);
HXLINE( 350)				 ::openfl::utils::ByteArrayData targetData1 = targetData;
HXDLIN( 350)				targetData1->position = (targetData1->position + targetDelta);
            			}
            		}
            		else {
HXLINE( 355)			int _g11 = (int)0;
HXDLIN( 355)			int _g2 = numVertices;
HXDLIN( 355)			while((_g11 < _g2)){
HXLINE( 355)				_g11 = (_g11 + (int)1);
HXDLIN( 355)				int i2 = (_g11 - (int)1);
HXLINE( 357)				{
HXLINE( 357)					int _g3 = (int)0;
HXDLIN( 357)					int _g21 = attributeSizeIn32Bits;
HXDLIN( 357)					while((_g3 < _g21)){
HXLINE( 357)						_g3 = (_g3 + (int)1);
HXDLIN( 357)						int j1 = (_g3 - (int)1);
HXLINE( 358)						targetData->writeUnsignedInt(sourceData->readUnsignedInt());
            					}
            				}
HXLINE( 360)				 ::openfl::utils::ByteArrayData sourceData2 = sourceData;
HXDLIN( 360)				sourceData2->position = (sourceData2->position + sourceDelta);
HXLINE( 361)				 ::openfl::utils::ByteArrayData targetData2 = targetData;
HXDLIN( 361)				targetData2->position = (targetData2->position + targetDelta);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(VertexData_obj,copyAttributeTo_internal,(void))

void VertexData_obj::trim(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_370_trim)
HXLINE( 371)		int numBytes = (this->_numVertices * this->_vertexSize);
HXLINE( 373)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(::starling::rendering::VertexData_obj::sBytes,numBytes);
HXLINE( 374)		::starling::rendering::VertexData_obj::sBytes->position = (int)0;
HXLINE( 375)		::starling::rendering::VertexData_obj::sBytes->writeBytes(this->_rawData,(int)0,numBytes);
HXLINE( 377)		this->_rawData->clear();
HXLINE( 378)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(this->_rawData,numBytes);
HXLINE( 379)		this->_rawData->writeBytes(::starling::rendering::VertexData_obj::sBytes,null(),null());
HXLINE( 381)		::starling::rendering::VertexData_obj::sBytes->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,trim,(void))

::String VertexData_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_388_toString)
HXLINE( 389)		::String _hx_tmp = this->_format->get_formatString();
HXLINE( 388)		return ::starling::utils::StringUtil_obj::format(HX_("[VertexData format=\"{0}\" numVertices={1}]",27,15,1d,5e),::cpp::VirtualArray_obj::__new(2)->init(0,_hx_tmp)->init(1,this->_numVertices));
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,toString,return )

int VertexData_obj::getUnsignedInt(int vertexID,::String attrName){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_396_getUnsignedInt)
HXLINE( 397)		int _hx_tmp = (vertexID * this->_vertexSize);
HXDLIN( 397)		this->_rawData->position = (_hx_tmp + this->getAttribute(attrName)->offset);
HXLINE( 398)		return this->_rawData->readUnsignedInt();
            	}


HX_DEFINE_DYNAMIC_FUNC2(VertexData_obj,getUnsignedInt,return )

void VertexData_obj::setUnsignedInt(int vertexID,::String attrName,int value){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_403_setUnsignedInt)
HXLINE( 404)		int _hx_tmp = this->_numVertices;
HXDLIN( 404)		if ((_hx_tmp < (vertexID + (int)1))) {
HXLINE( 405)			this->set_numVertices((vertexID + (int)1));
            		}
HXLINE( 407)		int _hx_tmp1 = (vertexID * this->_vertexSize);
HXDLIN( 407)		this->_rawData->position = (_hx_tmp1 + this->getAttribute(attrName)->offset);
HXLINE( 408)		this->_rawData->writeUnsignedInt(value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexData_obj,setUnsignedInt,(void))

Float VertexData_obj::getFloat(int vertexID,::String attrName){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_413_getFloat)
HXLINE( 414)		int _hx_tmp = (vertexID * this->_vertexSize);
HXDLIN( 414)		this->_rawData->position = (_hx_tmp + this->getAttribute(attrName)->offset);
HXLINE( 415)		return this->_rawData->readFloat();
            	}


HX_DEFINE_DYNAMIC_FUNC2(VertexData_obj,getFloat,return )

void VertexData_obj::setFloat(int vertexID,::String attrName,Float value){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_420_setFloat)
HXLINE( 421)		int _hx_tmp = this->_numVertices;
HXDLIN( 421)		if ((_hx_tmp < (vertexID + (int)1))) {
HXLINE( 422)			this->set_numVertices((vertexID + (int)1));
            		}
HXLINE( 424)		int _hx_tmp1 = (vertexID * this->_vertexSize);
HXDLIN( 424)		this->_rawData->position = (_hx_tmp1 + this->getAttribute(attrName)->offset);
HXLINE( 425)		this->_rawData->writeFloat(value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexData_obj,setFloat,(void))

 ::openfl::geom::Point VertexData_obj::getPoint(int vertexID,::String attrName, ::openfl::geom::Point out){
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_430_getPoint)
HXLINE( 431)		if (hx::IsNull( out )) {
HXLINE( 431)			out =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 433)		int offset;
HXDLIN( 433)		if ((attrName == HX_("position",a9,a0,fa,ca))) {
HXLINE( 433)			offset = this->_posOffset;
            		}
            		else {
HXLINE( 433)			offset = this->getAttribute(attrName)->offset;
            		}
HXLINE( 434)		this->_rawData->position = ((vertexID * this->_vertexSize) + offset);
HXLINE( 435)		out->x = this->_rawData->readFloat();
HXLINE( 436)		out->y = this->_rawData->readFloat();
HXLINE( 438)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexData_obj,getPoint,return )

void VertexData_obj::setPoint(int vertexID,::String attrName,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_443_setPoint)
HXLINE( 444)		int _hx_tmp = this->_numVertices;
HXDLIN( 444)		if ((_hx_tmp < (vertexID + (int)1))) {
HXLINE( 445)			this->set_numVertices((vertexID + (int)1));
            		}
HXLINE( 447)		int offset;
HXDLIN( 447)		if ((attrName == HX_("position",a9,a0,fa,ca))) {
HXLINE( 447)			offset = this->_posOffset;
            		}
            		else {
HXLINE( 447)			offset = this->getAttribute(attrName)->offset;
            		}
HXLINE( 448)		this->_rawData->position = ((vertexID * this->_vertexSize) + offset);
HXLINE( 449)		this->_rawData->writeFloat(x);
HXLINE( 450)		this->_rawData->writeFloat(y);
            	}


HX_DEFINE_DYNAMIC_FUNC4(VertexData_obj,setPoint,(void))

 ::openfl::geom::Vector3D VertexData_obj::getPoint3D(int vertexID,::String attrName, ::openfl::geom::Vector3D out){
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_456_getPoint3D)
HXLINE( 457)		if (hx::IsNull( out )) {
HXLINE( 457)			out =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 459)		int _hx_tmp = (vertexID * this->_vertexSize);
HXDLIN( 459)		this->_rawData->position = (_hx_tmp + this->getAttribute(attrName)->offset);
HXLINE( 460)		out->x = this->_rawData->readFloat();
HXLINE( 461)		out->y = this->_rawData->readFloat();
HXLINE( 462)		out->z = this->_rawData->readFloat();
HXLINE( 464)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexData_obj,getPoint3D,return )

void VertexData_obj::setPoint3D(int vertexID,::String attrName,Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_469_setPoint3D)
HXLINE( 470)		int _hx_tmp = this->_numVertices;
HXDLIN( 470)		if ((_hx_tmp < (vertexID + (int)1))) {
HXLINE( 471)			this->set_numVertices((vertexID + (int)1));
            		}
HXLINE( 473)		int _hx_tmp1 = (vertexID * this->_vertexSize);
HXDLIN( 473)		this->_rawData->position = (_hx_tmp1 + this->getAttribute(attrName)->offset);
HXLINE( 474)		this->_rawData->writeFloat(x);
HXLINE( 475)		this->_rawData->writeFloat(y);
HXLINE( 476)		this->_rawData->writeFloat(z);
            	}


HX_DEFINE_DYNAMIC_FUNC5(VertexData_obj,setPoint3D,(void))

 ::openfl::geom::Vector3D VertexData_obj::getPoint4D(int vertexID,::String attrName, ::openfl::geom::Vector3D out){
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_482_getPoint4D)
HXLINE( 483)		if (hx::IsNull( out )) {
HXLINE( 483)			out =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 485)		int _hx_tmp = (vertexID * this->_vertexSize);
HXDLIN( 485)		this->_rawData->position = (_hx_tmp + this->getAttribute(attrName)->offset);
HXLINE( 486)		out->x = this->_rawData->readFloat();
HXLINE( 487)		out->y = this->_rawData->readFloat();
HXLINE( 488)		out->z = this->_rawData->readFloat();
HXLINE( 489)		out->w = this->_rawData->readFloat();
HXLINE( 491)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexData_obj,getPoint4D,return )

void VertexData_obj::setPoint4D(int vertexID,::String attrName,Float x,Float y,Float z,hx::Null< Float >  __o_w){
Float w = __o_w.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_497_setPoint4D)
HXLINE( 498)		int _hx_tmp = this->_numVertices;
HXDLIN( 498)		if ((_hx_tmp < (vertexID + (int)1))) {
HXLINE( 499)			this->set_numVertices((vertexID + (int)1));
            		}
HXLINE( 501)		int _hx_tmp1 = (vertexID * this->_vertexSize);
HXDLIN( 501)		this->_rawData->position = (_hx_tmp1 + this->getAttribute(attrName)->offset);
HXLINE( 502)		this->_rawData->writeFloat(x);
HXLINE( 503)		this->_rawData->writeFloat(y);
HXLINE( 504)		this->_rawData->writeFloat(z);
HXLINE( 505)		this->_rawData->writeFloat(w);
            	}


HX_DEFINE_DYNAMIC_FUNC6(VertexData_obj,setPoint4D,(void))

int VertexData_obj::getColor(int vertexID,::String __o_attrName){
::String attrName = __o_attrName.Default(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_510_getColor)
HXLINE( 511)		int offset;
HXDLIN( 511)		if ((attrName == HX_("color",63,71,5c,4a))) {
HXLINE( 511)			offset = this->_colOffset;
            		}
            		else {
HXLINE( 511)			offset = this->getAttribute(attrName)->offset;
            		}
HXLINE( 512)		this->_rawData->position = ((vertexID * this->_vertexSize) + offset);
HXLINE( 513)		int value = this->_rawData->readUnsignedInt();
HXDLIN( 513)		int rgba = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)hx::UShr(value,(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)hx::UShr(value,(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)hx::UShr(value,(int)24) & (int)(int)255));
HXLINE( 514)		if (this->_premultipliedAlpha) {
HXLINE( 514)			rgba = ::starling::rendering::VertexData_obj::unmultiplyAlpha(rgba);
            		}
HXLINE( 515)		return ((int)hx::UShr(rgba,(int)8) & (int)(int)16777215);
            	}


HX_DEFINE_DYNAMIC_FUNC2(VertexData_obj,getColor,return )

void VertexData_obj::setColor(int vertexID,::String attrName,int color){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_520_setColor)
HXLINE( 521)		int _hx_tmp = this->_numVertices;
HXDLIN( 521)		if ((_hx_tmp < (vertexID + (int)1))) {
HXLINE( 522)			this->set_numVertices((vertexID + (int)1));
            		}
HXLINE( 524)		Float alpha = this->getAlpha(vertexID,attrName);
HXLINE( 525)		this->colorize(attrName,color,alpha,vertexID,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexData_obj,setColor,(void))

Float VertexData_obj::getAlpha(int vertexID,::String __o_attrName){
::String attrName = __o_attrName.Default(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_530_getAlpha)
HXLINE( 531)		int offset;
HXDLIN( 531)		if ((attrName == HX_("color",63,71,5c,4a))) {
HXLINE( 531)			offset = this->_colOffset;
            		}
            		else {
HXLINE( 531)			offset = this->getAttribute(attrName)->offset;
            		}
HXLINE( 532)		this->_rawData->position = ((vertexID * this->_vertexSize) + offset);
HXLINE( 533)		int value = this->_rawData->readUnsignedInt();
HXDLIN( 533)		int rgba = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)hx::UShr(value,(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)hx::UShr(value,(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)hx::UShr(value,(int)24) & (int)(int)255));
HXLINE( 534)		int _hx_int = ((int)rgba & (int)(int)255);
HXDLIN( 534)		Float _hx_tmp;
HXDLIN( 534)		if ((_hx_int < (int)0)) {
HXLINE( 534)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 534)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 534)		return ((Float)_hx_tmp / (Float)((Float)255.0));
            	}


HX_DEFINE_DYNAMIC_FUNC2(VertexData_obj,getAlpha,return )

void VertexData_obj::setAlpha(int vertexID,::String attrName,Float alpha){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_539_setAlpha)
HXLINE( 540)		int _hx_tmp = this->_numVertices;
HXDLIN( 540)		if ((_hx_tmp < (vertexID + (int)1))) {
HXLINE( 541)			this->set_numVertices((vertexID + (int)1));
            		}
HXLINE( 543)		int color = this->getColor(vertexID,attrName);
HXLINE( 544)		this->colorize(attrName,color,alpha,vertexID,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexData_obj,setAlpha,(void))

 ::openfl::geom::Rectangle VertexData_obj::getBounds(::String __o_attrName, ::openfl::geom::Matrix matrix,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices, ::openfl::geom::Rectangle out){
::String attrName = __o_attrName.Default(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_556_getBounds)
HXLINE( 557)		if (hx::IsNull( out )) {
HXLINE( 557)			out =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 558)		bool _hx_tmp;
HXDLIN( 558)		if ((numVertices >= (int)0)) {
HXLINE( 558)			_hx_tmp = ((vertexID + numVertices) > this->_numVertices);
            		}
            		else {
HXLINE( 558)			_hx_tmp = true;
            		}
HXDLIN( 558)		if (_hx_tmp) {
HXLINE( 559)			numVertices = (this->_numVertices - vertexID);
            		}
HXLINE( 561)		if ((numVertices == (int)0)) {
HXLINE( 563)			if (hx::IsNull( matrix )) {
HXLINE( 564)				out->setEmpty();
            			}
            			else {
HXLINE( 567)				::starling::utils::MatrixUtil_obj::transformCoords(matrix,(int)0,(int)0,::starling::rendering::VertexData_obj::sHelperPoint);
HXLINE( 568)				out->setTo(::starling::rendering::VertexData_obj::sHelperPoint->x,::starling::rendering::VertexData_obj::sHelperPoint->y,(int)0,(int)0);
            			}
            		}
            		else {
HXLINE( 573)			Float minX = ((Float)1.79e+308);
HXDLIN( 573)			Float maxX = ((Float)-1.79e+308);
HXLINE( 574)			Float minY = ((Float)1.79e+308);
HXDLIN( 574)			Float maxY = ((Float)-1.79e+308);
HXLINE( 575)			int offset;
HXDLIN( 575)			if ((attrName == HX_("position",a9,a0,fa,ca))) {
HXLINE( 575)				offset = this->_posOffset;
            			}
            			else {
HXLINE( 575)				offset = this->getAttribute(attrName)->offset;
            			}
HXLINE( 576)			int position = ((vertexID * this->_vertexSize) + offset);
HXLINE( 577)			Float x;
HXDLIN( 577)			Float y;
HXDLIN( 577)			int i;
HXLINE( 579)			if (hx::IsNull( matrix )) {
HXLINE( 581)				int _g1 = (int)0;
HXDLIN( 581)				int _g = numVertices;
HXDLIN( 581)				while((_g1 < _g)){
HXLINE( 581)					_g1 = (_g1 + (int)1);
HXDLIN( 581)					int i1 = (_g1 - (int)1);
HXLINE( 583)					this->_rawData->position = position;
HXLINE( 584)					x = this->_rawData->readFloat();
HXLINE( 585)					y = this->_rawData->readFloat();
HXLINE( 586)					position = (position + this->_vertexSize);
HXLINE( 588)					if ((minX > x)) {
HXLINE( 588)						minX = x;
            					}
HXLINE( 589)					if ((maxX < x)) {
HXLINE( 589)						maxX = x;
            					}
HXLINE( 590)					if ((minY > y)) {
HXLINE( 590)						minY = y;
            					}
HXLINE( 591)					if ((maxY < y)) {
HXLINE( 591)						maxY = y;
            					}
            				}
            			}
            			else {
HXLINE( 596)				int _g11 = (int)0;
HXDLIN( 596)				int _g2 = numVertices;
HXDLIN( 596)				while((_g11 < _g2)){
HXLINE( 596)					_g11 = (_g11 + (int)1);
HXDLIN( 596)					int i2 = (_g11 - (int)1);
HXLINE( 598)					this->_rawData->position = position;
HXLINE( 599)					x = this->_rawData->readFloat();
HXLINE( 600)					y = this->_rawData->readFloat();
HXLINE( 601)					position = (position + this->_vertexSize);
HXLINE( 603)					::starling::utils::MatrixUtil_obj::transformCoords(matrix,x,y,::starling::rendering::VertexData_obj::sHelperPoint);
HXLINE( 605)					if ((minX > ::starling::rendering::VertexData_obj::sHelperPoint->x)) {
HXLINE( 605)						minX = ::starling::rendering::VertexData_obj::sHelperPoint->x;
            					}
HXLINE( 606)					if ((maxX < ::starling::rendering::VertexData_obj::sHelperPoint->x)) {
HXLINE( 606)						maxX = ::starling::rendering::VertexData_obj::sHelperPoint->x;
            					}
HXLINE( 607)					if ((minY > ::starling::rendering::VertexData_obj::sHelperPoint->y)) {
HXLINE( 607)						minY = ::starling::rendering::VertexData_obj::sHelperPoint->y;
            					}
HXLINE( 608)					if ((maxY < ::starling::rendering::VertexData_obj::sHelperPoint->y)) {
HXLINE( 608)						maxY = ::starling::rendering::VertexData_obj::sHelperPoint->y;
            					}
            				}
            			}
HXLINE( 612)			out->setTo(minX,minY,(maxX - minX),(maxY - minY));
            		}
HXLINE( 615)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC5(VertexData_obj,getBounds,return )

 ::openfl::geom::Rectangle VertexData_obj::getBoundsProjected(::String attrName, ::openfl::geom::Matrix3D matrix, ::openfl::geom::Vector3D camPos,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices, ::openfl::geom::Rectangle out){
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_629_getBoundsProjected)
HXLINE( 630)		if (hx::IsNull( out )) {
HXLINE( 630)			out =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 631)		if (hx::IsNull( camPos )) {
HXLINE( 631)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("camPos must not be null",1b,c7,fc,18)));
            		}
HXLINE( 632)		bool _hx_tmp;
HXDLIN( 632)		if ((numVertices >= (int)0)) {
HXLINE( 632)			_hx_tmp = ((vertexID + numVertices) > this->_numVertices);
            		}
            		else {
HXLINE( 632)			_hx_tmp = true;
            		}
HXDLIN( 632)		if (_hx_tmp) {
HXLINE( 633)			numVertices = (this->_numVertices - vertexID);
            		}
HXLINE( 635)		if ((numVertices == (int)0)) {
HXLINE( 637)			if (hx::IsNotNull( matrix )) {
HXLINE( 638)				::starling::utils::MatrixUtil_obj::transformCoords3D(matrix,(int)0,(int)0,(int)0,::starling::rendering::VertexData_obj::sHelperPoint3D);
            			}
            			else {
HXLINE( 640)				::starling::rendering::VertexData_obj::sHelperPoint3D->setTo((int)0,(int)0,(int)0);
            			}
HXLINE( 642)			::starling::utils::MathUtil_obj::intersectLineWithXYPlane(camPos,::starling::rendering::VertexData_obj::sHelperPoint3D,::starling::rendering::VertexData_obj::sHelperPoint);
HXLINE( 643)			out->setTo(::starling::rendering::VertexData_obj::sHelperPoint->x,::starling::rendering::VertexData_obj::sHelperPoint->y,(int)0,(int)0);
            		}
            		else {
HXLINE( 647)			Float minX = ((Float)1.79e+308);
HXDLIN( 647)			Float maxX = ((Float)-1.79e+308);
HXLINE( 648)			Float minY = ((Float)1.79e+308);
HXDLIN( 648)			Float maxY = ((Float)-1.79e+308);
HXLINE( 649)			int offset;
HXDLIN( 649)			if ((attrName == HX_("position",a9,a0,fa,ca))) {
HXLINE( 649)				offset = this->_posOffset;
            			}
            			else {
HXLINE( 649)				offset = this->getAttribute(attrName)->offset;
            			}
HXLINE( 650)			int position = ((vertexID * this->_vertexSize) + offset);
HXLINE( 651)			Float x;
HXDLIN( 651)			Float y;
HXDLIN( 651)			int i;
HXLINE( 653)			{
HXLINE( 653)				int _g1 = (int)0;
HXDLIN( 653)				int _g = numVertices;
HXDLIN( 653)				while((_g1 < _g)){
HXLINE( 653)					_g1 = (_g1 + (int)1);
HXDLIN( 653)					int i1 = (_g1 - (int)1);
HXLINE( 655)					this->_rawData->position = position;
HXLINE( 656)					x = this->_rawData->readFloat();
HXLINE( 657)					y = this->_rawData->readFloat();
HXLINE( 658)					position = (position + this->_vertexSize);
HXLINE( 660)					if (hx::IsNotNull( matrix )) {
HXLINE( 661)						::starling::utils::MatrixUtil_obj::transformCoords3D(matrix,x,y,(int)0,::starling::rendering::VertexData_obj::sHelperPoint3D);
            					}
            					else {
HXLINE( 663)						::starling::rendering::VertexData_obj::sHelperPoint3D->setTo(x,y,(int)0);
            					}
HXLINE( 665)					::starling::utils::MathUtil_obj::intersectLineWithXYPlane(camPos,::starling::rendering::VertexData_obj::sHelperPoint3D,::starling::rendering::VertexData_obj::sHelperPoint);
HXLINE( 667)					if ((minX > ::starling::rendering::VertexData_obj::sHelperPoint->x)) {
HXLINE( 667)						minX = ::starling::rendering::VertexData_obj::sHelperPoint->x;
            					}
HXLINE( 668)					if ((maxX < ::starling::rendering::VertexData_obj::sHelperPoint->x)) {
HXLINE( 668)						maxX = ::starling::rendering::VertexData_obj::sHelperPoint->x;
            					}
HXLINE( 669)					if ((minY > ::starling::rendering::VertexData_obj::sHelperPoint->y)) {
HXLINE( 669)						minY = ::starling::rendering::VertexData_obj::sHelperPoint->y;
            					}
HXLINE( 670)					if ((maxY < ::starling::rendering::VertexData_obj::sHelperPoint->y)) {
HXLINE( 670)						maxY = ::starling::rendering::VertexData_obj::sHelperPoint->y;
            					}
            				}
            			}
HXLINE( 673)			out->setTo(minX,minY,(maxX - minX),(maxY - minY));
            		}
HXLINE( 676)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC6(VertexData_obj,getBoundsProjected,return )

bool VertexData_obj::get_premultipliedAlpha(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_684_get_premultipliedAlpha)
HXDLIN( 684)		return this->_premultipliedAlpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,get_premultipliedAlpha,return )

bool VertexData_obj::set_premultipliedAlpha(bool value){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_686_set_premultipliedAlpha)
HXLINE( 687)		this->setPremultipliedAlpha(value,false);
HXLINE( 688)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,set_premultipliedAlpha,return )

void VertexData_obj::setPremultipliedAlpha(bool value,bool updateData){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_694_setPremultipliedAlpha)
HXLINE( 695)		bool _hx_tmp;
HXDLIN( 695)		if (updateData) {
HXLINE( 695)			_hx_tmp = (value != this->_premultipliedAlpha);
            		}
            		else {
HXLINE( 695)			_hx_tmp = false;
            		}
HXDLIN( 695)		if (_hx_tmp) {
HXLINE( 697)			int _g1 = (int)0;
HXDLIN( 697)			int _g = this->_numAttributes;
HXDLIN( 697)			while((_g1 < _g)){
HXLINE( 697)				_g1 = (_g1 + (int)1);
HXDLIN( 697)				int i = (_g1 - (int)1);
HXLINE( 699)				 ::starling::rendering::VertexDataAttribute attribute = ( ( ::starling::rendering::VertexDataAttribute)(::openfl::_Vector::IVector_obj::get(this->_attributes->data,i)) );
HXLINE( 700)				if (attribute->isColor) {
HXLINE( 702)					int pos = attribute->offset;
HXLINE( 703)					int oldColor;
HXLINE( 704)					int newColor;
HXLINE( 706)					{
HXLINE( 706)						int _g3 = (int)0;
HXDLIN( 706)						int _g2 = this->_numVertices;
HXDLIN( 706)						while((_g3 < _g2)){
HXLINE( 706)							_g3 = (_g3 + (int)1);
HXDLIN( 706)							int j = (_g3 - (int)1);
HXLINE( 708)							this->_rawData->position = pos;
HXLINE( 709)							int value1 = this->_rawData->readUnsignedInt();
HXDLIN( 709)							oldColor = ((int)((int)((int)((int)((int)value1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)hx::UShr(value1,(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)hx::UShr(value1,(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)hx::UShr(value1,(int)24) & (int)(int)255));
HXLINE( 710)							if (value) {
HXLINE( 710)								newColor = ::starling::rendering::VertexData_obj::premultiplyAlpha(oldColor);
            							}
            							else {
HXLINE( 710)								newColor = ::starling::rendering::VertexData_obj::unmultiplyAlpha(oldColor);
            							}
HXLINE( 712)							this->_rawData->position = pos;
HXLINE( 713)							this->_rawData->writeUnsignedInt(((int)((int)((int)((int)((int)newColor & (int)(int)255) << (int)(int)24) | (int)((int)((int)hx::UShr(newColor,(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)hx::UShr(newColor,(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)hx::UShr(newColor,(int)24) & (int)(int)255)));
HXLINE( 715)							pos = (pos + this->_vertexSize);
            						}
            					}
            				}
            			}
            		}
HXLINE( 721)		this->_premultipliedAlpha = value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VertexData_obj,setPremultipliedAlpha,(void))

bool VertexData_obj::updateTinted(::String __o_attrName){
::String attrName = __o_attrName.Default(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_729_updateTinted)
HXLINE( 730)		int pos;
HXDLIN( 730)		if ((attrName == HX_("color",63,71,5c,4a))) {
HXLINE( 730)			pos = this->_colOffset;
            		}
            		else {
HXLINE( 730)			pos = this->getAttribute(attrName)->offset;
            		}
HXLINE( 731)		this->_tinted = false;
HXLINE( 732)		int white = (int)-1;
HXLINE( 734)		{
HXLINE( 734)			int _g1 = (int)0;
HXDLIN( 734)			int _g = this->_numVertices;
HXDLIN( 734)			while((_g1 < _g)){
HXLINE( 734)				_g1 = (_g1 + (int)1);
HXDLIN( 734)				int i = (_g1 - (int)1);
HXLINE( 736)				this->_rawData->position = pos;
HXLINE( 738)				if ((this->_rawData->readUnsignedInt() != white)) {
HXLINE( 740)					this->_tinted = true;
HXLINE( 741)					goto _hx_goto_37;
            				}
HXLINE( 744)				pos = (pos + this->_vertexSize);
            			}
            			_hx_goto_37:;
            		}
HXLINE( 747)		return this->_tinted;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,updateTinted,return )

void VertexData_obj::transformPoints(::String attrName, ::openfl::geom::Matrix matrix,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices){
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_756_transformPoints)
HXLINE( 757)		bool _hx_tmp;
HXDLIN( 757)		if ((numVertices >= (int)0)) {
HXLINE( 757)			_hx_tmp = ((vertexID + numVertices) > this->_numVertices);
            		}
            		else {
HXLINE( 757)			_hx_tmp = true;
            		}
HXDLIN( 757)		if (_hx_tmp) {
HXLINE( 758)			numVertices = (this->_numVertices - vertexID);
            		}
HXLINE( 760)		Float x;
HXDLIN( 760)		Float y;
HXLINE( 761)		int offset;
HXDLIN( 761)		if ((attrName == HX_("position",a9,a0,fa,ca))) {
HXLINE( 761)			offset = this->_posOffset;
            		}
            		else {
HXLINE( 761)			offset = this->getAttribute(attrName)->offset;
            		}
HXLINE( 762)		int pos = ((vertexID * this->_vertexSize) + offset);
HXLINE( 763)		int endPos = (pos + (numVertices * this->_vertexSize));
HXLINE( 765)		while((pos < endPos)){
HXLINE( 767)			this->_rawData->position = pos;
HXLINE( 768)			x = this->_rawData->readFloat();
HXLINE( 769)			y = this->_rawData->readFloat();
HXLINE( 771)			this->_rawData->position = pos;
HXLINE( 772)			 ::openfl::utils::ByteArrayData _hx_tmp1 = this->_rawData;
HXDLIN( 772)			Float _hx_tmp2 = (matrix->a * x);
HXDLIN( 772)			_hx_tmp1->writeFloat(((_hx_tmp2 + (matrix->c * y)) + matrix->tx));
HXLINE( 773)			 ::openfl::utils::ByteArrayData _hx_tmp3 = this->_rawData;
HXDLIN( 773)			Float _hx_tmp4 = (matrix->d * y);
HXDLIN( 773)			_hx_tmp3->writeFloat(((_hx_tmp4 + (matrix->b * x)) + matrix->ty));
HXLINE( 775)			pos = (pos + this->_vertexSize);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(VertexData_obj,transformPoints,(void))

void VertexData_obj::translatePoints(::String attrName,Float deltaX,Float deltaY,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices){
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_782_translatePoints)
HXLINE( 783)		bool _hx_tmp;
HXDLIN( 783)		if ((numVertices >= (int)0)) {
HXLINE( 783)			_hx_tmp = ((vertexID + numVertices) > this->_numVertices);
            		}
            		else {
HXLINE( 783)			_hx_tmp = true;
            		}
HXDLIN( 783)		if (_hx_tmp) {
HXLINE( 784)			numVertices = (this->_numVertices - vertexID);
            		}
HXLINE( 786)		Float x;
HXDLIN( 786)		Float y;
HXLINE( 787)		int offset;
HXDLIN( 787)		if ((attrName == HX_("position",a9,a0,fa,ca))) {
HXLINE( 787)			offset = this->_posOffset;
            		}
            		else {
HXLINE( 787)			offset = this->getAttribute(attrName)->offset;
            		}
HXLINE( 788)		int pos = ((vertexID * this->_vertexSize) + offset);
HXLINE( 789)		int endPos = (pos + (numVertices * this->_vertexSize));
HXLINE( 791)		while((pos < endPos)){
HXLINE( 793)			this->_rawData->position = pos;
HXLINE( 794)			x = this->_rawData->readFloat();
HXLINE( 795)			y = this->_rawData->readFloat();
HXLINE( 797)			this->_rawData->position = pos;
HXLINE( 798)			 ::openfl::utils::ByteArrayData _hx_tmp1 = this->_rawData;
HXDLIN( 798)			_hx_tmp1->writeFloat((x + deltaX));
HXLINE( 799)			 ::openfl::utils::ByteArrayData _hx_tmp2 = this->_rawData;
HXDLIN( 799)			_hx_tmp2->writeFloat((y + deltaY));
HXLINE( 801)			pos = (pos + this->_vertexSize);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(VertexData_obj,translatePoints,(void))

void VertexData_obj::scaleAlphas(::String attrName,Float factor,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices){
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_808_scaleAlphas)
HXLINE( 809)		if ((factor == ((Float)1.0))) {
HXLINE( 809)			return;
            		}
HXLINE( 810)		bool _hx_tmp;
HXDLIN( 810)		if ((numVertices >= (int)0)) {
HXLINE( 810)			_hx_tmp = ((vertexID + numVertices) > this->_numVertices);
            		}
            		else {
HXLINE( 810)			_hx_tmp = true;
            		}
HXDLIN( 810)		if (_hx_tmp) {
HXLINE( 811)			numVertices = (this->_numVertices - vertexID);
            		}
HXLINE( 813)		this->_tinted = true;
HXLINE( 815)		int i;
HXLINE( 816)		int offset;
HXDLIN( 816)		if ((attrName == HX_("color",63,71,5c,4a))) {
HXLINE( 816)			offset = this->_colOffset;
            		}
            		else {
HXLINE( 816)			offset = this->getAttribute(attrName)->offset;
            		}
HXLINE( 817)		int colorPos = ((vertexID * this->_vertexSize) + offset);
HXLINE( 818)		int alphaPos;
HXDLIN( 818)		Float alpha;
HXDLIN( 818)		int rgba;
HXLINE( 820)		{
HXLINE( 820)			int _g1 = (int)0;
HXDLIN( 820)			int _g = numVertices;
HXDLIN( 820)			while((_g1 < _g)){
HXLINE( 820)				_g1 = (_g1 + (int)1);
HXDLIN( 820)				int i1 = (_g1 - (int)1);
HXLINE( 822)				alphaPos = (colorPos + (int)3);
HXLINE( 823)				alpha = (((Float)this->_rawData->b->__get(alphaPos) / (Float)((Float)255.0)) * factor);
HXLINE( 825)				if ((alpha > ((Float)1.0))) {
HXLINE( 825)					alpha = ((Float)1.0);
            				}
            				else {
HXLINE( 826)					if ((alpha < ((Float)0.0))) {
HXLINE( 826)						alpha = ((Float)0.0);
            					}
            				}
HXLINE( 828)				bool _hx_tmp1;
HXDLIN( 828)				if ((alpha != ((Float)1.0))) {
HXLINE( 828)					_hx_tmp1 = !(this->_premultipliedAlpha);
            				}
            				else {
HXLINE( 828)					_hx_tmp1 = true;
            				}
HXDLIN( 828)				if (_hx_tmp1) {
HXLINE( 833)					 ::openfl::utils::ByteArrayData this1 = this->_rawData;
HXDLIN( 833)					int value = ::Std_obj::_hx_int((alpha * ((Float)255.0)));
HXDLIN( 833)					this1->_hx___resize((alphaPos + (int)1));
HXDLIN( 833)					this1->b[alphaPos] = value;
            				}
            				else {
HXLINE( 838)					this->_rawData->position = colorPos;
HXLINE( 839)					int value1 = this->_rawData->readUnsignedInt();
HXDLIN( 839)					rgba = ::starling::rendering::VertexData_obj::unmultiplyAlpha(((int)((int)((int)((int)((int)value1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)hx::UShr(value1,(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)hx::UShr(value1,(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)hx::UShr(value1,(int)24) & (int)(int)255)));
HXLINE( 840)					rgba = ((int)((int)rgba & (int)(int)-256) | (int)((int)::Std_obj::_hx_int((alpha * ((Float)255.0))) & (int)(int)255));
HXLINE( 841)					rgba = ::starling::rendering::VertexData_obj::premultiplyAlpha(rgba);
HXLINE( 843)					this->_rawData->position = colorPos;
HXLINE( 844)					this->_rawData->writeUnsignedInt(((int)((int)((int)((int)((int)rgba & (int)(int)255) << (int)(int)24) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)hx::UShr(rgba,(int)24) & (int)(int)255)));
            				}
HXLINE( 847)				colorPos = (colorPos + this->_vertexSize);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(VertexData_obj,scaleAlphas,(void))

void VertexData_obj::colorize(::String __o_attrName,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices){
::String attrName = __o_attrName.Default(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
int color = __o_color.Default(16777215);
Float alpha = __o_alpha.Default(((Float)1.0));
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_854_colorize)
HXLINE( 855)		bool _hx_tmp;
HXDLIN( 855)		if ((numVertices >= (int)0)) {
HXLINE( 855)			_hx_tmp = ((vertexID + numVertices) > this->_numVertices);
            		}
            		else {
HXLINE( 855)			_hx_tmp = true;
            		}
HXDLIN( 855)		if (_hx_tmp) {
HXLINE( 856)			numVertices = (this->_numVertices - vertexID);
            		}
HXLINE( 858)		int offset;
HXDLIN( 858)		if ((attrName == HX_("color",63,71,5c,4a))) {
HXLINE( 858)			offset = this->_colOffset;
            		}
            		else {
HXLINE( 858)			offset = this->getAttribute(attrName)->offset;
            		}
HXLINE( 859)		int pos = ((vertexID * this->_vertexSize) + offset);
HXLINE( 860)		int endPos = (pos + (numVertices * this->_vertexSize));
HXLINE( 862)		if ((alpha > ((Float)1.0))) {
HXLINE( 862)			alpha = ((Float)1.0);
            		}
            		else {
HXLINE( 863)			if ((alpha < ((Float)0.0))) {
HXLINE( 863)				alpha = ((Float)0.0);
            			}
            		}
HXLINE( 865)		int rgba = ((int)((int)((int)color << (int)(int)8) & (int)(int)-256) | (int)((int)::Std_obj::_hx_int((alpha * ((Float)255.0))) & (int)(int)255));
HXLINE( 867)		bool _hx_tmp1;
HXDLIN( 867)		if ((rgba == (int)-1)) {
HXLINE( 867)			_hx_tmp1 = (numVertices == this->_numVertices);
            		}
            		else {
HXLINE( 867)			_hx_tmp1 = false;
            		}
HXDLIN( 867)		if (_hx_tmp1) {
HXLINE( 867)			this->_tinted = false;
            		}
            		else {
HXLINE( 868)			if ((rgba != (int)-1)) {
HXLINE( 868)				this->_tinted = true;
            			}
            		}
HXLINE( 870)		bool _hx_tmp2;
HXDLIN( 870)		if (this->_premultipliedAlpha) {
HXLINE( 870)			_hx_tmp2 = (alpha != ((Float)1.0));
            		}
            		else {
HXLINE( 870)			_hx_tmp2 = false;
            		}
HXDLIN( 870)		if (_hx_tmp2) {
HXLINE( 870)			rgba = ::starling::rendering::VertexData_obj::premultiplyAlpha(rgba);
            		}
HXLINE( 872)		this->_rawData->position = ((vertexID * this->_vertexSize) + offset);
HXLINE( 873)		this->_rawData->writeUnsignedInt(((int)((int)((int)((int)((int)rgba & (int)(int)255) << (int)(int)24) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)hx::UShr(rgba,(int)24) & (int)(int)255)));
HXLINE( 875)		while((pos < endPos)){
HXLINE( 877)			this->_rawData->position = pos;
HXLINE( 878)			this->_rawData->writeUnsignedInt(((int)((int)((int)((int)((int)rgba & (int)(int)255) << (int)(int)24) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)hx::UShr(rgba,(int)24) & (int)(int)255)));
HXLINE( 879)			pos = (pos + this->_vertexSize);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(VertexData_obj,colorize,(void))

::String VertexData_obj::getFormat(::String attrName){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_889_getFormat)
HXDLIN( 889)		return this->getAttribute(attrName)->format;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,getFormat,return )

int VertexData_obj::getSize(::String attrName){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_895_getSize)
HXDLIN( 895)		return this->getAttribute(attrName)->size;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,getSize,return )

int VertexData_obj::getSizeIn32Bits(::String attrName){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_901_getSizeIn32Bits)
HXDLIN( 901)		return ::Std_obj::_hx_int(((Float)this->getAttribute(attrName)->size / (Float)(int)4));
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,getSizeIn32Bits,return )

int VertexData_obj::getOffset(::String attrName){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_907_getOffset)
HXDLIN( 907)		return this->getAttribute(attrName)->offset;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,getOffset,return )

int VertexData_obj::getOffsetIn32Bits(::String attrName){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_913_getOffsetIn32Bits)
HXDLIN( 913)		return ::Std_obj::_hx_int(((Float)this->getAttribute(attrName)->offset / (Float)(int)4));
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,getOffsetIn32Bits,return )

bool VertexData_obj::hasAttribute(::String attrName){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_919_hasAttribute)
HXDLIN( 919)		return hx::IsNotNull( this->getAttribute(attrName) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,hasAttribute,return )

 ::openfl::display3D::VertexBuffer3D VertexData_obj::createVertexBuffer(hx::Null< bool >  __o_upload,::String __o_bufferUsage){
bool upload = __o_upload.Default(false);
::String bufferUsage = __o_bufferUsage.Default(HX_HCSTRING("staticDraw","\xd2","\x23","\x1c","\xa4"));
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_928_createVertexBuffer)
HXLINE( 929)		 ::openfl::display3D::Context3D context = ::starling::core::Starling_obj::get_current()->get_context();
HXLINE( 930)		if (hx::IsNull( context )) {
HXLINE( 930)			HX_STACK_DO_THROW( ::starling::errors::MissingContextError_obj::__alloc( HX_CTX ,null(),null()));
            		}
HXLINE( 931)		if ((this->_numVertices == (int)0)) {
HXLINE( 931)			return null();
            		}
HXLINE( 934)		int buffer = this->_numVertices;
HXDLIN( 934)		int buffer1 = ::Std_obj::_hx_int(((Float)this->_vertexSize / (Float)(int)4));
HXLINE( 933)		 ::openfl::display3D::VertexBuffer3D buffer2 = context->createVertexBuffer(buffer,buffer1,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::fromString(bufferUsage));
HXLINE( 936)		if (upload) {
HXLINE( 936)			this->uploadToVertexBuffer(buffer2,null(),null());
            		}
HXLINE( 937)		return buffer2;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VertexData_obj,createVertexBuffer,return )

void VertexData_obj::uploadToVertexBuffer( ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices){
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_942_uploadToVertexBuffer)
HXLINE( 943)		bool _hx_tmp;
HXDLIN( 943)		if ((numVertices >= (int)0)) {
HXLINE( 943)			_hx_tmp = ((vertexID + numVertices) > this->_numVertices);
            		}
            		else {
HXLINE( 943)			_hx_tmp = true;
            		}
HXDLIN( 943)		if (_hx_tmp) {
HXLINE( 944)			numVertices = (this->_numVertices - vertexID);
            		}
HXLINE( 946)		if ((numVertices > (int)0)) {
HXLINE( 947)			buffer->uploadFromByteArray(this->_rawData,(int)0,vertexID,numVertices);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexData_obj,uploadToVertexBuffer,(void))

 ::starling::rendering::VertexDataAttribute VertexData_obj::getAttribute(::String attrName){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_951_getAttribute)
HXLINE( 952)		int i;
HXDLIN( 952)		 ::starling::rendering::VertexDataAttribute attribute;
HXLINE( 954)		{
HXLINE( 954)			int _g1 = (int)0;
HXDLIN( 954)			int _g = this->_numAttributes;
HXDLIN( 954)			while((_g1 < _g)){
HXLINE( 954)				_g1 = (_g1 + (int)1);
HXDLIN( 954)				int i1 = (_g1 - (int)1);
HXLINE( 956)				attribute = ( ( ::starling::rendering::VertexDataAttribute)(::openfl::_Vector::IVector_obj::get(this->_attributes->data,i1)) );
HXLINE( 957)				if ((attribute->name == attrName)) {
HXLINE( 957)					return attribute;
            				}
            			}
            		}
HXLINE( 960)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,getAttribute,return )

int VertexData_obj::get_numVertices(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1012_get_numVertices)
HXDLIN(1012)		return this->_numVertices;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,get_numVertices,return )

int VertexData_obj::set_numVertices(int value){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1014_set_numVertices)
HXLINE(1015)		if ((value > this->_numVertices)) {
HXLINE(1017)			int oldLength = this->_numVertices;
HXDLIN(1017)			int oldLength1 = (oldLength * this->get_vertexSize());
HXLINE(1018)			int newLength = (value * this->_vertexSize);
HXLINE(1020)			if ((::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->_rawData) > oldLength1)) {
HXLINE(1022)				this->_rawData->position = oldLength1;
HXLINE(1023)				while(true){
HXLINE(1023)					 ::openfl::utils::ByteArrayData _this = this->_rawData;
HXDLIN(1023)					if (!(((_this->length - _this->position) != (int)0))) {
HXLINE(1023)						goto _hx_goto_58;
            					}
HXDLIN(1023)					this->_rawData->writeUnsignedInt((int)0);
            				}
            				_hx_goto_58:;
            			}
HXLINE(1026)			if ((::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->_rawData) < newLength)) {
HXLINE(1027)				::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(this->_rawData,newLength);
            			}
HXLINE(1029)			{
HXLINE(1029)				int _g1 = (int)0;
HXDLIN(1029)				int _g = this->_numAttributes;
HXDLIN(1029)				while((_g1 < _g)){
HXLINE(1029)					_g1 = (_g1 + (int)1);
HXDLIN(1029)					int i = (_g1 - (int)1);
HXLINE(1031)					 ::starling::rendering::VertexDataAttribute attribute = ( ( ::starling::rendering::VertexDataAttribute)(::openfl::_Vector::IVector_obj::get(this->_attributes->data,i)) );
HXLINE(1032)					if (attribute->isColor) {
HXLINE(1034)						int pos = ((this->_numVertices * this->_vertexSize) + attribute->offset);
HXLINE(1035)						{
HXLINE(1035)							int _g3 = this->_numVertices;
HXDLIN(1035)							int _g2 = value;
HXDLIN(1035)							while((_g3 < _g2)){
HXLINE(1035)								_g3 = (_g3 + (int)1);
HXDLIN(1035)								int j = (_g3 - (int)1);
HXLINE(1037)								this->_rawData->position = pos;
HXLINE(1038)								this->_rawData->writeUnsignedInt((int)-1);
HXLINE(1039)								pos = (pos + this->_vertexSize);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1045)		if ((value == (int)0)) {
HXLINE(1045)			this->_tinted = false;
            		}
HXLINE(1046)		this->_numVertices = value;
HXLINE(1047)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,set_numVertices,return )

 ::openfl::utils::ByteArrayData VertexData_obj::get_rawData(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1054_get_rawData)
HXDLIN(1054)		return this->_rawData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,get_rawData,return )

 ::starling::rendering::VertexDataFormat VertexData_obj::get_format(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1066_get_format)
HXDLIN(1066)		return this->_format;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,get_format,return )

 ::starling::rendering::VertexDataFormat VertexData_obj::set_format( ::starling::rendering::VertexDataFormat value){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1070_set_format)
HXLINE(1071)		if (hx::IsEq( this->_format,value )) {
HXLINE(1071)			return value;
            		}
HXLINE(1073)		int a;
HXDLIN(1073)		int i;
HXDLIN(1073)		int pos;
HXLINE(1074)		int srcVertexSize = this->_format->get_vertexSize();
HXLINE(1075)		int tgtVertexSize = value->get_vertexSize();
HXLINE(1076)		int numAttributes = value->get_numAttributes();
HXLINE(1078)		 ::openfl::utils::ByteArrayData _hx_tmp = ::starling::rendering::VertexData_obj::sBytes;
HXDLIN(1078)		int _hx_tmp1 = value->get_vertexSize();
HXDLIN(1078)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(_hx_tmp,(_hx_tmp1 * this->_numVertices));
HXLINE(1080)		{
HXLINE(1080)			int _g1 = (int)0;
HXDLIN(1080)			int _g = numAttributes;
HXDLIN(1080)			while((_g1 < _g)){
HXLINE(1080)				_g1 = (_g1 + (int)1);
HXDLIN(1080)				int a1 = (_g1 - (int)1);
HXLINE(1082)				 ::starling::rendering::VertexDataAttribute tgtAttr = ( ( ::starling::rendering::VertexDataAttribute)(::openfl::_Vector::IVector_obj::get(value->get_attributes()->data,a1)) );
HXLINE(1083)				 ::starling::rendering::VertexDataAttribute srcAttr = this->getAttribute(tgtAttr->name);
HXLINE(1085)				if (hx::IsNotNull( srcAttr )) {
HXLINE(1087)					pos = tgtAttr->offset;
HXLINE(1089)					{
HXLINE(1089)						int _g3 = (int)0;
HXDLIN(1089)						int _g2 = this->_numVertices;
HXDLIN(1089)						while((_g3 < _g2)){
HXLINE(1089)							_g3 = (_g3 + (int)1);
HXDLIN(1089)							int i1 = (_g3 - (int)1);
HXLINE(1091)							::starling::rendering::VertexData_obj::sBytes->position = pos;
HXLINE(1092)							 ::openfl::utils::ByteArrayData _hx_tmp2 = ::starling::rendering::VertexData_obj::sBytes;
HXDLIN(1092)							 ::openfl::utils::ByteArrayData _hx_tmp3 = this->_rawData;
HXDLIN(1092)							_hx_tmp2->writeBytes(_hx_tmp3,((srcVertexSize * i1) + srcAttr->offset),srcAttr->size);
HXLINE(1093)							pos = (pos + tgtVertexSize);
            						}
            					}
            				}
            				else {
HXLINE(1096)					if (tgtAttr->isColor) {
HXLINE(1098)						pos = tgtAttr->offset;
HXLINE(1100)						{
HXLINE(1100)							int _g31 = (int)0;
HXDLIN(1100)							int _g21 = this->_numVertices;
HXDLIN(1100)							while((_g31 < _g21)){
HXLINE(1100)								_g31 = (_g31 + (int)1);
HXDLIN(1100)								int i2 = (_g31 - (int)1);
HXLINE(1102)								::starling::rendering::VertexData_obj::sBytes->position = pos;
HXLINE(1103)								::starling::rendering::VertexData_obj::sBytes->writeUnsignedInt((int)-1);
HXLINE(1104)								pos = (pos + tgtVertexSize);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1109)		this->_rawData->clear();
HXLINE(1110)		 ::openfl::utils::ByteArrayData _hx_tmp4 = this->_rawData;
HXDLIN(1110)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(_hx_tmp4,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(::starling::rendering::VertexData_obj::sBytes));
HXLINE(1111)		this->_rawData->writeBytes(::starling::rendering::VertexData_obj::sBytes,null(),null());
HXLINE(1112)		::starling::rendering::VertexData_obj::sBytes->clear();
HXLINE(1114)		this->_format = value;
HXLINE(1115)		this->_attributes = this->_format->get_attributes();
HXLINE(1116)		this->_numAttributes = ::openfl::_Vector::IVector_obj::get_length(this->_attributes->data);
HXLINE(1117)		this->_vertexSize = this->_format->get_vertexSize();
HXLINE(1118)		int _hx_tmp5;
HXDLIN(1118)		if (this->_format->hasAttribute(HX_("position",a9,a0,fa,ca))) {
HXLINE(1118)			_hx_tmp5 = this->_format->getOffset(HX_("position",a9,a0,fa,ca));
            		}
            		else {
HXLINE(1118)			_hx_tmp5 = (int)0;
            		}
HXDLIN(1118)		this->_posOffset = _hx_tmp5;
HXLINE(1119)		int _hx_tmp6;
HXDLIN(1119)		if (this->_format->hasAttribute(HX_("color",63,71,5c,4a))) {
HXLINE(1119)			_hx_tmp6 = this->_format->getOffset(HX_("color",63,71,5c,4a));
            		}
            		else {
HXLINE(1119)			_hx_tmp6 = (int)0;
            		}
HXDLIN(1119)		this->_colOffset = _hx_tmp6;
HXLINE(1121)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,set_format,return )

bool VertexData_obj::get_tinted(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1130_get_tinted)
HXDLIN(1130)		return this->_tinted;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,get_tinted,return )

bool VertexData_obj::set_tinted(bool value){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1131_set_tinted)
HXDLIN(1131)		return (this->_tinted = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,set_tinted,return )

::String VertexData_obj::get_formatString(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1137_get_formatString)
HXDLIN(1137)		return this->_format->get_formatString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,get_formatString,return )

int VertexData_obj::get_vertexSize(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1144_get_vertexSize)
HXDLIN(1144)		return this->_vertexSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,get_vertexSize,return )

int VertexData_obj::get_vertexSizeIn32Bits(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1151_get_vertexSizeIn32Bits)
HXDLIN(1151)		return ::Std_obj::_hx_int(((Float)this->_vertexSize / (Float)(int)4));
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,get_vertexSizeIn32Bits,return )

int VertexData_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1158_get_size)
HXDLIN(1158)		return ::Std_obj::_hx_int((this->_numVertices * this->_vertexSize));
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,get_size,return )

int VertexData_obj::get_sizeIn32Bits(){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_1165_get_sizeIn32Bits)
HXDLIN(1165)		return ::Std_obj::_hx_int(((Float)(this->_numVertices * this->_vertexSize) / (Float)(int)4));
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexData_obj,get_sizeIn32Bits,return )

 ::openfl::geom::Point VertexData_obj::sHelperPoint;

 ::openfl::geom::Vector3D VertexData_obj::sHelperPoint3D;

 ::openfl::utils::ByteArrayData VertexData_obj::sBytes;

int VertexData_obj::switchEndian(int value){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_965_switchEndian)
HXDLIN( 965)		return ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)hx::UShr(value,(int)8) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)hx::UShr(value,(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)hx::UShr(value,(int)24) & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,switchEndian,return )

int VertexData_obj::premultiplyAlpha(int rgba){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_972_premultiplyAlpha)
HXLINE( 973)		int alpha = ((int)rgba & (int)(int)255);
HXLINE( 975)		if ((alpha == (int)255)) {
HXLINE( 975)			return rgba;
            		}
            		else {
HXLINE( 978)			int _hx_int = alpha;
HXDLIN( 978)			Float factor;
HXDLIN( 978)			if ((_hx_int < (int)0)) {
HXLINE( 978)				factor = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE( 978)				factor = (_hx_int + ((Float)0.0));
            			}
HXDLIN( 978)			Float factor1 = ((Float)factor / (Float)((Float)255.0));
HXLINE( 979)			int int1 = ((int)hx::UShr(rgba,(int)24) & (int)(int)255);
HXDLIN( 979)			Float r;
HXDLIN( 979)			if ((int1 < (int)0)) {
HXLINE( 979)				r = (((Float)4294967296.0) + int1);
            			}
            			else {
HXLINE( 979)				r = (int1 + ((Float)0.0));
            			}
HXDLIN( 979)			int r1 = ::Std_obj::_hx_int((r * factor1));
HXLINE( 980)			int int2 = ((int)hx::UShr(rgba,(int)16) & (int)(int)255);
HXDLIN( 980)			Float g;
HXDLIN( 980)			if ((int2 < (int)0)) {
HXLINE( 980)				g = (((Float)4294967296.0) + int2);
            			}
            			else {
HXLINE( 980)				g = (int2 + ((Float)0.0));
            			}
HXDLIN( 980)			int g1 = ::Std_obj::_hx_int((g * factor1));
HXLINE( 981)			int int3 = ((int)hx::UShr(rgba,(int)8) & (int)(int)255);
HXDLIN( 981)			Float b;
HXDLIN( 981)			if ((int3 < (int)0)) {
HXLINE( 981)				b = (((Float)4294967296.0) + int3);
            			}
            			else {
HXLINE( 981)				b = (int3 + ((Float)0.0));
            			}
HXDLIN( 981)			int b1 = ::Std_obj::_hx_int((b * factor1));
HXLINE( 983)			return ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)alpha);
            		}
HXLINE( 975)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,premultiplyAlpha,return )

int VertexData_obj::unmultiplyAlpha(int rgba){
            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_990_unmultiplyAlpha)
HXLINE( 991)		int alpha = ((int)rgba & (int)(int)255);
HXLINE( 993)		bool _hx_tmp;
HXDLIN( 993)		if ((alpha != (int)255)) {
HXLINE( 993)			_hx_tmp = (alpha == (int)0);
            		}
            		else {
HXLINE( 993)			_hx_tmp = true;
            		}
HXDLIN( 993)		if (_hx_tmp) {
HXLINE( 993)			return rgba;
            		}
            		else {
HXLINE( 996)			int _hx_int = alpha;
HXDLIN( 996)			Float factor;
HXDLIN( 996)			if ((_hx_int < (int)0)) {
HXLINE( 996)				factor = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE( 996)				factor = (_hx_int + ((Float)0.0));
            			}
HXDLIN( 996)			Float factor1 = ((Float)factor / (Float)((Float)255.0));
HXLINE( 997)			int int1 = ((int)hx::UShr(rgba,(int)24) & (int)(int)255);
HXDLIN( 997)			Float r;
HXDLIN( 997)			if ((int1 < (int)0)) {
HXLINE( 997)				r = (((Float)4294967296.0) + int1);
            			}
            			else {
HXLINE( 997)				r = (int1 + ((Float)0.0));
            			}
HXDLIN( 997)			int r1 = ::Std_obj::_hx_int(((Float)r / (Float)factor1));
HXLINE( 998)			int int2 = ((int)hx::UShr(rgba,(int)16) & (int)(int)255);
HXDLIN( 998)			Float g;
HXDLIN( 998)			if ((int2 < (int)0)) {
HXLINE( 998)				g = (((Float)4294967296.0) + int2);
            			}
            			else {
HXLINE( 998)				g = (int2 + ((Float)0.0));
            			}
HXDLIN( 998)			int g1 = ::Std_obj::_hx_int(((Float)g / (Float)factor1));
HXLINE( 999)			int int3 = ((int)hx::UShr(rgba,(int)8) & (int)(int)255);
HXDLIN( 999)			Float b;
HXDLIN( 999)			if ((int3 < (int)0)) {
HXLINE( 999)				b = (((Float)4294967296.0) + int3);
            			}
            			else {
HXLINE( 999)				b = (int3 + ((Float)0.0));
            			}
HXDLIN( 999)			int b1 = ::Std_obj::_hx_int(((Float)b / (Float)factor1));
HXLINE(1001)			return ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)alpha);
            		}
HXLINE( 993)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VertexData_obj,unmultiplyAlpha,return )


hx::ObjectPtr< VertexData_obj > VertexData_obj::__new( ::Dynamic format,hx::Null< int >  __o_initialCapacity) {
	hx::ObjectPtr< VertexData_obj > __this = new VertexData_obj();
	__this->__construct(format,__o_initialCapacity);
	return __this;
}

hx::ObjectPtr< VertexData_obj > VertexData_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic format,hx::Null< int >  __o_initialCapacity) {
	VertexData_obj *__this = (VertexData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VertexData_obj), true, "starling.rendering.VertexData"));
	*(void **)__this = VertexData_obj::_hx_vtable;
	__this->__construct(format,__o_initialCapacity);
	return __this;
}

VertexData_obj::VertexData_obj()
{
}

void VertexData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VertexData);
	HX_MARK_MEMBER_NAME(_rawData,"_rawData");
	HX_MARK_MEMBER_NAME(_numVertices,"_numVertices");
	HX_MARK_MEMBER_NAME(_format,"_format");
	HX_MARK_MEMBER_NAME(_attributes,"_attributes");
	HX_MARK_MEMBER_NAME(_numAttributes,"_numAttributes");
	HX_MARK_MEMBER_NAME(_premultipliedAlpha,"_premultipliedAlpha");
	HX_MARK_MEMBER_NAME(_tinted,"_tinted");
	HX_MARK_MEMBER_NAME(_posOffset,"_posOffset");
	HX_MARK_MEMBER_NAME(_colOffset,"_colOffset");
	HX_MARK_MEMBER_NAME(_vertexSize,"_vertexSize");
	HX_MARK_END_CLASS();
}

void VertexData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_rawData,"_rawData");
	HX_VISIT_MEMBER_NAME(_numVertices,"_numVertices");
	HX_VISIT_MEMBER_NAME(_format,"_format");
	HX_VISIT_MEMBER_NAME(_attributes,"_attributes");
	HX_VISIT_MEMBER_NAME(_numAttributes,"_numAttributes");
	HX_VISIT_MEMBER_NAME(_premultipliedAlpha,"_premultipliedAlpha");
	HX_VISIT_MEMBER_NAME(_tinted,"_tinted");
	HX_VISIT_MEMBER_NAME(_posOffset,"_posOffset");
	HX_VISIT_MEMBER_NAME(_colOffset,"_colOffset");
	HX_VISIT_MEMBER_NAME(_vertexSize,"_vertexSize");
}

hx::Val VertexData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"trim") ) { return hx::Val( trim_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"copyTo") ) { return hx::Val( copyTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_format() ); }
		if (HX_FIELD_EQ(inName,"tinted") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tinted() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_format") ) { return hx::Val( _format ); }
		if (HX_FIELD_EQ(inName,"_tinted") ) { return hx::Val( _tinted ); }
		if (HX_FIELD_EQ(inName,"getSize") ) { return hx::Val( getSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"rawData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rawData() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_rawData") ) { return hx::Val( _rawData ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFloat") ) { return hx::Val( getFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFloat") ) { return hx::Val( setFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPoint") ) { return hx::Val( getPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPoint") ) { return hx::Val( setPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getColor") ) { return hx::Val( getColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"setColor") ) { return hx::Val( setColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAlpha") ) { return hx::Val( getAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAlpha") ) { return hx::Val( setAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"colorize") ) { return hx::Val( colorize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFormat") ) { return hx::Val( getFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"getOffset") ) { return hx::Val( getOffset_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_posOffset") ) { return hx::Val( _posOffset ); }
		if (HX_FIELD_EQ(inName,"_colOffset") ) { return hx::Val( _colOffset ); }
		if (HX_FIELD_EQ(inName,"getPoint3D") ) { return hx::Val( getPoint3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPoint3D") ) { return hx::Val( setPoint3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPoint4D") ) { return hx::Val( getPoint4D_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPoint4D") ) { return hx::Val( setPoint4D_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_format") ) { return hx::Val( get_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_format") ) { return hx::Val( set_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tinted") ) { return hx::Val( get_tinted_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tinted") ) { return hx::Val( set_tinted_dyn() ); }
		if (HX_FIELD_EQ(inName,"vertexSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_vertexSize() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_attributes") ) { return hx::Val( _attributes ); }
		if (HX_FIELD_EQ(inName,"_vertexSize") ) { return hx::Val( _vertexSize ); }
		if (HX_FIELD_EQ(inName,"scaleAlphas") ) { return hx::Val( scaleAlphas_dyn() ); }
		if (HX_FIELD_EQ(inName,"numVertices") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numVertices() ); }
		if (HX_FIELD_EQ(inName,"get_rawData") ) { return hx::Val( get_rawData_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_numVertices") ) { return hx::Val( _numVertices ); }
		if (HX_FIELD_EQ(inName,"updateTinted") ) { return hx::Val( updateTinted_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasAttribute") ) { return hx::Val( hasAttribute_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAttribute") ) { return hx::Val( getAttribute_dyn() ); }
		if (HX_FIELD_EQ(inName,"formatString") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_formatString() ); }
		if (HX_FIELD_EQ(inName,"sizeIn32Bits") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_sizeIn32Bits() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_numAttributes") ) { return hx::Val( _numAttributes ); }
		if (HX_FIELD_EQ(inName,"getUnsignedInt") ) { return hx::Val( getUnsignedInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setUnsignedInt") ) { return hx::Val( setUnsignedInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexSize") ) { return hx::Val( get_vertexSize_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"copyAttributeTo") ) { return hx::Val( copyAttributeTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformPoints") ) { return hx::Val( transformPoints_dyn() ); }
		if (HX_FIELD_EQ(inName,"translatePoints") ) { return hx::Val( translatePoints_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSizeIn32Bits") ) { return hx::Val( getSizeIn32Bits_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numVertices") ) { return hx::Val( get_numVertices_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_numVertices") ) { return hx::Val( set_numVertices_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_formatString") ) { return hx::Val( get_formatString_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_sizeIn32Bits") ) { return hx::Val( get_sizeIn32Bits_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getOffsetIn32Bits") ) { return hx::Val( getOffsetIn32Bits_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getBoundsProjected") ) { return hx::Val( getBoundsProjected_dyn() ); }
		if (HX_FIELD_EQ(inName,"premultipliedAlpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_premultipliedAlpha() ); }
		if (HX_FIELD_EQ(inName,"createVertexBuffer") ) { return hx::Val( createVertexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"vertexSizeIn32Bits") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_vertexSizeIn32Bits() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_premultipliedAlpha") ) { return hx::Val( _premultipliedAlpha ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"uploadToVertexBuffer") ) { return hx::Val( uploadToVertexBuffer_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setPremultipliedAlpha") ) { return hx::Val( setPremultipliedAlpha_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_premultipliedAlpha") ) { return hx::Val( get_premultipliedAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_premultipliedAlpha") ) { return hx::Val( set_premultipliedAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexSizeIn32Bits") ) { return hx::Val( get_vertexSizeIn32Bits_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"copyAttributeTo_internal") ) { return hx::Val( copyAttributeTo_internal_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool VertexData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sBytes") ) { outValue = ( sBytes ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sHelperPoint") ) { outValue = ( sHelperPoint ); return true; }
		if (HX_FIELD_EQ(inName,"switchEndian") ) { outValue = switchEndian_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sHelperPoint3D") ) { outValue = ( sHelperPoint3D ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"premultiplyAlpha") ) { outValue = premultiplyAlpha_dyn(); return true; }
	}
	return false;
}

hx::Val VertexData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_format(inValue.Cast<  ::starling::rendering::VertexDataFormat >()) ); }
		if (HX_FIELD_EQ(inName,"tinted") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tinted(inValue.Cast< bool >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_format") ) { _format=inValue.Cast<  ::starling::rendering::VertexDataFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tinted") ) { _tinted=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_rawData") ) { _rawData=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_posOffset") ) { _posOffset=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_colOffset") ) { _colOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_attributes") ) { _attributes=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_vertexSize") ) { _vertexSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numVertices") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_numVertices(inValue.Cast< int >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_numVertices") ) { _numVertices=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_numAttributes") ) { _numAttributes=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"premultipliedAlpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_premultipliedAlpha(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_premultipliedAlpha") ) { _premultipliedAlpha=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool VertexData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sBytes") ) { sBytes=ioValue.Cast<  ::openfl::utils::ByteArrayData >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sHelperPoint") ) { sHelperPoint=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sHelperPoint3D") ) { sHelperPoint3D=ioValue.Cast<  ::openfl::geom::Vector3D >(); return true; }
	}
	return false;
}

void VertexData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_rawData","\xb3","\xc5","\xd0","\x38"));
	outFields->push(HX_HCSTRING("_numVertices","\x60","\xbe","\x35","\xbc"));
	outFields->push(HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c"));
	outFields->push(HX_HCSTRING("_attributes","\xf6","\x75","\xfb","\x69"));
	outFields->push(HX_HCSTRING("_numAttributes","\xfe","\x4e","\x5b","\xb0"));
	outFields->push(HX_HCSTRING("_premultipliedAlpha","\x47","\x12","\x37","\xfa"));
	outFields->push(HX_HCSTRING("_tinted","\xb9","\xab","\xfd","\x8d"));
	outFields->push(HX_HCSTRING("_posOffset","\x08","\x4c","\x18","\xb5"));
	outFields->push(HX_HCSTRING("_colOffset","\xb4","\xb7","\xbf","\xdb"));
	outFields->push(HX_HCSTRING("_vertexSize","\x64","\xf7","\x99","\xaf"));
	outFields->push(HX_HCSTRING("premultipliedAlpha","\x28","\x8e","\x5c","\x1a"));
	outFields->push(HX_HCSTRING("numVertices","\x5f","\x10","\x2c","\x56"));
	outFields->push(HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("tinted","\x1a","\x9a","\x86","\x1f"));
	outFields->push(HX_HCSTRING("formatString","\x68","\xef","\x44","\x4e"));
	outFields->push(HX_HCSTRING("vertexSize","\x45","\x2a","\x10","\xdd"));
	outFields->push(HX_HCSTRING("vertexSizeIn32Bits","\x4f","\x98","\x23","\x6b"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("sizeIn32Bits","\xcb","\xea","\xbb","\xc8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VertexData_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(VertexData_obj,_rawData),HX_HCSTRING("_rawData","\xb3","\xc5","\xd0","\x38")},
	{hx::fsInt,(int)offsetof(VertexData_obj,_numVertices),HX_HCSTRING("_numVertices","\x60","\xbe","\x35","\xbc")},
	{hx::fsObject /*::starling::rendering::VertexDataFormat*/ ,(int)offsetof(VertexData_obj,_format),HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(VertexData_obj,_attributes),HX_HCSTRING("_attributes","\xf6","\x75","\xfb","\x69")},
	{hx::fsInt,(int)offsetof(VertexData_obj,_numAttributes),HX_HCSTRING("_numAttributes","\xfe","\x4e","\x5b","\xb0")},
	{hx::fsBool,(int)offsetof(VertexData_obj,_premultipliedAlpha),HX_HCSTRING("_premultipliedAlpha","\x47","\x12","\x37","\xfa")},
	{hx::fsBool,(int)offsetof(VertexData_obj,_tinted),HX_HCSTRING("_tinted","\xb9","\xab","\xfd","\x8d")},
	{hx::fsInt,(int)offsetof(VertexData_obj,_posOffset),HX_HCSTRING("_posOffset","\x08","\x4c","\x18","\xb5")},
	{hx::fsInt,(int)offsetof(VertexData_obj,_colOffset),HX_HCSTRING("_colOffset","\xb4","\xb7","\xbf","\xdb")},
	{hx::fsInt,(int)offsetof(VertexData_obj,_vertexSize),HX_HCSTRING("_vertexSize","\x64","\xf7","\x99","\xaf")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo VertexData_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &VertexData_obj::sHelperPoint,HX_HCSTRING("sHelperPoint","\x4f","\x0e","\x3c","\xff")},
	{hx::fsObject /*::openfl::geom::Vector3D*/ ,(void *) &VertexData_obj::sHelperPoint3D,HX_HCSTRING("sHelperPoint3D","\xc0","\xac","\x17","\x51")},
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(void *) &VertexData_obj::sBytes,HX_HCSTRING("sBytes","\xf8","\xf6","\xcf","\x4b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String VertexData_obj_sMemberFields[] = {
	HX_HCSTRING("_rawData","\xb3","\xc5","\xd0","\x38"),
	HX_HCSTRING("_numVertices","\x60","\xbe","\x35","\xbc"),
	HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c"),
	HX_HCSTRING("_attributes","\xf6","\x75","\xfb","\x69"),
	HX_HCSTRING("_numAttributes","\xfe","\x4e","\x5b","\xb0"),
	HX_HCSTRING("_premultipliedAlpha","\x47","\x12","\x37","\xfa"),
	HX_HCSTRING("_tinted","\xb9","\xab","\xfd","\x8d"),
	HX_HCSTRING("_posOffset","\x08","\x4c","\x18","\xb5"),
	HX_HCSTRING("_colOffset","\xb4","\xb7","\xbf","\xdb"),
	HX_HCSTRING("_vertexSize","\x64","\xf7","\x99","\xaf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("copyAttributeTo","\x02","\x37","\x5c","\x6e"),
	HX_HCSTRING("copyAttributeTo_internal","\x5a","\x37","\x86","\xd6"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("getUnsignedInt","\x04","\xfe","\x95","\x65"),
	HX_HCSTRING("setUnsignedInt","\x78","\xe6","\xb5","\x85"),
	HX_HCSTRING("getFloat","\x26","\xd5","\x6d","\x62"),
	HX_HCSTRING("setFloat","\x9a","\x2e","\xcb","\x10"),
	HX_HCSTRING("getPoint","\xda","\xc3","\x66","\x26"),
	HX_HCSTRING("setPoint","\x4e","\x1d","\xc4","\xd4"),
	HX_HCSTRING("getPoint3D","\x0b","\x1b","\x83","\xa0"),
	HX_HCSTRING("setPoint3D","\x7f","\xb9","\x00","\xa4"),
	HX_HCSTRING("getPoint4D","\xea","\x1b","\x83","\xa0"),
	HX_HCSTRING("setPoint4D","\x5e","\xba","\x00","\xa4"),
	HX_HCSTRING("getColor","\xed","\x80","\x33","\xaa"),
	HX_HCSTRING("setColor","\x61","\xda","\x90","\x58"),
	HX_HCSTRING("getAlpha","\xe8","\xb6","\x6d","\x81"),
	HX_HCSTRING("setAlpha","\x5c","\x10","\xcb","\x2f"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getBoundsProjected","\x4d","\x96","\x9b","\x34"),
	HX_HCSTRING("get_premultipliedAlpha","\x71","\x07","\xf1","\x73"),
	HX_HCSTRING("set_premultipliedAlpha","\xe5","\x83","\x9c","\xa7"),
	HX_HCSTRING("setPremultipliedAlpha","\x6a","\xde","\x7f","\xcd"),
	HX_HCSTRING("updateTinted","\x03","\x41","\x4a","\x1f"),
	HX_HCSTRING("transformPoints","\xaf","\x8c","\x83","\x32"),
	HX_HCSTRING("translatePoints","\x11","\xcc","\xc7","\x50"),
	HX_HCSTRING("scaleAlphas","\x7f","\x91","\x3f","\x2e"),
	HX_HCSTRING("colorize","\xd1","\x65","\x00","\x8a"),
	HX_HCSTRING("getFormat","\x6d","\x18","\xe5","\x79"),
	HX_HCSTRING("getSize","\x77","\x50","\xd6","\x1e"),
	HX_HCSTRING("getSizeIn32Bits","\x81","\x40","\xa6","\xeb"),
	HX_HCSTRING("getOffset","\xc9","\x20","\x96","\xdc"),
	HX_HCSTRING("getOffsetIn32Bits","\xd3","\xb2","\x09","\xb7"),
	HX_HCSTRING("hasAttribute","\x62","\x55","\x42","\x88"),
	HX_HCSTRING("createVertexBuffer","\xa0","\xec","\xc7","\x6a"),
	HX_HCSTRING("uploadToVertexBuffer","\x80","\xab","\x34","\x8f"),
	HX_HCSTRING("getAttribute","\xa6","\x0c","\x47","\x0a"),
	HX_HCSTRING("get_numVertices","\xf6","\xc7","\x0d","\x17"),
	HX_HCSTRING("set_numVertices","\x02","\x45","\xd9","\x12"),
	HX_HCSTRING("get_rawData","\x49","\xcc","\x12","\x85"),
	HX_HCSTRING("get_format","\x00","\xff","\x15","\xee"),
	HX_HCSTRING("set_format","\x74","\x9d","\x93","\xf1"),
	HX_HCSTRING("get_tinted","\xe3","\x09","\x0e","\x10"),
	HX_HCSTRING("set_tinted","\x57","\xa8","\x8b","\x13"),
	HX_HCSTRING("get_formatString","\xf1","\xdb","\xe3","\x52"),
	HX_HCSTRING("get_vertexSize","\x8e","\xb2","\x05","\x53"),
	HX_HCSTRING("get_vertexSizeIn32Bits","\x98","\x11","\xb8","\xc4"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("get_sizeIn32Bits","\x54","\xd7","\x5a","\xcd"),
	::String(null()) };

static void VertexData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VertexData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(VertexData_obj::sHelperPoint,"sHelperPoint");
	HX_MARK_MEMBER_NAME(VertexData_obj::sHelperPoint3D,"sHelperPoint3D");
	HX_MARK_MEMBER_NAME(VertexData_obj::sBytes,"sBytes");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VertexData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VertexData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(VertexData_obj::sHelperPoint,"sHelperPoint");
	HX_VISIT_MEMBER_NAME(VertexData_obj::sHelperPoint3D,"sHelperPoint3D");
	HX_VISIT_MEMBER_NAME(VertexData_obj::sBytes,"sBytes");
};

#endif

hx::Class VertexData_obj::__mClass;

static ::String VertexData_obj_sStaticFields[] = {
	HX_HCSTRING("sHelperPoint","\x4f","\x0e","\x3c","\xff"),
	HX_HCSTRING("sHelperPoint3D","\xc0","\xac","\x17","\x51"),
	HX_HCSTRING("sBytes","\xf8","\xf6","\xcf","\x4b"),
	HX_HCSTRING("switchEndian","\xaf","\x45","\xa8","\x16"),
	HX_HCSTRING("premultiplyAlpha","\x97","\xf8","\x9d","\xb6"),
	HX_HCSTRING("unmultiplyAlpha","\xa1","\xc8","\x96","\x28"),
	::String(null())
};

void VertexData_obj::__register()
{
	hx::Object *dummy = new VertexData_obj;
	VertexData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.rendering.VertexData","\x16","\x73","\x39","\x6e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VertexData_obj::__GetStatic;
	__mClass->mSetStaticField = &VertexData_obj::__SetStatic;
	__mClass->mMarkFunc = VertexData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(VertexData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VertexData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VertexData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VertexData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VertexData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VertexData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VertexData_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_122_boot)
HXDLIN( 122)		sHelperPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_123_boot)
HXDLIN( 123)		sHelperPoint3D =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_d8443237b718e07d_124_boot)
HXDLIN( 124)			 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN( 124)			return this1;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d8443237b718e07d_124_boot)
HXDLIN( 124)		sBytes =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace starling
} // end namespace rendering
