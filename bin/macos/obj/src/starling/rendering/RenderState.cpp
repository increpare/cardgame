// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DCompareMode_Context3DCompareMode_Impl_
#include <openfl/display3D/_Context3DCompareMode/Context3DCompareMode_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTriangleFace_Context3DTriangleFace_Impl_
#include <openfl/display3D/_Context3DTriangleFace/Context3DTriangleFace_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif
#ifndef INCLUDED_starling_utils_Pool
#include <starling/utils/Pool.h>
#endif
#ifndef INCLUDED_starling_utils_RectangleUtil
#include <starling/utils/RectangleUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3eaab28b48f029b5_70_new,"starling.rendering.RenderState","new",0x94a160e5,"starling.rendering.RenderState.new","starling/rendering/RenderState.hx",70,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_132_copyFrom,"starling.rendering.RenderState","copyFrom",0x0e60791a,"starling.rendering.RenderState.copyFrom","starling/rendering/RenderState.hx",132,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_170_reset,"starling.rendering.RenderState","reset",0x55fec594,"starling.rendering.RenderState.reset","starling/rendering/RenderState.hx",170,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_195_transformModelviewMatrix,"starling.rendering.RenderState","transformModelviewMatrix",0x0be5cebe,"starling.rendering.RenderState.transformModelviewMatrix","starling/rendering/RenderState.hx",195,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_203_transformModelviewMatrix3D,"starling.rendering.RenderState","transformModelviewMatrix3D",0x2c05a6ef,"starling.rendering.RenderState.transformModelviewMatrix3D","starling/rendering/RenderState.hx",203,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_228_setProjectionMatrix,"starling.rendering.RenderState","setProjectionMatrix",0xb4988e77,"starling.rendering.RenderState.setProjectionMatrix","starling/rendering/RenderState.hx",228,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_239_setProjectionMatrixChanged,"starling.rendering.RenderState","setProjectionMatrixChanged",0xba46173d,"starling.rendering.RenderState.setProjectionMatrixChanged","starling/rendering/RenderState.hx",239,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_246_setModelviewMatricesToIdentity,"starling.rendering.RenderState","setModelviewMatricesToIdentity",0x1caff35a,"starling.rendering.RenderState.setModelviewMatricesToIdentity","starling/rendering/RenderState.hx",246,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_255_get_modelviewMatrix,"starling.rendering.RenderState","get_modelviewMatrix",0xdb10610b,"starling.rendering.RenderState.get_modelviewMatrix","starling/rendering/RenderState.hx",255,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_256_set_modelviewMatrix,"starling.rendering.RenderState","set_modelviewMatrix",0x17ad5417,"starling.rendering.RenderState.set_modelviewMatrix","starling/rendering/RenderState.hx",256,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_262_get_modelviewMatrix3D,"starling.rendering.RenderState","get_modelviewMatrix3D",0x08b3267c,"starling.rendering.RenderState.get_modelviewMatrix3D","starling/rendering/RenderState.hx",262,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_264_set_modelviewMatrix3D,"starling.rendering.RenderState","set_modelviewMatrix3D",0x5cbbf488,"starling.rendering.RenderState.set_modelviewMatrix3D","starling/rendering/RenderState.hx",264,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_284_get_projectionMatrix3D,"starling.rendering.RenderState","get_projectionMatrix3D",0xb51c90c5,"starling.rendering.RenderState.get_projectionMatrix3D","starling/rendering/RenderState.hx",284,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_286_set_projectionMatrix3D,"starling.rendering.RenderState","set_projectionMatrix3D",0xe8c80d39,"starling.rendering.RenderState.set_projectionMatrix3D","starling/rendering/RenderState.hx",286,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_296_get_mvpMatrix3D,"starling.rendering.RenderState","get_mvpMatrix3D",0xa39248d5,"starling.rendering.RenderState.get_mvpMatrix3D","starling/rendering/RenderState.hx",296,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_316_setRenderTarget,"starling.rendering.RenderState","setRenderTarget",0xec5f8e0e,"starling.rendering.RenderState.setRenderTarget","starling/rendering/RenderState.hx",316,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_338_get_alpha,"starling.rendering.RenderState","get_alpha",0x5ec045fa,"starling.rendering.RenderState.get_alpha","starling/rendering/RenderState.hx",338,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_339_set_alpha,"starling.rendering.RenderState","set_alpha",0x42113206,"starling.rendering.RenderState.set_alpha","starling/rendering/RenderState.hx",339,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_348_get_blendMode,"starling.rendering.RenderState","get_blendMode",0xb40b00f0,"starling.rendering.RenderState.get_blendMode","starling/rendering/RenderState.hx",348,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_350_set_blendMode,"starling.rendering.RenderState","set_blendMode",0xf910e2fc,"starling.rendering.RenderState.set_blendMode","starling/rendering/RenderState.hx",350,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_363_get_renderTarget,"starling.rendering.RenderState","get_renderTarget",0x9d66a42b,"starling.rendering.RenderState.get_renderTarget","starling/rendering/RenderState.hx",363,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_364_set_renderTarget,"starling.rendering.RenderState","set_renderTarget",0xf3a8919f,"starling.rendering.RenderState.set_renderTarget","starling/rendering/RenderState.hx",364,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_370_get_renderTargetBase,"starling.rendering.RenderState","get_renderTargetBase",0xedada9dc,"starling.rendering.RenderState.get_renderTargetBase","starling/rendering/RenderState.hx",370,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_377_get_renderTargetOptions,"starling.rendering.RenderState","get_renderTargetOptions",0x153e6273,"starling.rendering.RenderState.get_renderTargetOptions","starling/rendering/RenderState.hx",377,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_386_get_culling,"starling.rendering.RenderState","get_culling",0x654b600c,"starling.rendering.RenderState.get_culling","starling/rendering/RenderState.hx",386,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_392_set_culling,"starling.rendering.RenderState","set_culling",0x6fb86718,"starling.rendering.RenderState.set_culling","starling/rendering/RenderState.hx",392,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_411_get_depthMask,"starling.rendering.RenderState","get_depthMask",0x46acb82b,"starling.rendering.RenderState.get_depthMask","starling/rendering/RenderState.hx",411,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_415_set_depthMask,"starling.rendering.RenderState","set_depthMask",0x8bb29a37,"starling.rendering.RenderState.set_depthMask","starling/rendering/RenderState.hx",415,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_429_get_depthTest,"starling.rendering.RenderState","get_depthTest",0x4b503f91,"starling.rendering.RenderState.get_depthTest","starling/rendering/RenderState.hx",429,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_435_set_depthTest,"starling.rendering.RenderState","set_depthTest",0x9056219d,"starling.rendering.RenderState.set_depthTest","starling/rendering/RenderState.hx",435,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_455_get_clipRect,"starling.rendering.RenderState","get_clipRect",0xd1b4faf8,"starling.rendering.RenderState.get_clipRect","starling/rendering/RenderState.hx",455,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_457_set_clipRect,"starling.rendering.RenderState","set_clipRect",0xe6ae1e6c,"starling.rendering.RenderState.set_clipRect","starling/rendering/RenderState.hx",457,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_480_get_renderTargetAntiAlias,"starling.rendering.RenderState","get_renderTargetAntiAlias",0x321124e3,"starling.rendering.RenderState.get_renderTargetAntiAlias","starling/rendering/RenderState.hx",480,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_488_get_renderTargetSupportsDepthAndStencil,"starling.rendering.RenderState","get_renderTargetSupportsDepthAndStencil",0xe4eabeb9,"starling.rendering.RenderState.get_renderTargetSupportsDepthAndStencil","starling/rendering/RenderState.hx",488,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_494_get_is3D,"starling.rendering.RenderState","get_is3D",0x0b78ffff,"starling.rendering.RenderState.get_is3D","starling/rendering/RenderState.hx",494,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_502_get_onDrawRequired,"starling.rendering.RenderState","get_onDrawRequired",0x2b592b26,"starling.rendering.RenderState.get_onDrawRequired","starling/rendering/RenderState.hx",502,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_503_set_onDrawRequired,"starling.rendering.RenderState","set_onDrawRequired",0x08085d9a,"starling.rendering.RenderState.set_onDrawRequired","starling/rendering/RenderState.hx",503,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_76_boot,"starling.rendering.RenderState","boot",0x70ac680d,"starling.rendering.RenderState.boot","starling/rendering/RenderState.hx",76,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_80_boot,"starling.rendering.RenderState","boot",0x70ac680d,"starling.rendering.RenderState.boot","starling/rendering/RenderState.hx",80,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_96_boot,"starling.rendering.RenderState","boot",0x70ac680d,"starling.rendering.RenderState.boot","starling/rendering/RenderState.hx",96,0xd5c7dced)
HX_LOCAL_STACK_FRAME(_hx_pos_3eaab28b48f029b5_97_boot,"starling.rendering.RenderState","boot",0x70ac680d,"starling.rendering.RenderState.boot","starling/rendering/RenderState.hx",97,0xd5c7dced)
namespace starling{
namespace rendering{

void RenderState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_70_new)
HXLINE(  86)		this->_miscOptions = (int)0;
HXLINE( 127)		this->reset();
            	}

Dynamic RenderState_obj::__CreateEmpty() { return new RenderState_obj; }

void *RenderState_obj::_hx_vtable = 0;

Dynamic RenderState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderState_obj > _hx_result = new RenderState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RenderState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x60433d1b;
}

void RenderState_obj::copyFrom( ::starling::rendering::RenderState renderState){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_132_copyFrom)
HXLINE( 133)		if (hx::IsNotNull( this->_onDrawRequired )) {
HXLINE( 135)			 ::openfl::display3D::textures::TextureBase currentTarget;
HXDLIN( 135)			if (hx::IsNotNull( this->_renderTarget )) {
HXLINE( 135)				currentTarget = this->_renderTarget->get_base();
            			}
            			else {
HXLINE( 135)				currentTarget = null();
            			}
HXLINE( 136)			 ::openfl::display3D::textures::TextureBase nextTarget;
HXDLIN( 136)			if (hx::IsNotNull( renderState->_renderTarget )) {
HXLINE( 136)				nextTarget = renderState->_renderTarget->get_base();
            			}
            			else {
HXLINE( 136)				nextTarget = null();
            			}
HXLINE( 137)			bool cullingChanges = (((int)this->_miscOptions & (int)(int)3840) != ((int)renderState->_miscOptions & (int)(int)3840));
HXLINE( 138)			bool clipRectChanges;
HXDLIN( 138)			bool clipRectChanges1;
HXDLIN( 138)			if (hx::IsNull( this->_clipRect )) {
HXLINE( 138)				clipRectChanges1 = hx::IsNotNull( renderState->_clipRect );
            			}
            			else {
HXLINE( 138)				clipRectChanges1 = true;
            			}
HXDLIN( 138)			if (clipRectChanges1) {
HXLINE( 138)				clipRectChanges = !(::starling::utils::RectangleUtil_obj::compare(this->_clipRect,renderState->_clipRect,null()));
            			}
            			else {
HXLINE( 138)				clipRectChanges = false;
            			}
HXLINE( 141)			bool _hx_tmp;
HXDLIN( 141)			bool _hx_tmp1;
HXDLIN( 141)			bool _hx_tmp2;
HXDLIN( 141)			if ((this->_blendMode == renderState->_blendMode)) {
HXLINE( 141)				_hx_tmp2 = hx::IsNotEq( currentTarget,nextTarget );
            			}
            			else {
HXLINE( 141)				_hx_tmp2 = true;
            			}
HXDLIN( 141)			if (!(_hx_tmp2)) {
HXLINE( 141)				_hx_tmp1 = clipRectChanges;
            			}
            			else {
HXLINE( 141)				_hx_tmp1 = true;
            			}
HXDLIN( 141)			if (!(_hx_tmp1)) {
HXLINE( 141)				_hx_tmp = cullingChanges;
            			}
            			else {
HXLINE( 141)				_hx_tmp = true;
            			}
HXDLIN( 141)			if (_hx_tmp) {
HXLINE( 144)				this->_onDrawRequired();
            			}
            		}
HXLINE( 148)		this->_alpha = renderState->_alpha;
HXLINE( 149)		this->_blendMode = renderState->_blendMode;
HXLINE( 150)		this->_renderTarget = renderState->_renderTarget;
HXLINE( 151)		this->_miscOptions = renderState->_miscOptions;
HXLINE( 152)		this->_modelviewMatrix->copyFrom(renderState->_modelviewMatrix);
HXLINE( 154)		if ((this->_projectionMatrix3DRev != renderState->_projectionMatrix3DRev)) {
HXLINE( 156)			this->_projectionMatrix3DRev = renderState->_projectionMatrix3DRev;
HXLINE( 157)			this->_projectionMatrix3D->copyFrom(renderState->_projectionMatrix3D);
            		}
HXLINE( 160)		bool _hx_tmp3;
HXDLIN( 160)		if (hx::IsNull( this->_modelviewMatrix3D )) {
HXLINE( 160)			_hx_tmp3 = hx::IsNotNull( renderState->_modelviewMatrix3D );
            		}
            		else {
HXLINE( 160)			_hx_tmp3 = true;
            		}
HXDLIN( 160)		if (_hx_tmp3) {
HXLINE( 161)			this->set_modelviewMatrix3D(renderState->_modelviewMatrix3D);
            		}
HXLINE( 163)		bool _hx_tmp4;
HXDLIN( 163)		if (hx::IsNull( this->_clipRect )) {
HXLINE( 163)			_hx_tmp4 = hx::IsNotNull( renderState->_clipRect );
            		}
            		else {
HXLINE( 163)			_hx_tmp4 = true;
            		}
HXDLIN( 163)		if (_hx_tmp4) {
HXLINE( 164)			this->set_clipRect(renderState->_clipRect);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,copyFrom,(void))

void RenderState_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_3eaab28b48f029b5_170_reset)
HXLINE( 171)		this->set_alpha(((Float)1.0));
HXLINE( 172)		this->set_blendMode(HX_("normal",27,72,69,30));
HXLINE( 173)		this->set_culling(::openfl::display3D::_Context3DTriangleFace::Context3DTriangleFace_Impl__obj::toString((int)3));
HXLINE( 174)		this->set_depthMask(false);
HXLINE( 175)		this->set_depthTest(::openfl::display3D::_Context3DCompareMode::Context3DCompareMode_Impl__obj::toString((int)0));
HXLINE( 176)		this->set_modelviewMatrix3D(null());
HXLINE( 177)		this->set_renderTarget(null());
HXLINE( 178)		this->set_clipRect(null());
HXLINE( 179)		this->_projectionMatrix3DRev = (int)0;
HXLINE( 181)		if (hx::IsNotNull( this->_modelviewMatrix )) {
HXLINE( 181)			this->_modelviewMatrix->identity();
            		}
            		else {
HXLINE( 182)			this->_modelviewMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 184)		if (hx::IsNotNull( this->_projectionMatrix3D )) {
HXLINE( 184)			this->_projectionMatrix3D->identity();
            		}
            		else {
HXLINE( 185)			this->_projectionMatrix3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            		}
HXLINE( 187)		if (hx::IsNull( this->_mvpMatrix3D )) {
HXLINE( 187)			this->_mvpMatrix3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,reset,(void))

void RenderState_obj::transformModelviewMatrix( ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_195_transformModelviewMatrix)
HXDLIN( 195)		::starling::utils::MatrixUtil_obj::prependMatrix(this->_modelviewMatrix,matrix);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,transformModelviewMatrix,(void))

void RenderState_obj::transformModelviewMatrix3D( ::openfl::geom::Matrix3D matrix){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_203_transformModelviewMatrix3D)
HXLINE( 204)		if (hx::IsNull( this->_modelviewMatrix3D )) {
HXLINE( 205)			this->_modelviewMatrix3D = ::starling::utils::Pool_obj::getMatrix3D(null());
            		}
HXLINE( 207)		 ::openfl::geom::Matrix3D _hx_tmp = this->_modelviewMatrix3D;
HXDLIN( 207)		_hx_tmp->prepend(::starling::utils::MatrixUtil_obj::convertTo3D(this->_modelviewMatrix,::starling::rendering::RenderState_obj::sMatrix3D));
HXLINE( 208)		this->_modelviewMatrix3D->prepend(matrix);
HXLINE( 209)		this->_modelviewMatrix->identity();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,transformModelviewMatrix3D,(void))

void RenderState_obj::setProjectionMatrix(Float x,Float y,Float width,Float height,hx::Null< Float >  __o_stageWidth,hx::Null< Float >  __o_stageHeight, ::openfl::geom::Vector3D cameraPos){
Float stageWidth = __o_stageWidth.Default(0);
Float stageHeight = __o_stageHeight.Default(0);
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_228_setProjectionMatrix)
HXLINE( 229)		this->_projectionMatrix3DRev = ++::starling::rendering::RenderState_obj::sProjectionMatrix3DRev;
HXLINE( 230)		::starling::utils::MatrixUtil_obj::createPerspectiveProjectionMatrix(x,y,width,height,stageWidth,stageHeight,cameraPos,this->_projectionMatrix3D);
            	}


HX_DEFINE_DYNAMIC_FUNC7(RenderState_obj,setProjectionMatrix,(void))

void RenderState_obj::setProjectionMatrixChanged(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_239_setProjectionMatrixChanged)
HXDLIN( 239)		this->_projectionMatrix3DRev = ++::starling::rendering::RenderState_obj::sProjectionMatrix3DRev;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,setProjectionMatrixChanged,(void))

void RenderState_obj::setModelviewMatricesToIdentity(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_246_setModelviewMatricesToIdentity)
HXLINE( 247)		this->_modelviewMatrix->identity();
HXLINE( 248)		if (hx::IsNotNull( this->_modelviewMatrix3D )) {
HXLINE( 248)			this->_modelviewMatrix3D->identity();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,setModelviewMatricesToIdentity,(void))

 ::openfl::geom::Matrix RenderState_obj::get_modelviewMatrix(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_255_get_modelviewMatrix)
HXDLIN( 255)		return this->_modelviewMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_modelviewMatrix,return )

 ::openfl::geom::Matrix RenderState_obj::set_modelviewMatrix( ::openfl::geom::Matrix value){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_256_set_modelviewMatrix)
HXDLIN( 256)		this->_modelviewMatrix->copyFrom(value);
HXDLIN( 256)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_modelviewMatrix,return )

 ::openfl::geom::Matrix3D RenderState_obj::get_modelviewMatrix3D(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_262_get_modelviewMatrix3D)
HXDLIN( 262)		return this->_modelviewMatrix3D;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_modelviewMatrix3D,return )

 ::openfl::geom::Matrix3D RenderState_obj::set_modelviewMatrix3D( ::openfl::geom::Matrix3D value){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_264_set_modelviewMatrix3D)
HXLINE( 265)		if (hx::IsNotNull( value )) {
HXLINE( 267)			if (hx::IsNull( this->_modelviewMatrix3D )) {
HXLINE( 267)				this->_modelviewMatrix3D = ::starling::utils::Pool_obj::getMatrix3D(false);
            			}
HXLINE( 268)			this->_modelviewMatrix3D->copyFrom(value);
            		}
            		else {
HXLINE( 270)			if (hx::IsNotNull( this->_modelviewMatrix3D )) {
HXLINE( 272)				::starling::utils::Pool_obj::putMatrix3D(this->_modelviewMatrix3D);
HXLINE( 273)				this->_modelviewMatrix3D = null();
            			}
            		}
HXLINE( 275)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_modelviewMatrix3D,return )

 ::openfl::geom::Matrix3D RenderState_obj::get_projectionMatrix3D(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_284_get_projectionMatrix3D)
HXDLIN( 284)		return this->_projectionMatrix3D;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_projectionMatrix3D,return )

 ::openfl::geom::Matrix3D RenderState_obj::set_projectionMatrix3D( ::openfl::geom::Matrix3D value){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_286_set_projectionMatrix3D)
HXLINE( 287)		this->setProjectionMatrixChanged();
HXLINE( 288)		this->_projectionMatrix3D->copyFrom(value);
HXLINE( 289)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_projectionMatrix3D,return )

 ::openfl::geom::Matrix3D RenderState_obj::get_mvpMatrix3D(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_296_get_mvpMatrix3D)
HXLINE( 297)		this->_mvpMatrix3D->copyFrom(this->_projectionMatrix3D);
HXLINE( 298)		if (hx::IsNotNull( this->_modelviewMatrix3D )) {
HXLINE( 298)			this->_mvpMatrix3D->prepend(this->_modelviewMatrix3D);
            		}
HXLINE( 299)		 ::openfl::geom::Matrix3D _hx_tmp = this->_mvpMatrix3D;
HXDLIN( 299)		_hx_tmp->prepend(::starling::utils::MatrixUtil_obj::convertTo3D(this->_modelviewMatrix,::starling::rendering::RenderState_obj::sMatrix3D));
HXLINE( 300)		return this->_mvpMatrix3D;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_mvpMatrix3D,return )

void RenderState_obj::setRenderTarget( ::starling::textures::Texture target,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< int >  __o_antiAlias){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
int antiAlias = __o_antiAlias.Default(0);
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_316_setRenderTarget)
HXLINE( 317)		 ::openfl::display3D::textures::TextureBase currentTarget;
HXDLIN( 317)		if (hx::IsNotNull( this->_renderTarget )) {
HXLINE( 317)			currentTarget = this->_renderTarget->get_base();
            		}
            		else {
HXLINE( 317)			currentTarget = null();
            		}
HXLINE( 318)		 ::openfl::display3D::textures::TextureBase newTarget;
HXDLIN( 318)		if (hx::IsNotNull( target )) {
HXLINE( 318)			newTarget = target->get_base();
            		}
            		else {
HXLINE( 318)			newTarget = null();
            		}
HXLINE( 319)		int a = ::Std_obj::_hx_int(::starling::utils::MathUtil_obj::min(antiAlias,(int)15));
HXDLIN( 319)		int newOptions;
HXDLIN( 319)		if (enableDepthAndStencil) {
HXLINE( 319)			newOptions = (int)1;
            		}
            		else {
HXLINE( 319)			newOptions = (int)0;
            		}
HXDLIN( 319)		int newOptions1 = ((int)a | (int)((int)newOptions << (int)(int)4));
HXLINE( 320)		bool optionsChange = (newOptions1 != ((int)this->_miscOptions & (int)(int)255));
HXLINE( 322)		bool _hx_tmp;
HXDLIN( 322)		if (hx::IsEq( currentTarget,newTarget )) {
HXLINE( 322)			_hx_tmp = optionsChange;
            		}
            		else {
HXLINE( 322)			_hx_tmp = true;
            		}
HXDLIN( 322)		if (_hx_tmp) {
HXLINE( 324)			if (hx::IsNotNull( this->_onDrawRequired )) {
HXLINE( 324)				this->_onDrawRequired();
            			}
HXLINE( 326)			this->_renderTarget = target;
HXLINE( 327)			this->_miscOptions = ((int)((int)this->_miscOptions & (int)(int)-256) | (int)newOptions1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(RenderState_obj,setRenderTarget,(void))

Float RenderState_obj::get_alpha(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_338_get_alpha)
HXDLIN( 338)		return this->_alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_alpha,return )

Float RenderState_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_339_set_alpha)
HXDLIN( 339)		return (this->_alpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_alpha,return )

::String RenderState_obj::get_blendMode(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_348_get_blendMode)
HXDLIN( 348)		return this->_blendMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_blendMode,return )

::String RenderState_obj::set_blendMode(::String value){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_350_set_blendMode)
HXLINE( 351)		bool _hx_tmp;
HXDLIN( 351)		if ((value != HX_("auto",6f,df,76,40))) {
HXLINE( 351)			_hx_tmp = (this->_blendMode != value);
            		}
            		else {
HXLINE( 351)			_hx_tmp = false;
            		}
HXDLIN( 351)		if (_hx_tmp) {
HXLINE( 353)			if (hx::IsNotNull( this->_onDrawRequired )) {
HXLINE( 353)				this->_onDrawRequired();
            			}
HXLINE( 354)			this->_blendMode = value;
            		}
HXLINE( 356)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_blendMode,return )

 ::starling::textures::Texture RenderState_obj::get_renderTarget(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_363_get_renderTarget)
HXDLIN( 363)		return this->_renderTarget;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_renderTarget,return )

 ::starling::textures::Texture RenderState_obj::set_renderTarget( ::starling::textures::Texture value){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_364_set_renderTarget)
HXDLIN( 364)		this->setRenderTarget(value,null(),null());
HXDLIN( 364)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_renderTarget,return )

 ::openfl::display3D::textures::TextureBase RenderState_obj::get_renderTargetBase(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_370_get_renderTargetBase)
HXDLIN( 370)		if (hx::IsNotNull( this->_renderTarget )) {
HXDLIN( 370)			return this->_renderTarget->get_base();
            		}
            		else {
HXDLIN( 370)			return null();
            		}
HXDLIN( 370)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_renderTargetBase,return )

int RenderState_obj::get_renderTargetOptions(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_377_get_renderTargetOptions)
HXDLIN( 377)		return ((int)this->_miscOptions & (int)(int)255);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_renderTargetOptions,return )

::String RenderState_obj::get_culling(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_386_get_culling)
HXLINE( 387)		int index = hx::UShr(((int)this->_miscOptions & (int)(int)3840),(int)8);
HXLINE( 388)		return ::openfl::display3D::_Context3DTriangleFace::Context3DTriangleFace_Impl__obj::toString(( (int)(::openfl::_Vector::IVector_obj::get(::starling::rendering::RenderState_obj::CULLING_VALUES->data,index)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_culling,return )

::String RenderState_obj::set_culling(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_3eaab28b48f029b5_392_set_culling)
HXLINE( 393)		if ((this->get_culling() != value)) {
HXLINE( 395)			if (hx::IsNotNull( this->_onDrawRequired )) {
HXLINE( 395)				this->_onDrawRequired();
            			}
HXLINE( 396)			 ::openfl::_Vector::AbstractVector this1 = ::starling::rendering::RenderState_obj::CULLING_VALUES;
HXDLIN( 396)			 ::Dynamic x = ::openfl::display3D::_Context3DTriangleFace::Context3DTriangleFace_Impl__obj::fromString(value);
HXDLIN( 396)			int index = ::openfl::_Vector::IVector_obj::indexOf(this1->data,x,(int)0);
HXLINE( 398)			if ((index == (int)-1)) {
HXLINE( 398)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid culling mode",fc,1d,df,05)));
            			}
HXLINE( 400)			this->_miscOptions = ((int)((int)this->_miscOptions & (int)(int)-3841) | (int)((int)index << (int)(int)8));
            		}
HXLINE( 402)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_culling,return )

bool RenderState_obj::get_depthMask(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_411_get_depthMask)
HXDLIN( 411)		return (((int)this->_miscOptions & (int)(int)61440) != (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_depthMask,return )

bool RenderState_obj::set_depthMask(bool value){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_415_set_depthMask)
HXLINE( 416)		if ((this->get_depthMask() != value)) {
HXLINE( 418)			if (hx::IsNotNull( this->_onDrawRequired )) {
HXLINE( 418)				this->_onDrawRequired();
            			}
HXLINE( 419)			int _hx_tmp;
HXDLIN( 419)			if (value) {
HXLINE( 419)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE( 419)				_hx_tmp = (int)0;
            			}
HXDLIN( 419)			this->_miscOptions = ((int)((int)this->_miscOptions & (int)(int)-61441) | (int)((int)_hx_tmp << (int)(int)12));
            		}
HXLINE( 421)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_depthMask,return )

::String RenderState_obj::get_depthTest(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_429_get_depthTest)
HXLINE( 430)		int index = hx::UShr(((int)this->_miscOptions & (int)(int)983040),(int)16);
HXLINE( 431)		return ::openfl::display3D::_Context3DCompareMode::Context3DCompareMode_Impl__obj::toString(( (int)(::openfl::_Vector::IVector_obj::get(::starling::rendering::RenderState_obj::COMPARE_VALUES->data,index)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_depthTest,return )

::String RenderState_obj::set_depthTest(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_3eaab28b48f029b5_435_set_depthTest)
HXLINE( 436)		if ((this->get_depthTest() != value)) {
HXLINE( 438)			if (hx::IsNotNull( this->_onDrawRequired )) {
HXLINE( 438)				this->_onDrawRequired();
            			}
HXLINE( 440)			 ::openfl::_Vector::AbstractVector this1 = ::starling::rendering::RenderState_obj::COMPARE_VALUES;
HXDLIN( 440)			 ::Dynamic x = ::openfl::display3D::_Context3DCompareMode::Context3DCompareMode_Impl__obj::fromString(value);
HXDLIN( 440)			int index = ::openfl::_Vector::IVector_obj::indexOf(this1->data,x,(int)0);
HXLINE( 441)			if ((index == (int)-1)) {
HXLINE( 441)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid compare mode",a7,47,c4,1c)));
            			}
HXLINE( 443)			this->_miscOptions = ((int)((int)this->_miscOptions & (int)(int)-983041) | (int)((int)index << (int)(int)16));
            		}
HXLINE( 445)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_depthTest,return )

 ::openfl::geom::Rectangle RenderState_obj::get_clipRect(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_455_get_clipRect)
HXDLIN( 455)		return this->_clipRect;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_clipRect,return )

 ::openfl::geom::Rectangle RenderState_obj::set_clipRect( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_457_set_clipRect)
HXLINE( 458)		if (!(::starling::utils::RectangleUtil_obj::compare(this->_clipRect,value,null()))) {
HXLINE( 460)			if (hx::IsNotNull( this->_onDrawRequired )) {
HXLINE( 460)				this->_onDrawRequired();
            			}
HXLINE( 461)			if (hx::IsNotNull( value )) {
HXLINE( 463)				if (hx::IsNull( this->_clipRect )) {
HXLINE( 463)					this->_clipRect = ::starling::utils::Pool_obj::getRectangle(null(),null(),null(),null());
            				}
HXLINE( 464)				this->_clipRect->copyFrom(value);
            			}
            			else {
HXLINE( 466)				if (hx::IsNotNull( this->_clipRect )) {
HXLINE( 468)					::starling::utils::Pool_obj::putRectangle(this->_clipRect);
HXLINE( 469)					this->_clipRect = null();
            				}
            			}
            		}
HXLINE( 472)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_clipRect,return )

int RenderState_obj::get_renderTargetAntiAlias(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_480_get_renderTargetAntiAlias)
HXDLIN( 480)		return ((int)this->_miscOptions & (int)(int)15);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_renderTargetAntiAlias,return )

bool RenderState_obj::get_renderTargetSupportsDepthAndStencil(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_488_get_renderTargetSupportsDepthAndStencil)
HXDLIN( 488)		return (((int)this->_miscOptions & (int)(int)240) != (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_renderTargetSupportsDepthAndStencil,return )

bool RenderState_obj::get_is3D(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_494_get_is3D)
HXDLIN( 494)		return hx::IsNotNull( this->_modelviewMatrix3D );
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_is3D,return )

 ::Dynamic RenderState_obj::get_onDrawRequired(){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_502_get_onDrawRequired)
HXDLIN( 502)		return this->_onDrawRequired;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderState_obj,get_onDrawRequired,return )

 ::Dynamic RenderState_obj::set_onDrawRequired( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_503_set_onDrawRequired)
HXDLIN( 503)		return (this->_onDrawRequired = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderState_obj,set_onDrawRequired,return )

 ::openfl::_Vector::AbstractVector RenderState_obj::CULLING_VALUES;

 ::openfl::_Vector::AbstractVector RenderState_obj::COMPARE_VALUES;

 ::openfl::geom::Matrix3D RenderState_obj::sMatrix3D;

int RenderState_obj::sProjectionMatrix3DRev;


hx::ObjectPtr< RenderState_obj > RenderState_obj::__new() {
	hx::ObjectPtr< RenderState_obj > __this = new RenderState_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< RenderState_obj > RenderState_obj::__alloc(hx::Ctx *_hx_ctx) {
	RenderState_obj *__this = (RenderState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RenderState_obj), true, "starling.rendering.RenderState"));
	*(void **)__this = RenderState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RenderState_obj::RenderState_obj()
{
}

void RenderState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderState);
	HX_MARK_MEMBER_NAME(_alpha,"_alpha");
	HX_MARK_MEMBER_NAME(_blendMode,"_blendMode");
	HX_MARK_MEMBER_NAME(_modelviewMatrix,"_modelviewMatrix");
	HX_MARK_MEMBER_NAME(_miscOptions,"_miscOptions");
	HX_MARK_MEMBER_NAME(_clipRect,"_clipRect");
	HX_MARK_MEMBER_NAME(_renderTarget,"_renderTarget");
	HX_MARK_MEMBER_NAME(_onDrawRequired,"_onDrawRequired");
	HX_MARK_MEMBER_NAME(_modelviewMatrix3D,"_modelviewMatrix3D");
	HX_MARK_MEMBER_NAME(_projectionMatrix3D,"_projectionMatrix3D");
	HX_MARK_MEMBER_NAME(_projectionMatrix3DRev,"_projectionMatrix3DRev");
	HX_MARK_MEMBER_NAME(_mvpMatrix3D,"_mvpMatrix3D");
	HX_MARK_MEMBER_NAME(renderTargetOptions,"renderTargetOptions");
	HX_MARK_END_CLASS();
}

void RenderState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_alpha,"_alpha");
	HX_VISIT_MEMBER_NAME(_blendMode,"_blendMode");
	HX_VISIT_MEMBER_NAME(_modelviewMatrix,"_modelviewMatrix");
	HX_VISIT_MEMBER_NAME(_miscOptions,"_miscOptions");
	HX_VISIT_MEMBER_NAME(_clipRect,"_clipRect");
	HX_VISIT_MEMBER_NAME(_renderTarget,"_renderTarget");
	HX_VISIT_MEMBER_NAME(_onDrawRequired,"_onDrawRequired");
	HX_VISIT_MEMBER_NAME(_modelviewMatrix3D,"_modelviewMatrix3D");
	HX_VISIT_MEMBER_NAME(_projectionMatrix3D,"_projectionMatrix3D");
	HX_VISIT_MEMBER_NAME(_projectionMatrix3DRev,"_projectionMatrix3DRev");
	HX_VISIT_MEMBER_NAME(_mvpMatrix3D,"_mvpMatrix3D");
	HX_VISIT_MEMBER_NAME(renderTargetOptions,"renderTargetOptions");
}

hx::Val RenderState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"is3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_is3D() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alpha() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_alpha") ) { return hx::Val( _alpha ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"culling") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_culling() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"clipRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_clipRect() ); }
		if (HX_FIELD_EQ(inName,"get_is3D") ) { return hx::Val( get_is3D_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_clipRect") ) { return hx::Val( _clipRect ); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blendMode() ); }
		if (HX_FIELD_EQ(inName,"depthMask") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_depthMask() ); }
		if (HX_FIELD_EQ(inName,"depthTest") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_depthTest() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_blendMode") ) { return hx::Val( _blendMode ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mvpMatrix3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mvpMatrix3D() ); }
		if (HX_FIELD_EQ(inName,"get_culling") ) { return hx::Val( get_culling_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_culling") ) { return hx::Val( set_culling_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_miscOptions") ) { return hx::Val( _miscOptions ); }
		if (HX_FIELD_EQ(inName,"_mvpMatrix3D") ) { return hx::Val( _mvpMatrix3D ); }
		if (HX_FIELD_EQ(inName,"renderTarget") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_renderTarget() ); }
		if (HX_FIELD_EQ(inName,"get_clipRect") ) { return hx::Val( get_clipRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_clipRect") ) { return hx::Val( set_clipRect_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_renderTarget") ) { return hx::Val( _renderTarget ); }
		if (HX_FIELD_EQ(inName,"get_blendMode") ) { return hx::Val( get_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blendMode") ) { return hx::Val( set_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_depthMask") ) { return hx::Val( get_depthMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_depthMask") ) { return hx::Val( set_depthMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_depthTest") ) { return hx::Val( get_depthTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_depthTest") ) { return hx::Val( set_depthTest_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onDrawRequired") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onDrawRequired() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_onDrawRequired") ) { return hx::Val( _onDrawRequired ); }
		if (HX_FIELD_EQ(inName,"modelviewMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_modelviewMatrix() ); }
		if (HX_FIELD_EQ(inName,"get_mvpMatrix3D") ) { return hx::Val( get_mvpMatrix3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRenderTarget") ) { return hx::Val( setRenderTarget_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_modelviewMatrix") ) { return hx::Val( _modelviewMatrix ); }
		if (HX_FIELD_EQ(inName,"get_renderTarget") ) { return hx::Val( get_renderTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_renderTarget") ) { return hx::Val( set_renderTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderTargetBase") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_renderTargetBase() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"modelviewMatrix3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_modelviewMatrix3D() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_modelviewMatrix3D") ) { return hx::Val( _modelviewMatrix3D ); }
		if (HX_FIELD_EQ(inName,"projectionMatrix3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_projectionMatrix3D() ); }
		if (HX_FIELD_EQ(inName,"get_onDrawRequired") ) { return hx::Val( get_onDrawRequired_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onDrawRequired") ) { return hx::Val( set_onDrawRequired_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_projectionMatrix3D") ) { return hx::Val( _projectionMatrix3D ); }
		if (HX_FIELD_EQ(inName,"setProjectionMatrix") ) { return hx::Val( setProjectionMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_modelviewMatrix") ) { return hx::Val( get_modelviewMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_modelviewMatrix") ) { return hx::Val( set_modelviewMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderTargetOptions") ) { return hx::Val( renderTargetOptions ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_renderTargetBase") ) { return hx::Val( get_renderTargetBase_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_modelviewMatrix3D") ) { return hx::Val( get_modelviewMatrix3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_modelviewMatrix3D") ) { return hx::Val( set_modelviewMatrix3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderTargetAntiAlias") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_renderTargetAntiAlias() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_projectionMatrix3DRev") ) { return hx::Val( _projectionMatrix3DRev ); }
		if (HX_FIELD_EQ(inName,"get_projectionMatrix3D") ) { return hx::Val( get_projectionMatrix3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_projectionMatrix3D") ) { return hx::Val( set_projectionMatrix3D_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_renderTargetOptions") ) { return hx::Val( get_renderTargetOptions_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"transformModelviewMatrix") ) { return hx::Val( transformModelviewMatrix_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"get_renderTargetAntiAlias") ) { return hx::Val( get_renderTargetAntiAlias_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"transformModelviewMatrix3D") ) { return hx::Val( transformModelviewMatrix3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"setProjectionMatrixChanged") ) { return hx::Val( setProjectionMatrixChanged_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"setModelviewMatricesToIdentity") ) { return hx::Val( setModelviewMatricesToIdentity_dyn() ); }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"renderTargetSupportsDepthAndStencil") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_renderTargetSupportsDepthAndStencil() ); }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"get_renderTargetSupportsDepthAndStencil") ) { return hx::Val( get_renderTargetSupportsDepthAndStencil_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RenderState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"sMatrix3D") ) { outValue = ( sMatrix3D ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"CULLING_VALUES") ) { outValue = ( CULLING_VALUES ); return true; }
		if (HX_FIELD_EQ(inName,"COMPARE_VALUES") ) { outValue = ( COMPARE_VALUES ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"sProjectionMatrix3DRev") ) { outValue = ( sProjectionMatrix3DRev ); return true; }
	}
	return false;
}

hx::Val RenderState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_alpha") ) { _alpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"culling") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_culling(inValue.Cast< ::String >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"clipRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clipRect(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_clipRect") ) { _clipRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blendMode(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"depthMask") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_depthMask(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"depthTest") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_depthTest(inValue.Cast< ::String >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_blendMode") ) { _blendMode=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_miscOptions") ) { _miscOptions=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mvpMatrix3D") ) { _mvpMatrix3D=inValue.Cast<  ::openfl::geom::Matrix3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderTarget") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_renderTarget(inValue.Cast<  ::starling::textures::Texture >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_renderTarget") ) { _renderTarget=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onDrawRequired") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onDrawRequired(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_onDrawRequired") ) { _onDrawRequired=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modelviewMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_modelviewMatrix(inValue.Cast<  ::openfl::geom::Matrix >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_modelviewMatrix") ) { _modelviewMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"modelviewMatrix3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_modelviewMatrix3D(inValue.Cast<  ::openfl::geom::Matrix3D >()) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_modelviewMatrix3D") ) { _modelviewMatrix3D=inValue.Cast<  ::openfl::geom::Matrix3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"projectionMatrix3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_projectionMatrix3D(inValue.Cast<  ::openfl::geom::Matrix3D >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_projectionMatrix3D") ) { _projectionMatrix3D=inValue.Cast<  ::openfl::geom::Matrix3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderTargetOptions") ) { renderTargetOptions=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_projectionMatrix3DRev") ) { _projectionMatrix3DRev=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool RenderState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"sMatrix3D") ) { sMatrix3D=ioValue.Cast<  ::openfl::geom::Matrix3D >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"CULLING_VALUES") ) { CULLING_VALUES=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		if (HX_FIELD_EQ(inName,"COMPARE_VALUES") ) { COMPARE_VALUES=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"sProjectionMatrix3DRev") ) { sProjectionMatrix3DRev=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void RenderState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_alpha","\x9f","\xee","\x7d","\x1d"));
	outFields->push(HX_HCSTRING("_blendMode","\x15","\x60","\xda","\x67"));
	outFields->push(HX_HCSTRING("_modelviewMatrix","\xf0","\x29","\xcb","\x4d"));
	outFields->push(HX_HCSTRING("_miscOptions","\xd3","\x2b","\x8c","\xb1"));
	outFields->push(HX_HCSTRING("_clipRect","\x73","\x87","\x00","\xa0"));
	outFields->push(HX_HCSTRING("_renderTarget","\x26","\x8a","\xb1","\xd8"));
	outFields->push(HX_HCSTRING("_modelviewMatrix3D","\xa1","\xb2","\x5d","\xb6"));
	outFields->push(HX_HCSTRING("_projectionMatrix3D","\x00","\xa5","\xac","\xfc"));
	outFields->push(HX_HCSTRING("_projectionMatrix3DRev","\x43","\x0c","\x47","\x47"));
	outFields->push(HX_HCSTRING("_mvpMatrix3D","\x3a","\x7b","\x53","\x71"));
	outFields->push(HX_HCSTRING("modelviewMatrix","\x6f","\xe7","\xeb","\x62"));
	outFields->push(HX_HCSTRING("modelviewMatrix3D","\xe0","\x0d","\x48","\xe3"));
	outFields->push(HX_HCSTRING("projectionMatrix3D","\xe1","\x20","\xd2","\x1c"));
	outFields->push(HX_HCSTRING("mvpMatrix3D","\x39","\xcd","\x49","\x0b"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"));
	outFields->push(HX_HCSTRING("renderTarget","\x47","\xf7","\x42","\xf6"));
	outFields->push(HX_HCSTRING("renderTargetBase","\xf8","\xba","\xe7","\x45"));
	outFields->push(HX_HCSTRING("renderTargetOptions","\xd7","\xea","\x66","\x6c"));
	outFields->push(HX_HCSTRING("culling","\x70","\xe2","\x87","\x53"));
	outFields->push(HX_HCSTRING("depthMask","\x8f","\x9b","\xd9","\x9e"));
	outFields->push(HX_HCSTRING("depthTest","\xf5","\x22","\x7d","\xa3"));
	outFields->push(HX_HCSTRING("clipRect","\x14","\x90","\x6a","\x58"));
	outFields->push(HX_HCSTRING("renderTargetAntiAlias","\x47","\x8e","\xb7","\x0a"));
	outFields->push(HX_HCSTRING("renderTargetSupportsDepthAndStencil","\x1d","\x4f","\xe1","\xba"));
	outFields->push(HX_HCSTRING("is3D","\x1b","\xd7","\xbe","\x45"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RenderState_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(RenderState_obj,_alpha),HX_HCSTRING("_alpha","\x9f","\xee","\x7d","\x1d")},
	{hx::fsString,(int)offsetof(RenderState_obj,_blendMode),HX_HCSTRING("_blendMode","\x15","\x60","\xda","\x67")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(RenderState_obj,_modelviewMatrix),HX_HCSTRING("_modelviewMatrix","\xf0","\x29","\xcb","\x4d")},
	{hx::fsInt,(int)offsetof(RenderState_obj,_miscOptions),HX_HCSTRING("_miscOptions","\xd3","\x2b","\x8c","\xb1")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(RenderState_obj,_clipRect),HX_HCSTRING("_clipRect","\x73","\x87","\x00","\xa0")},
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(RenderState_obj,_renderTarget),HX_HCSTRING("_renderTarget","\x26","\x8a","\xb1","\xd8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(RenderState_obj,_onDrawRequired),HX_HCSTRING("_onDrawRequired","\xe1","\xc5","\xa5","\xfb")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(int)offsetof(RenderState_obj,_modelviewMatrix3D),HX_HCSTRING("_modelviewMatrix3D","\xa1","\xb2","\x5d","\xb6")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(int)offsetof(RenderState_obj,_projectionMatrix3D),HX_HCSTRING("_projectionMatrix3D","\x00","\xa5","\xac","\xfc")},
	{hx::fsInt,(int)offsetof(RenderState_obj,_projectionMatrix3DRev),HX_HCSTRING("_projectionMatrix3DRev","\x43","\x0c","\x47","\x47")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(int)offsetof(RenderState_obj,_mvpMatrix3D),HX_HCSTRING("_mvpMatrix3D","\x3a","\x7b","\x53","\x71")},
	{hx::fsInt,(int)offsetof(RenderState_obj,renderTargetOptions),HX_HCSTRING("renderTargetOptions","\xd7","\xea","\x66","\x6c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo RenderState_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &RenderState_obj::CULLING_VALUES,HX_HCSTRING("CULLING_VALUES","\x31","\x75","\x9b","\x4b")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &RenderState_obj::COMPARE_VALUES,HX_HCSTRING("COMPARE_VALUES","\x9c","\x9f","\x5e","\xc5")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(void *) &RenderState_obj::sMatrix3D,HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03")},
	{hx::fsInt,(void *) &RenderState_obj::sProjectionMatrix3DRev,HX_HCSTRING("sProjectionMatrix3DRev","\x8f","\x0b","\xf8","\x67")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String RenderState_obj_sMemberFields[] = {
	HX_HCSTRING("_alpha","\x9f","\xee","\x7d","\x1d"),
	HX_HCSTRING("_blendMode","\x15","\x60","\xda","\x67"),
	HX_HCSTRING("_modelviewMatrix","\xf0","\x29","\xcb","\x4d"),
	HX_HCSTRING("_miscOptions","\xd3","\x2b","\x8c","\xb1"),
	HX_HCSTRING("_clipRect","\x73","\x87","\x00","\xa0"),
	HX_HCSTRING("_renderTarget","\x26","\x8a","\xb1","\xd8"),
	HX_HCSTRING("_onDrawRequired","\xe1","\xc5","\xa5","\xfb"),
	HX_HCSTRING("_modelviewMatrix3D","\xa1","\xb2","\x5d","\xb6"),
	HX_HCSTRING("_projectionMatrix3D","\x00","\xa5","\xac","\xfc"),
	HX_HCSTRING("_projectionMatrix3DRev","\x43","\x0c","\x47","\x47"),
	HX_HCSTRING("_mvpMatrix3D","\x3a","\x7b","\x53","\x71"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("transformModelviewMatrix","\x63","\xbb","\xd0","\x3a"),
	HX_HCSTRING("transformModelviewMatrix3D","\xd4","\xc6","\x00","\x1d"),
	HX_HCSTRING("setProjectionMatrix","\xf2","\xe3","\x7e","\xc7"),
	HX_HCSTRING("setProjectionMatrixChanged","\x22","\x37","\x41","\xab"),
	HX_HCSTRING("setModelviewMatricesToIdentity","\xbf","\x69","\xe9","\xed"),
	HX_HCSTRING("get_modelviewMatrix","\x86","\xb6","\xf6","\xed"),
	HX_HCSTRING("set_modelviewMatrix","\x92","\xa9","\x93","\x2a"),
	HX_HCSTRING("get_modelviewMatrix3D","\xb7","\x10","\xf6","\x61"),
	HX_HCSTRING("set_modelviewMatrix3D","\xc3","\xde","\xfe","\xb5"),
	HX_HCSTRING("get_projectionMatrix3D","\x2a","\x9a","\x66","\x76"),
	HX_HCSTRING("set_projectionMatrix3D","\x9e","\x16","\x12","\xaa"),
	HX_HCSTRING("get_mvpMatrix3D","\xd0","\x84","\x2b","\xcc"),
	HX_HCSTRING("setRenderTarget","\x09","\xca","\xf8","\x14"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("get_blendMode","\x2b","\xb8","\x9b","\xcd"),
	HX_HCSTRING("set_blendMode","\x37","\x9a","\xa1","\x12"),
	HX_HCSTRING("get_renderTarget","\xd0","\xe3","\xe1","\xfa"),
	HX_HCSTRING("set_renderTarget","\x44","\xd1","\x23","\x51"),
	HX_HCSTRING("get_renderTargetBase","\x01","\x20","\x52","\x64"),
	HX_HCSTRING("renderTargetOptions","\xd7","\xea","\x66","\x6c"),
	HX_HCSTRING("get_renderTargetOptions","\x6e","\x91","\xbc","\x74"),
	HX_HCSTRING("get_culling","\x87","\x42","\x82","\xd9"),
	HX_HCSTRING("set_culling","\x93","\x49","\xef","\xe3"),
	HX_HCSTRING("get_depthMask","\x66","\x6f","\x3d","\x60"),
	HX_HCSTRING("set_depthMask","\x72","\x51","\x43","\xa5"),
	HX_HCSTRING("get_depthTest","\xcc","\xf6","\xe0","\x64"),
	HX_HCSTRING("set_depthTest","\xd8","\xd8","\xe6","\xa9"),
	HX_HCSTRING("get_clipRect","\x1d","\x44","\x84","\x0d"),
	HX_HCSTRING("set_clipRect","\x91","\x67","\x7d","\x22"),
	HX_HCSTRING("get_renderTargetAntiAlias","\x9e","\x48","\xb5","\x10"),
	HX_HCSTRING("get_renderTargetSupportsDepthAndStencil","\xb4","\xd3","\x33","\xd5"),
	HX_HCSTRING("get_is3D","\xa4","\x92","\x79","\xc5"),
	HX_HCSTRING("get_onDrawRequired","\x0b","\x5e","\xdf","\x4d"),
	HX_HCSTRING("set_onDrawRequired","\x7f","\x90","\x8e","\x2a"),
	::String(null()) };

static void RenderState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RenderState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(RenderState_obj::CULLING_VALUES,"CULLING_VALUES");
	HX_MARK_MEMBER_NAME(RenderState_obj::COMPARE_VALUES,"COMPARE_VALUES");
	HX_MARK_MEMBER_NAME(RenderState_obj::sMatrix3D,"sMatrix3D");
	HX_MARK_MEMBER_NAME(RenderState_obj::sProjectionMatrix3DRev,"sProjectionMatrix3DRev");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RenderState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RenderState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(RenderState_obj::CULLING_VALUES,"CULLING_VALUES");
	HX_VISIT_MEMBER_NAME(RenderState_obj::COMPARE_VALUES,"COMPARE_VALUES");
	HX_VISIT_MEMBER_NAME(RenderState_obj::sMatrix3D,"sMatrix3D");
	HX_VISIT_MEMBER_NAME(RenderState_obj::sProjectionMatrix3DRev,"sProjectionMatrix3DRev");
};

#endif

hx::Class RenderState_obj::__mClass;

static ::String RenderState_obj_sStaticFields[] = {
	HX_HCSTRING("CULLING_VALUES","\x31","\x75","\x9b","\x4b"),
	HX_HCSTRING("COMPARE_VALUES","\x9c","\x9f","\x5e","\xc5"),
	HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03"),
	HX_HCSTRING("sProjectionMatrix3DRev","\x8f","\x0b","\xf8","\x67"),
	::String(null())
};

void RenderState_obj::__register()
{
	hx::Object *dummy = new RenderState_obj;
	RenderState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.rendering.RenderState","\x73","\x0a","\x04","\x6b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RenderState_obj::__GetStatic;
	__mClass->mSetStaticField = &RenderState_obj::__SetStatic;
	__mClass->mMarkFunc = RenderState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(RenderState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RenderState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RenderState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RenderState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RenderState_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_3eaab28b48f029b5_76_boot)
HXDLIN(  76)			::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new(4)->init(0,(int)3)->init(1,(int)1)->init(2,(int)0)->init(3,(int)2);
HXDLIN(  76)			int length = null();
HXDLIN(  76)			bool fixed = null();
HXDLIN(  76)			 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN(  76)			{
HXDLIN(  76)				int _g1 = (int)0;
HXDLIN(  76)				int _g = a->length;
HXDLIN(  76)				while((_g1 < _g)){
HXDLIN(  76)					_g1 = (_g1 + (int)1);
HXDLIN(  76)					int i = (_g1 - (int)1);
HXDLIN(  76)					::openfl::_Vector::IVector_obj::set(vector->data,i,a->__get(i));
            				}
            			}
HXDLIN(  76)			return vector;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_76_boot)
HXDLIN(  76)		CULLING_VALUES =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_3eaab28b48f029b5_80_boot)
HXDLIN(  80)			::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new(8)->init(0,(int)0)->init(1,(int)6)->init(2,(int)4)->init(3,(int)5)->init(4,(int)1)->init(5,(int)3)->init(6,(int)2)->init(7,(int)7);
HXDLIN(  80)			int length = null();
HXDLIN(  80)			bool fixed = null();
HXDLIN(  80)			 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN(  80)			{
HXDLIN(  80)				int _g1 = (int)0;
HXDLIN(  80)				int _g = a->length;
HXDLIN(  80)				while((_g1 < _g)){
HXDLIN(  80)					_g1 = (_g1 + (int)1);
HXDLIN(  80)					int i = (_g1 - (int)1);
HXDLIN(  80)					::openfl::_Vector::IVector_obj::set(vector->data,i,a->__get(i));
            				}
            			}
HXDLIN(  80)			return vector;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_80_boot)
HXDLIN(  80)		COMPARE_VALUES =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_3eaab28b48f029b5_96_boot)
HXDLIN(  96)		sMatrix3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_3eaab28b48f029b5_97_boot)
HXDLIN(  97)		sProjectionMatrix3DRev = (int)0;
            	}
}

} // end namespace starling
} // end namespace rendering
