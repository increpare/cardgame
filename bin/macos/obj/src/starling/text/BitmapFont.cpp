// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_MeshBatch
#include <starling/display/MeshBatch.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_text_BitmapChar
#include <starling/text/BitmapChar.h>
#endif
#ifndef INCLUDED_starling_text_BitmapFont
#include <starling/text/BitmapFont.h>
#endif
#ifndef INCLUDED_starling_text_CharLocation
#include <starling/text/CharLocation.h>
#endif
#ifndef INCLUDED_starling_text_ITextCompositor
#include <starling/text/ITextCompositor.h>
#endif
#ifndef INCLUDED_starling_text_MiniBitmapFont
#include <starling/text/MiniBitmapFont.h>
#endif
#ifndef INCLUDED_starling_text_TextFormat
#include <starling/text/TextFormat.h>
#endif
#ifndef INCLUDED_starling_text_TextOptions
#include <starling/text/TextOptions.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_ArrayUtil
#include <starling/utils/ArrayUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MeshSubset
#include <starling/utils/MeshSubset.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_108_new,"starling.text.BitmapFont","new",0x3178216b,"starling.text.BitmapFont.new","starling/text/BitmapFont.hx",108,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_138_dispose,"starling.text.BitmapFont","dispose",0x18d5b32a,"starling.text.BitmapFont.dispose","starling/text/BitmapFont.hx",138,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_143_parseFontXml,"starling.text.BitmapFont","parseFontXml",0x4d851cea,"starling.text.BitmapFont.parseFontXml","starling/text/BitmapFont.hx",143,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_205_getChar,"starling.text.BitmapFont","getChar",0x71cb4117,"starling.text.BitmapFont.getChar","starling/text/BitmapFont.hx",205,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_211_addChar,"starling.text.BitmapFont","addChar",0xdb85d422,"starling.text.BitmapFont.addChar","starling/text/BitmapFont.hx",211,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_216_getCharIDs,"starling.text.BitmapFont","getCharIDs",0x855ee781,"starling.text.BitmapFont.getCharIDs","starling/text/BitmapFont.hx",216,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_227_hasChars,"starling.text.BitmapFont","hasChars",0x4c8eee38,"starling.text.BitmapFont.hasChars","starling/text/BitmapFont.hx",227,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_250_createSprite,"starling.text.BitmapFont","createSprite",0x4367d1b6,"starling.text.BitmapFont.createSprite","starling/text/BitmapFont.hx",250,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_274_fillMeshBatch,"starling.text.BitmapFont","fillMeshBatch",0x36c5c855,"starling.text.BitmapFont.fillMeshBatch","starling/text/BitmapFont.hx",274,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_297_clearMeshBatch,"starling.text.BitmapFont","clearMeshBatch",0xe2254c15,"starling.text.BitmapFont.clearMeshBatch","starling/text/BitmapFont.hx",297,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_304_arrangeChars,"starling.text.BitmapFont","arrangeChars",0xc26f7ba6,"starling.text.BitmapFont.arrangeChars","starling/text/BitmapFont.hx",304,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_483_get_name,"starling.text.BitmapFont","get_name",0x433d34e9,"starling.text.BitmapFont.get_name","starling/text/BitmapFont.hx",483,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_487_get_size,"starling.text.BitmapFont","get_size",0x4691635f,"starling.text.BitmapFont.get_size","starling/text/BitmapFont.hx",487,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_491_get_lineHeight,"starling.text.BitmapFont","get_lineHeight",0x8b2e9019,"starling.text.BitmapFont.get_lineHeight","starling/text/BitmapFont.hx",491,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_492_set_lineHeight,"starling.text.BitmapFont","set_lineHeight",0xab4e788d,"starling.text.BitmapFont.set_lineHeight","starling/text/BitmapFont.hx",492,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_496_get_smoothing,"starling.text.BitmapFont","get_smoothing",0xc6e7d616,"starling.text.BitmapFont.get_smoothing","starling/text/BitmapFont.hx",496,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_497_set_smoothing,"starling.text.BitmapFont","set_smoothing",0x0bedb822,"starling.text.BitmapFont.set_smoothing","starling/text/BitmapFont.hx",497,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_502_get_baseline,"starling.text.BitmapFont","get_baseline",0x23be4623,"starling.text.BitmapFont.get_baseline","starling/text/BitmapFont.hx",502,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_503_set_baseline,"starling.text.BitmapFont","set_baseline",0x38b76997,"starling.text.BitmapFont.set_baseline","starling/text/BitmapFont.hx",503,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_508_get_offsetX,"starling.text.BitmapFont","get_offsetX",0xc51c3d87,"starling.text.BitmapFont.get_offsetX","starling/text/BitmapFont.hx",508,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_509_set_offsetX,"starling.text.BitmapFont","set_offsetX",0xcf894493,"starling.text.BitmapFont.set_offsetX","starling/text/BitmapFont.hx",509,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_514_get_offsetY,"starling.text.BitmapFont","get_offsetY",0xc51c3d88,"starling.text.BitmapFont.get_offsetY","starling/text/BitmapFont.hx",514,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_515_set_offsetY,"starling.text.BitmapFont","set_offsetY",0xcf894494,"starling.text.BitmapFont.set_offsetY","starling/text/BitmapFont.hx",515,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_521_get_padding,"starling.text.BitmapFont","get_padding",0xbe348df3,"starling.text.BitmapFont.get_padding","starling/text/BitmapFont.hx",521,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_522_set_padding,"starling.text.BitmapFont","set_padding",0xc8a194ff,"starling.text.BitmapFont.set_padding","starling/text/BitmapFont.hx",522,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_525_get_texture,"starling.text.BitmapFont","get_texture",0x8c97fcfd,"starling.text.BitmapFont.get_texture","starling/text/BitmapFont.hx",525,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_63_boot,"starling.text.BitmapFont","boot",0x0fbe1cc7,"starling.text.BitmapFont.boot","starling/text/BitmapFont.hx",63,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_66_boot,"starling.text.BitmapFont","boot",0x0fbe1cc7,"starling.text.BitmapFont.boot","starling/text/BitmapFont.hx",66,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_68_boot,"starling.text.BitmapFont","boot",0x0fbe1cc7,"starling.text.BitmapFont.boot","starling/text/BitmapFont.hx",68,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_69_boot,"starling.text.BitmapFont","boot",0x0fbe1cc7,"starling.text.BitmapFont.boot","starling/text/BitmapFont.hx",69,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_70_boot,"starling.text.BitmapFont","boot",0x0fbe1cc7,"starling.text.BitmapFont.boot","starling/text/BitmapFont.hx",70,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_71_boot,"starling.text.BitmapFont","boot",0x0fbe1cc7,"starling.text.BitmapFont.boot","starling/text/BitmapFont.hx",71,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_85_boot,"starling.text.BitmapFont","boot",0x0fbe1cc7,"starling.text.BitmapFont.boot","starling/text/BitmapFont.hx",85,0xe1349c05)
HX_LOCAL_STACK_FRAME(_hx_pos_d31ca8c91c04ce02_86_boot,"starling.text.BitmapFont","boot",0x0fbe1cc7,"starling.text.BitmapFont.boot","starling/text/BitmapFont.hx",86,0xe1349c05)
namespace starling{
namespace text{

void BitmapFont_obj::__construct( ::starling::textures::Texture texture, ::Dynamic fontXml){
            	HX_GC_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_108_new)
HXLINE( 109)		bool _hx_tmp;
HXDLIN( 109)		if (hx::IsNotNull( fontXml )) {
HXLINE( 109)			_hx_tmp = ::Std_obj::is(fontXml,hx::ClassOf< ::String >());
            		}
            		else {
HXLINE( 109)			_hx_tmp = false;
            		}
HXDLIN( 109)		if (_hx_tmp) {
HXLINE( 111)			fontXml = ::Xml_obj::parse(( (::String)(fontXml) ))->firstElement();
            		}
HXLINE( 115)		bool _hx_tmp1;
HXDLIN( 115)		if (hx::IsNull( texture )) {
HXLINE( 115)			_hx_tmp1 = hx::IsNull( fontXml );
            		}
            		else {
HXLINE( 115)			_hx_tmp1 = false;
            		}
HXDLIN( 115)		if (_hx_tmp1) {
HXLINE( 117)			texture = ::starling::text::MiniBitmapFont_obj::get_texture();
HXLINE( 118)			fontXml = ::starling::text::MiniBitmapFont_obj::get_xml();
            		}
            		else {
HXLINE( 120)			bool _hx_tmp2;
HXDLIN( 120)			if (hx::IsNotNull( texture )) {
HXLINE( 120)				_hx_tmp2 = hx::IsNull( fontXml );
            			}
            			else {
HXLINE( 120)				_hx_tmp2 = false;
            			}
HXDLIN( 120)			if (_hx_tmp2) {
HXLINE( 122)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Set both of the 'texture' and 'fontXml' arguments to valid objects or leave both of them null.",8f,25,7e,3b)));
            			}
            		}
HXLINE( 125)		this->_hx___name = HX_("unknown",8a,23,7b,e1);
HXLINE( 126)		this->_hx___lineHeight = (this->_hx___size = (this->_hx___baseline = (int)14));
HXLINE( 127)		this->_hx___offsetX = (this->_hx___offsetY = (this->_hx___padding = ((Float)0.0)));
HXLINE( 128)		this->_hx___texture = texture;
HXLINE( 129)		this->_hx___chars =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 130)		this->_hx___helperImage =  ::starling::display::Image_obj::__alloc( HX_CTX ,texture);
HXLINE( 132)		this->parseFontXml(( ( ::Xml)(fontXml) ));
            	}

Dynamic BitmapFont_obj::__CreateEmpty() { return new BitmapFont_obj; }

void *BitmapFont_obj::_hx_vtable = 0;

Dynamic BitmapFont_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapFont_obj > _hx_result = new BitmapFont_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool BitmapFont_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x112151f3;
}

static ::starling::text::ITextCompositor_obj _hx_starling_text_BitmapFont__hx_starling_text_ITextCompositor= {
	( void (hx::Object::*)( ::starling::display::MeshBatch,Float,Float,::String, ::starling::text::TextFormat, ::starling::text::TextOptions))&::starling::text::BitmapFont_obj::fillMeshBatch,
	( void (hx::Object::*)( ::starling::display::MeshBatch))&::starling::text::BitmapFont_obj::clearMeshBatch,
	( void (hx::Object::*)())&::starling::text::BitmapFont_obj::dispose,
};

void *BitmapFont_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x09b413e2: return &_hx_starling_text_BitmapFont__hx_starling_text_ITextCompositor;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapFont_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_138_dispose)
HXDLIN( 138)		if (hx::IsNotNull( this->_hx___texture )) {
HXLINE( 139)			this->_hx___texture->dispose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,dispose,(void))

void BitmapFont_obj::parseFontXml( ::Xml fontXml){
            	HX_GC_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_143_parseFontXml)
HXLINE( 144)		Float scale = this->_hx___texture->get_scale();
HXLINE( 145)		 ::openfl::geom::Rectangle frame = this->_hx___texture->get_frame();
HXLINE( 146)		Float frameX;
HXDLIN( 146)		if (hx::IsNotNull( frame )) {
HXLINE( 146)			frameX = frame->x;
            		}
            		else {
HXLINE( 146)			frameX = (int)0;
            		}
HXLINE( 147)		Float frameY;
HXDLIN( 147)		if (hx::IsNotNull( frame )) {
HXLINE( 147)			frameY = frame->y;
            		}
            		else {
HXLINE( 147)			frameY = (int)0;
            		}
HXLINE( 149)		 ::Xml info = ( ( ::Xml)(fontXml->elementsNamed(HX_("info",6e,38,bb,45))->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 150)		if (hx::IsNull( info )) {
HXLINE( 151)			fontXml = fontXml->firstElement();
HXLINE( 152)			info = ( ( ::Xml)(fontXml->elementsNamed(HX_("info",6e,38,bb,45))->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
            		}
HXLINE( 155)		 ::Xml common = ( ( ::Xml)(fontXml->elementsNamed(HX_("common",2b,75,2e,c7))->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 156)		this->_hx___name = info->get(HX_("face",9d,b4,b5,43));
HXLINE( 157)		this->_hx___size = ((Float)::Std_obj::parseFloat(info->get(HX_("size",c1,a0,53,4c))) / (Float)scale);
HXLINE( 158)		this->_hx___lineHeight = ((Float)::Std_obj::parseFloat(common->get(HX_("lineHeight",fb,02,f4,d6))) / (Float)scale);
HXLINE( 159)		this->_hx___baseline = ((Float)::Std_obj::parseFloat(common->get(HX_("base",11,e8,10,41))) / (Float)scale);
HXLINE( 161)		if ((info->get(HX_("smooth",2e,08,6b,07)) == HX_("0",30,00,00,00))) {
HXLINE( 162)			this->set_smoothing(HX_("none",b8,12,0a,49));
            		}
HXLINE( 164)		if ((this->_hx___size <= (int)0)) {
HXLINE( 166)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 166)			_hx_tmp(((HX_("[Starling] Warning: invalid font size in '",5f,0c,b3,ba) + this->_hx___name) + HX_("' font.",c6,5a,c2,25)),hx::SourceInfo(HX_("BitmapFont.hx",00,04,8c,8e),166,HX_("starling.text.BitmapFont",f9,8f,02,3e),HX_("parseFontXml",55,67,08,f0)));
HXLINE( 167)			Float _hx_tmp1;
HXDLIN( 167)			if ((this->_hx___size == ((Float)0.0))) {
HXLINE( 167)				_hx_tmp1 = ((Float)16.0);
            			}
            			else {
HXLINE( 167)				_hx_tmp1 = (this->_hx___size * ((Float)-1.0));
            			}
HXDLIN( 167)			this->_hx___size = _hx_tmp1;
            		}
HXLINE( 170)		 ::Xml chars = ( ( ::Xml)(fontXml->elementsNamed(HX_("chars",dd,9c,b3,45))->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 171)		{
HXLINE( 171)			 ::Dynamic charElement = chars->elementsNamed(HX_("char",d6,5e,bf,41));
HXDLIN( 171)			while(( (bool)(charElement->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 171)				 ::Xml charElement1 = ( ( ::Xml)(charElement->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 173)				int id = ::Std_obj::parseInt(charElement1->get(HX_("id",db,5b,00,00)));
HXLINE( 174)				Float xOffset = ((Float)::Std_obj::parseFloat(charElement1->get(HX_("xoffset",0b,42,4f,de))) / (Float)scale);
HXLINE( 175)				Float yOffset = ((Float)::Std_obj::parseFloat(charElement1->get(HX_("yoffset",cc,b8,e4,07))) / (Float)scale);
HXLINE( 176)				Float xAdvance = ((Float)::Std_obj::parseFloat(charElement1->get(HX_("xadvance",0a,87,b1,be))) / (Float)scale);
HXLINE( 178)				 ::openfl::geom::Rectangle region =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 179)				region->x = (((Float)::Std_obj::parseFloat(charElement1->get(HX_("x",78,00,00,00))) / (Float)scale) + frameX);
HXLINE( 180)				region->y = (((Float)::Std_obj::parseFloat(charElement1->get(HX_("y",79,00,00,00))) / (Float)scale) + frameY);
HXLINE( 181)				region->width = ((Float)::Std_obj::parseFloat(charElement1->get(HX_("width",06,b6,62,ca))) / (Float)scale);
HXLINE( 182)				region->height = ((Float)::Std_obj::parseFloat(charElement1->get(HX_("height",e7,07,4c,02))) / (Float)scale);
HXLINE( 184)				 ::starling::textures::Texture texture = ::starling::textures::Texture_obj::fromTexture(this->_hx___texture,region,null(),null(),null());
HXLINE( 185)				 ::starling::text::BitmapChar bitmapChar =  ::starling::text::BitmapChar_obj::__alloc( HX_CTX ,id,texture,xOffset,yOffset,xAdvance);
HXLINE( 186)				this->addChar(id,bitmapChar);
            			}
            		}
HXLINE( 189)		if (fontXml->exists(HX_("kernings",27,b8,8b,80))) {
HXLINE( 191)			 ::Xml kernings = ( ( ::Xml)(fontXml->elementsNamed(HX_("kernings",27,b8,8b,80))->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 192)			{
HXLINE( 192)				 ::Dynamic kerningElement = kernings->elementsNamed(HX_("kerning",cc,ba,37,b0));
HXDLIN( 192)				while(( (bool)(kerningElement->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 192)					 ::Xml kerningElement1 = ( ( ::Xml)(kerningElement->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 194)					int first = ::Std_obj::parseInt(kerningElement1->get(HX_("first",30,78,9d,00)));
HXLINE( 195)					int second = ::Std_obj::parseInt(kerningElement1->get(HX_("second",74,cf,47,64)));
HXLINE( 196)					Float amount = ((Float)::Std_obj::parseFloat(kerningElement1->get(HX_("amount",d8,11,03,d5))) / (Float)scale);
HXLINE( 197)					if (this->_hx___chars->exists(second)) {
HXLINE( 197)						this->getChar(second)->addKerning(first,amount);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,parseFontXml,(void))

 ::starling::text::BitmapChar BitmapFont_obj::getChar(int charID){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_205_getChar)
HXDLIN( 205)		return this->_hx___chars->get(charID).StaticCast<  ::starling::text::BitmapChar >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,getChar,return )

void BitmapFont_obj::addChar(int charID, ::starling::text::BitmapChar bitmapChar){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_211_addChar)
HXDLIN( 211)		this->_hx___chars->set(charID,bitmapChar);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,addChar,(void))

 ::openfl::_Vector::AbstractVector BitmapFont_obj::getCharIDs( ::openfl::_Vector::AbstractVector result){
            	HX_GC_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_216_getCharIDs)
HXLINE( 217)		if (hx::IsNull( result )) {
HXLINE( 217)			int length = null();
HXDLIN( 217)			bool fixed = null();
HXDLIN( 217)			result =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
HXLINE( 219)		{
HXLINE( 219)			 ::Dynamic key = this->_hx___chars->keys();
HXDLIN( 219)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 219)				int key1 = ( (int)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 220)				int index = ::openfl::_Vector::IVector_obj::get_length(result->data);
HXDLIN( 220)				::openfl::_Vector::IVector_obj::set(result->data,index,key1);
            			}
            		}
HXLINE( 222)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,getCharIDs,return )

bool BitmapFont_obj::hasChars(::String text){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_227_hasChars)
HXLINE( 228)		if (hx::IsNull( text )) {
HXLINE( 228)			return true;
            		}
HXLINE( 230)		int charID;
HXLINE( 231)		int numChars = text.length;
HXLINE( 233)		{
HXLINE( 233)			int _g1 = (int)0;
HXDLIN( 233)			int _g = numChars;
HXDLIN( 233)			while((_g1 < _g)){
HXLINE( 233)				_g1 = (_g1 + (int)1);
HXDLIN( 233)				int i = (_g1 - (int)1);
HXLINE( 235)				charID = text.charCodeAt(i);
HXLINE( 237)				bool _hx_tmp;
HXDLIN( 237)				bool _hx_tmp1;
HXDLIN( 237)				bool _hx_tmp2;
HXDLIN( 237)				bool _hx_tmp3;
HXDLIN( 237)				if ((charID != (int)32)) {
HXLINE( 237)					_hx_tmp3 = (charID != (int)9);
            				}
            				else {
HXLINE( 237)					_hx_tmp3 = false;
            				}
HXDLIN( 237)				if (_hx_tmp3) {
HXLINE( 237)					_hx_tmp2 = (charID != (int)10);
            				}
            				else {
HXLINE( 237)					_hx_tmp2 = false;
            				}
HXDLIN( 237)				if (_hx_tmp2) {
HXLINE( 237)					_hx_tmp1 = (charID != (int)13);
            				}
            				else {
HXLINE( 237)					_hx_tmp1 = false;
            				}
HXDLIN( 237)				if (_hx_tmp1) {
HXLINE( 237)					_hx_tmp = hx::IsNull( this->getChar(charID) );
            				}
            				else {
HXLINE( 237)					_hx_tmp = false;
            				}
HXDLIN( 237)				if (_hx_tmp) {
HXLINE( 240)					return false;
            				}
            			}
            		}
HXLINE( 244)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,hasChars,return )

 ::starling::display::Sprite BitmapFont_obj::createSprite(Float width,Float height,::String text, ::starling::text::TextFormat format, ::starling::text::TextOptions options){
            	HX_GC_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_250_createSprite)
HXLINE( 251)		 ::openfl::_Vector::AbstractVector charLocations = this->arrangeChars(width,height,text,format,options);
HXLINE( 252)		int numChars = ::openfl::_Vector::IVector_obj::get_length(charLocations->data);
HXLINE( 253)		 ::starling::display::Sprite sprite =  ::starling::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 255)		{
HXLINE( 255)			int _g1 = (int)0;
HXDLIN( 255)			int _g = numChars;
HXDLIN( 255)			while((_g1 < _g)){
HXLINE( 255)				_g1 = (_g1 + (int)1);
HXDLIN( 255)				int i = (_g1 - (int)1);
HXLINE( 257)				 ::starling::text::CharLocation charLocation = ( ( ::starling::text::CharLocation)(::openfl::_Vector::IVector_obj::get(charLocations->data,i)) );
HXLINE( 258)				 ::starling::display::Image _hx_char = charLocation->_hx_char->createImage();
HXLINE( 259)				_hx_char->set_x(charLocation->x);
HXLINE( 260)				_hx_char->set_y(charLocation->y);
HXLINE( 261)				_hx_char->set_scale(charLocation->scale);
HXLINE( 262)				_hx_char->set_color(format->get_color());
HXLINE( 263)				_hx_char->set_textureSmoothing(this->get_smoothing());
HXLINE( 264)				sprite->addChild(_hx_char);
            			}
            		}
HXLINE( 267)		::starling::text::CharLocation_obj::rechargePool();
HXLINE( 268)		return sprite;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapFont_obj,createSprite,return )

void BitmapFont_obj::fillMeshBatch( ::starling::display::MeshBatch meshBatch,Float width,Float height,::String text, ::starling::text::TextFormat format, ::starling::text::TextOptions options){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_274_fillMeshBatch)
HXLINE( 275)		 ::openfl::_Vector::AbstractVector charLocations = this->arrangeChars(width,height,text,format,options);
HXLINE( 277)		int numChars = ::openfl::_Vector::IVector_obj::get_length(charLocations->data);
HXLINE( 278)		 ::starling::display::Image _hx_tmp = this->_hx___helperImage;
HXDLIN( 278)		_hx_tmp->set_color(format->get_color());
HXLINE( 280)		{
HXLINE( 280)			int _g1 = (int)0;
HXDLIN( 280)			int _g = numChars;
HXDLIN( 280)			while((_g1 < _g)){
HXLINE( 280)				_g1 = (_g1 + (int)1);
HXDLIN( 280)				int i = (_g1 - (int)1);
HXLINE( 282)				 ::starling::text::CharLocation charLocation = ( ( ::starling::text::CharLocation)(::openfl::_Vector::IVector_obj::get(charLocations->data,i)) );
HXLINE( 283)				 ::starling::display::Image _hx_tmp1 = this->_hx___helperImage;
HXDLIN( 283)				_hx_tmp1->set_texture(charLocation->_hx_char->get_texture());
HXLINE( 284)				this->_hx___helperImage->readjustSize(null(),null());
HXLINE( 285)				this->_hx___helperImage->set_x(charLocation->x);
HXLINE( 286)				this->_hx___helperImage->set_y(charLocation->y);
HXLINE( 287)				this->_hx___helperImage->set_scale(charLocation->scale);
HXLINE( 288)				meshBatch->addMesh(this->_hx___helperImage,null(),null(),null(),null());
            			}
            		}
HXLINE( 291)		::starling::text::CharLocation_obj::rechargePool();
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapFont_obj,fillMeshBatch,(void))

void BitmapFont_obj::clearMeshBatch( ::starling::display::MeshBatch meshBatch){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_297_clearMeshBatch)
HXDLIN( 297)		meshBatch->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,clearMeshBatch,(void))

 ::openfl::_Vector::AbstractVector BitmapFont_obj::arrangeChars(Float width,Float height,::String text, ::starling::text::TextFormat format, ::starling::text::TextOptions options){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_304_arrangeChars)
HXLINE( 305)		bool _hx_tmp;
HXDLIN( 305)		if (hx::IsNotNull( text )) {
HXLINE( 305)			_hx_tmp = (text.length == (int)0);
            		}
            		else {
HXLINE( 305)			_hx_tmp = true;
            		}
HXDLIN( 305)		if (_hx_tmp) {
HXLINE( 305)			return ::starling::text::CharLocation_obj::vectorFromPool();
            		}
HXLINE( 306)		if (hx::IsNull( options )) {
HXLINE( 306)			options = ::starling::text::BitmapFont_obj::sDefaultOptions;
            		}
HXLINE( 308)		bool kerning = format->get_kerning();
HXLINE( 309)		Float leading = format->get_leading();
HXLINE( 310)		::String hAlign = format->get_horizontalAlign();
HXLINE( 311)		::String vAlign = format->get_verticalAlign();
HXLINE( 312)		Float fontSize = format->get_size();
HXLINE( 313)		bool autoScale = options->get_autoScale();
HXLINE( 314)		bool wordWrap = options->get_wordWrap();
HXLINE( 316)		bool finished = false;
HXLINE( 317)		 ::starling::text::CharLocation charLocation;
HXLINE( 318)		int numChars;
HXLINE( 319)		Float containerWidth = (int)0;
HXLINE( 320)		Float containerHeight = (int)0;
HXLINE( 321)		Float scale = (int)0;
HXLINE( 322)		int i;
HXDLIN( 322)		int j;
HXLINE( 324)		if ((fontSize < (int)0)) {
HXLINE( 324)			fontSize = (fontSize * -(this->_hx___size));
            		}
HXLINE( 326)		Float currentY = (int)0;
HXLINE( 328)		while(!(finished)){
HXLINE( 330)			::starling::utils::ArrayUtil_obj::clear(::starling::text::BitmapFont_obj::sLines);
HXLINE( 331)			scale = ((Float)fontSize / (Float)this->_hx___size);
HXLINE( 332)			containerWidth = ((Float)(width - ((int)2 * this->_hx___padding)) / (Float)scale);
HXLINE( 333)			containerHeight = ((Float)(height - ((int)2 * this->_hx___padding)) / (Float)scale);
HXLINE( 335)			if ((this->_hx___lineHeight <= containerHeight)) {
HXLINE( 337)				int lastWhiteSpace = (int)-1;
HXLINE( 338)				int lastCharID = (int)-1;
HXLINE( 339)				 ::openfl::_Vector::AbstractVector currentLine = ::starling::text::CharLocation_obj::vectorFromPool();
HXLINE( 340)				Float currentX = (int)0;
HXLINE( 341)				currentY = (int)0;
HXLINE( 343)				numChars = text.length;
HXLINE( 344)				int i1 = (int)0;
HXLINE( 345)				while((i1 < numChars)){
HXLINE( 347)					bool lineFull = false;
HXLINE( 348)					int charID = text.charCodeAt(i1);
HXLINE( 349)					 ::starling::text::BitmapChar _hx_char = this->getChar(charID);
HXLINE( 351)					bool _hx_tmp1;
HXDLIN( 351)					if ((charID != (int)10)) {
HXLINE( 351)						_hx_tmp1 = (charID == (int)13);
            					}
            					else {
HXLINE( 351)						_hx_tmp1 = true;
            					}
HXDLIN( 351)					if (_hx_tmp1) {
HXLINE( 353)						lineFull = true;
            					}
            					else {
HXLINE( 355)						if (hx::IsNull( _hx_char )) {
HXLINE( 357)							 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 357)							::String _hx_tmp3 = ((HX_("[Starling] Font: ",fb,7a,54,b7) + this->get_name()) + HX_(" missing character: ",b5,92,1a,95));
HXDLIN( 357)							::String _hx_tmp4 = (((_hx_tmp3 + text.charAt(i1)) + HX_(" id: ",61,0b,86,b2)) + charID);
HXDLIN( 357)							_hx_tmp2(_hx_tmp4,hx::SourceInfo(HX_("BitmapFont.hx",00,04,8c,8e),357,HX_("starling.text.BitmapFont",f9,8f,02,3e),HX_("arrangeChars",11,c6,f2,64)));
            						}
            						else {
HXLINE( 361)							bool _hx_tmp5;
HXDLIN( 361)							if ((charID != (int)32)) {
HXLINE( 361)								_hx_tmp5 = (charID == (int)9);
            							}
            							else {
HXLINE( 361)								_hx_tmp5 = true;
            							}
HXDLIN( 361)							if (_hx_tmp5) {
HXLINE( 362)								lastWhiteSpace = i1;
            							}
HXLINE( 364)							if (kerning) {
HXLINE( 365)								currentX = (currentX + _hx_char->getKerning(lastCharID));
            							}
HXLINE( 367)							charLocation = ::starling::text::CharLocation_obj::instanceFromPool(_hx_char);
HXLINE( 368)							charLocation->x = (currentX + _hx_char->get_xOffset());
HXLINE( 369)							charLocation->y = (currentY + _hx_char->get_yOffset());
HXLINE( 370)							{
HXLINE( 370)								int index = ::openfl::_Vector::IVector_obj::get_length(currentLine->data);
HXDLIN( 370)								::openfl::_Vector::IVector_obj::set(currentLine->data,index,charLocation);
            							}
HXLINE( 372)							currentX = (currentX + _hx_char->get_xAdvance());
HXLINE( 373)							lastCharID = charID;
HXLINE( 375)							Float charLocation1 = charLocation->x;
HXDLIN( 375)							if (((charLocation1 + _hx_char->get_width()) > containerWidth)) {
HXLINE( 377)								if (wordWrap) {
HXLINE( 380)									bool _hx_tmp6;
HXDLIN( 380)									if (autoScale) {
HXLINE( 380)										_hx_tmp6 = (lastWhiteSpace == (int)-1);
            									}
            									else {
HXLINE( 380)										_hx_tmp6 = false;
            									}
HXDLIN( 380)									if (_hx_tmp6) {
HXLINE( 381)										goto _hx_goto_17;
            									}
HXLINE( 384)									int numCharsToRemove;
HXDLIN( 384)									if ((lastWhiteSpace == (int)-1)) {
HXLINE( 384)										numCharsToRemove = (int)1;
            									}
            									else {
HXLINE( 384)										numCharsToRemove = (i1 - lastWhiteSpace);
            									}
HXLINE( 386)									{
HXLINE( 386)										int _g1 = (int)0;
HXDLIN( 386)										int _g = numCharsToRemove;
HXDLIN( 386)										while((_g1 < _g)){
HXLINE( 386)											_g1 = (_g1 + (int)1);
HXDLIN( 386)											int j1 = (_g1 - (int)1);
HXLINE( 387)											::openfl::_Vector::IVector_obj::pop(currentLine->data);
            										}
            									}
HXLINE( 389)									if ((::openfl::_Vector::IVector_obj::get_length(currentLine->data) == (int)0)) {
HXLINE( 390)										goto _hx_goto_17;
            									}
HXLINE( 392)									i1 = (i1 - numCharsToRemove);
            								}
            								else {
HXLINE( 396)									if (autoScale) {
HXLINE( 396)										goto _hx_goto_17;
            									}
HXLINE( 397)									::openfl::_Vector::IVector_obj::pop(currentLine->data);
HXLINE( 400)									while(true){
HXLINE( 400)										bool _hx_tmp7;
HXDLIN( 400)										if ((i1 < (numChars - (int)1))) {
HXLINE( 400)											_hx_tmp7 = hx::IsNotEq( text.charCodeAt(i1),(int)10 );
            										}
            										else {
HXLINE( 400)											_hx_tmp7 = false;
            										}
HXDLIN( 400)										if (!(_hx_tmp7)) {
HXLINE( 400)											goto _hx_goto_19;
            										}
HXLINE( 401)										i1 = (i1 + (int)1);
            									}
            									_hx_goto_19:;
            								}
HXLINE( 404)								lineFull = true;
            							}
            						}
            					}
HXLINE( 408)					if ((i1 == (numChars - (int)1))) {
HXLINE( 410)						::starling::text::BitmapFont_obj::sLines[::starling::text::BitmapFont_obj::sLines->length] = currentLine;
HXLINE( 411)						finished = true;
            					}
            					else {
HXLINE( 413)						if (lineFull) {
HXLINE( 415)							::starling::text::BitmapFont_obj::sLines[::starling::text::BitmapFont_obj::sLines->length] = currentLine;
HXLINE( 417)							if ((lastWhiteSpace == i1)) {
HXLINE( 418)								::openfl::_Vector::IVector_obj::pop(currentLine->data);
            							}
HXLINE( 420)							if ((((currentY + leading) + ((int)2 * this->_hx___lineHeight)) <= containerHeight)) {
HXLINE( 422)								currentLine = ::starling::text::CharLocation_obj::vectorFromPool();
HXLINE( 423)								currentX = (int)0;
HXLINE( 424)								currentY = (currentY + (this->_hx___lineHeight + leading));
HXLINE( 425)								lastWhiteSpace = (int)-1;
HXLINE( 426)								lastCharID = (int)-1;
            							}
            							else {
HXLINE( 430)								goto _hx_goto_17;
            							}
            						}
            					}
HXLINE( 433)					i1 = (i1 + (int)1);
            				}
            				_hx_goto_17:;
            			}
HXLINE( 437)			bool _hx_tmp8;
HXDLIN( 437)			bool _hx_tmp9;
HXDLIN( 437)			if (autoScale) {
HXLINE( 437)				_hx_tmp9 = !(finished);
            			}
            			else {
HXLINE( 437)				_hx_tmp9 = false;
            			}
HXDLIN( 437)			if (_hx_tmp9) {
HXLINE( 437)				_hx_tmp8 = (fontSize > (int)3);
            			}
            			else {
HXLINE( 437)				_hx_tmp8 = false;
            			}
HXDLIN( 437)			if (_hx_tmp8) {
HXLINE( 438)				fontSize = (fontSize - (int)1);
            			}
            			else {
HXLINE( 440)				finished = true;
            			}
            		}
HXLINE( 443)		 ::openfl::_Vector::AbstractVector finalLocations = ::starling::text::CharLocation_obj::vectorFromPool();
HXLINE( 444)		int numLines = ::starling::text::BitmapFont_obj::sLines->length;
HXLINE( 445)		Float bottom = (currentY + this->_hx___lineHeight);
HXLINE( 446)		int yOffset = (int)0;
HXLINE( 448)		if ((vAlign == HX_("bottom",eb,e6,78,65))) {
HXLINE( 448)			yOffset = ::Std_obj::_hx_int((containerHeight - bottom));
            		}
            		else {
HXLINE( 449)			if ((vAlign == HX_("center",d5,25,db,05))) {
HXLINE( 449)				yOffset = ::Std_obj::_hx_int(((Float)(containerHeight - bottom) / (Float)(int)2));
            			}
            		}
HXLINE( 451)		{
HXLINE( 451)			int _g11 = (int)0;
HXDLIN( 451)			int _g2 = numLines;
HXDLIN( 451)			while((_g11 < _g2)){
HXLINE( 451)				_g11 = (_g11 + (int)1);
HXDLIN( 451)				int lineID = (_g11 - (int)1);
HXLINE( 453)				 ::openfl::_Vector::AbstractVector line = ::starling::text::BitmapFont_obj::sLines->__get(lineID).StaticCast<  ::openfl::_Vector::AbstractVector >();
HXLINE( 454)				numChars = ::openfl::_Vector::IVector_obj::get_length(line->data);
HXLINE( 456)				if ((numChars == (int)0)) {
HXLINE( 456)					continue;
            				}
HXLINE( 458)				int xOffset = (int)0;
HXLINE( 459)				int index1 = (::openfl::_Vector::IVector_obj::get_length(line->data) - (int)1);
HXDLIN( 459)				 ::starling::text::CharLocation lastLocation = ( ( ::starling::text::CharLocation)(::openfl::_Vector::IVector_obj::get(line->data,index1)) );
HXLINE( 460)				Float lastLocation1 = lastLocation->x;
HXDLIN( 460)				Float right = (lastLocation1 - lastLocation->_hx_char->get_xOffset());
HXDLIN( 460)				Float right1 = (right + lastLocation->_hx_char->get_xAdvance());
HXLINE( 463)				if ((hAlign == HX_("right",dc,0b,64,e9))) {
HXLINE( 463)					xOffset = ::Std_obj::_hx_int((containerWidth - right1));
            				}
            				else {
HXLINE( 464)					if ((hAlign == HX_("center",d5,25,db,05))) {
HXLINE( 464)						xOffset = ::Std_obj::_hx_int(((Float)(containerWidth - right1) / (Float)(int)2));
            					}
            				}
HXLINE( 466)				{
HXLINE( 466)					int _g3 = (int)0;
HXDLIN( 466)					int _g21 = numChars;
HXDLIN( 466)					while((_g3 < _g21)){
HXLINE( 466)						_g3 = (_g3 + (int)1);
HXDLIN( 466)						int c = (_g3 - (int)1);
HXLINE( 468)						charLocation = ( ( ::starling::text::CharLocation)(::openfl::_Vector::IVector_obj::get(line->data,c)) );
HXLINE( 469)						charLocation->x = (scale * ((charLocation->x + xOffset) + this->_hx___padding));
HXLINE( 470)						charLocation->y = (scale * ((charLocation->y + yOffset) + this->_hx___padding));
HXLINE( 471)						charLocation->scale = scale;
HXLINE( 473)						bool _hx_tmp10;
HXDLIN( 473)						if ((charLocation->_hx_char->get_width() > (int)0)) {
HXLINE( 473)							_hx_tmp10 = (charLocation->_hx_char->get_height() > (int)0);
            						}
            						else {
HXLINE( 473)							_hx_tmp10 = false;
            						}
HXDLIN( 473)						if (_hx_tmp10) {
HXLINE( 474)							int index2 = ::openfl::_Vector::IVector_obj::get_length(finalLocations->data);
HXDLIN( 474)							::openfl::_Vector::IVector_obj::set(finalLocations->data,index2,charLocation);
            						}
            					}
            				}
            			}
            		}
HXLINE( 478)		return finalLocations;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapFont_obj,arrangeChars,return )

::String BitmapFont_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_483_get_name)
HXDLIN( 483)		return this->_hx___name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,get_name,return )

Float BitmapFont_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_487_get_size)
HXDLIN( 487)		return this->_hx___size;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,get_size,return )

Float BitmapFont_obj::get_lineHeight(){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_491_get_lineHeight)
HXDLIN( 491)		return this->_hx___lineHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,get_lineHeight,return )

void BitmapFont_obj::set_lineHeight(Float value){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_492_set_lineHeight)
HXDLIN( 492)		this->_hx___lineHeight = value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,set_lineHeight,(void))

::String BitmapFont_obj::get_smoothing(){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_496_get_smoothing)
HXDLIN( 496)		return this->_hx___helperImage->get_textureSmoothing();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,get_smoothing,return )

::String BitmapFont_obj::set_smoothing(::String value){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_497_set_smoothing)
HXDLIN( 497)		return this->_hx___helperImage->set_textureSmoothing(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,set_smoothing,return )

Float BitmapFont_obj::get_baseline(){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_502_get_baseline)
HXDLIN( 502)		return this->_hx___baseline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,get_baseline,return )

Float BitmapFont_obj::set_baseline(Float value){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_503_set_baseline)
HXDLIN( 503)		return (this->_hx___baseline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,set_baseline,return )

Float BitmapFont_obj::get_offsetX(){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_508_get_offsetX)
HXDLIN( 508)		return this->_hx___offsetX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,get_offsetX,return )

Float BitmapFont_obj::set_offsetX(Float value){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_509_set_offsetX)
HXDLIN( 509)		return (this->_hx___offsetX = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,set_offsetX,return )

Float BitmapFont_obj::get_offsetY(){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_514_get_offsetY)
HXDLIN( 514)		return this->_hx___offsetY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,get_offsetY,return )

Float BitmapFont_obj::set_offsetY(Float value){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_515_set_offsetY)
HXDLIN( 515)		return (this->_hx___offsetY = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,set_offsetY,return )

Float BitmapFont_obj::get_padding(){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_521_get_padding)
HXDLIN( 521)		return this->_hx___padding;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,get_padding,return )

Float BitmapFont_obj::set_padding(Float value){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_522_set_padding)
HXDLIN( 522)		return (this->_hx___padding = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,set_padding,return )

 ::starling::textures::Texture BitmapFont_obj::get_texture(){
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_525_get_texture)
HXDLIN( 525)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,get_texture,return )

int BitmapFont_obj::NATIVE_SIZE;

::String BitmapFont_obj::MINI;

int BitmapFont_obj::CHAR_SPACE;

int BitmapFont_obj::CHAR_TAB;

int BitmapFont_obj::CHAR_NEWLINE;

int BitmapFont_obj::CHAR_CARRIAGE_RETURN;

::Array< ::Dynamic> BitmapFont_obj::sLines;

 ::starling::text::TextOptions BitmapFont_obj::sDefaultOptions;


hx::ObjectPtr< BitmapFont_obj > BitmapFont_obj::__new( ::starling::textures::Texture texture, ::Dynamic fontXml) {
	hx::ObjectPtr< BitmapFont_obj > __this = new BitmapFont_obj();
	__this->__construct(texture,fontXml);
	return __this;
}

hx::ObjectPtr< BitmapFont_obj > BitmapFont_obj::__alloc(hx::Ctx *_hx_ctx, ::starling::textures::Texture texture, ::Dynamic fontXml) {
	BitmapFont_obj *__this = (BitmapFont_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapFont_obj), true, "starling.text.BitmapFont"));
	*(void **)__this = BitmapFont_obj::_hx_vtable;
	__this->__construct(texture,fontXml);
	return __this;
}

BitmapFont_obj::BitmapFont_obj()
{
}

void BitmapFont_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapFont);
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___chars,"__chars");
	HX_MARK_MEMBER_NAME(_hx___name,"__name");
	HX_MARK_MEMBER_NAME(_hx___size,"__size");
	HX_MARK_MEMBER_NAME(_hx___lineHeight,"__lineHeight");
	HX_MARK_MEMBER_NAME(_hx___baseline,"__baseline");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___padding,"__padding");
	HX_MARK_MEMBER_NAME(_hx___helperImage,"__helperImage");
	HX_MARK_END_CLASS();
}

void BitmapFont_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___chars,"__chars");
	HX_VISIT_MEMBER_NAME(_hx___name,"__name");
	HX_VISIT_MEMBER_NAME(_hx___size,"__size");
	HX_VISIT_MEMBER_NAME(_hx___lineHeight,"__lineHeight");
	HX_VISIT_MEMBER_NAME(_hx___baseline,"__baseline");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___padding,"__padding");
	HX_VISIT_MEMBER_NAME(_hx___helperImage,"__helperImage");
}

hx::Val BitmapFont_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_name() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__name") ) { return hx::Val( _hx___name ); }
		if (HX_FIELD_EQ(inName,"__size") ) { return hx::Val( _hx___size ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__chars") ) { return hx::Val( _hx___chars ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChar") ) { return hx::Val( getChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"addChar") ) { return hx::Val( addChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"offsetX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_offsetX() ); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_offsetY() ); }
		if (HX_FIELD_EQ(inName,"padding") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_padding() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasChars") ) { return hx::Val( hasChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return hx::Val( get_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"baseline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_baseline() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__padding") ) { return hx::Val( _hx___padding ); }
		if (HX_FIELD_EQ(inName,"smoothing") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_smoothing() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__baseline") ) { return hx::Val( _hx___baseline ); }
		if (HX_FIELD_EQ(inName,"getCharIDs") ) { return hx::Val( getCharIDs_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_lineHeight() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_offsetX") ) { return hx::Val( get_offsetX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_offsetX") ) { return hx::Val( set_offsetX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_offsetY") ) { return hx::Val( get_offsetY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_offsetY") ) { return hx::Val( set_offsetY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_padding") ) { return hx::Val( get_padding_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_padding") ) { return hx::Val( set_padding_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_texture") ) { return hx::Val( get_texture_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__lineHeight") ) { return hx::Val( _hx___lineHeight ); }
		if (HX_FIELD_EQ(inName,"parseFontXml") ) { return hx::Val( parseFontXml_dyn() ); }
		if (HX_FIELD_EQ(inName,"createSprite") ) { return hx::Val( createSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"arrangeChars") ) { return hx::Val( arrangeChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_baseline") ) { return hx::Val( get_baseline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_baseline") ) { return hx::Val( set_baseline_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__helperImage") ) { return hx::Val( _hx___helperImage ); }
		if (HX_FIELD_EQ(inName,"fillMeshBatch") ) { return hx::Val( fillMeshBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_smoothing") ) { return hx::Val( get_smoothing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_smoothing") ) { return hx::Val( set_smoothing_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"clearMeshBatch") ) { return hx::Val( clearMeshBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_lineHeight") ) { return hx::Val( get_lineHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_lineHeight") ) { return hx::Val( set_lineHeight_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapFont_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sLines") ) { outValue = ( sLines ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sDefaultOptions") ) { outValue = ( sDefaultOptions ); return true; }
	}
	return false;
}

hx::Val BitmapFont_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__name") ) { _hx___name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__size") ) { _hx___size=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__chars") ) { _hx___chars=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_offsetX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_offsetY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"padding") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_padding(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"baseline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_baseline(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__padding") ) { _hx___padding=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"smoothing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_smoothing(inValue.Cast< ::String >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__baseline") ) { _hx___baseline=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__lineHeight") ) { _hx___lineHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__helperImage") ) { _hx___helperImage=inValue.Cast<  ::starling::display::Image >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapFont_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sLines") ) { sLines=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sDefaultOptions") ) { sDefaultOptions=ioValue.Cast<  ::starling::text::TextOptions >(); return true; }
	}
	return false;
}

void BitmapFont_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__chars","\xbd","\xf5","\x11","\xb0"));
	outFields->push(HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"));
	outFields->push(HX_HCSTRING("__size","\xe1","\x03","\x4c","\xfb"));
	outFields->push(HX_HCSTRING("__lineHeight","\x1b","\x7e","\x87","\x0f"));
	outFields->push(HX_HCSTRING("__baseline","\xa5","\x4f","\x60","\xb4"));
	outFields->push(HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__padding","\xb1","\xaa","\xcb","\x51"));
	outFields->push(HX_HCSTRING("__helperImage","\xed","\xe3","\x5c","\xd1"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6"));
	outFields->push(HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"));
	outFields->push(HX_HCSTRING("baseline","\x85","\xdc","\x27","\x11"));
	outFields->push(HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapFont_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(BitmapFont_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(BitmapFont_obj,_hx___chars),HX_HCSTRING("__chars","\xbd","\xf5","\x11","\xb0")},
	{hx::fsString,(int)offsetof(BitmapFont_obj,_hx___name),HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7")},
	{hx::fsFloat,(int)offsetof(BitmapFont_obj,_hx___size),HX_HCSTRING("__size","\xe1","\x03","\x4c","\xfb")},
	{hx::fsFloat,(int)offsetof(BitmapFont_obj,_hx___lineHeight),HX_HCSTRING("__lineHeight","\x1b","\x7e","\x87","\x0f")},
	{hx::fsFloat,(int)offsetof(BitmapFont_obj,_hx___baseline),HX_HCSTRING("__baseline","\xa5","\x4f","\x60","\xb4")},
	{hx::fsFloat,(int)offsetof(BitmapFont_obj,_hx___offsetX),HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58")},
	{hx::fsFloat,(int)offsetof(BitmapFont_obj,_hx___offsetY),HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58")},
	{hx::fsFloat,(int)offsetof(BitmapFont_obj,_hx___padding),HX_HCSTRING("__padding","\xb1","\xaa","\xcb","\x51")},
	{hx::fsObject /*::starling::display::Image*/ ,(int)offsetof(BitmapFont_obj,_hx___helperImage),HX_HCSTRING("__helperImage","\xed","\xe3","\x5c","\xd1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapFont_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BitmapFont_obj::NATIVE_SIZE,HX_HCSTRING("NATIVE_SIZE","\xa9","\x6b","\x41","\x16")},
	{hx::fsString,(void *) &BitmapFont_obj::MINI,HX_HCSTRING("MINI","\x97","\x16","\x1d","\x33")},
	{hx::fsInt,(void *) &BitmapFont_obj::CHAR_SPACE,HX_HCSTRING("CHAR_SPACE","\x3d","\xf7","\x4d","\x7a")},
	{hx::fsInt,(void *) &BitmapFont_obj::CHAR_TAB,HX_HCSTRING("CHAR_TAB","\x0c","\x85","\x56","\x1d")},
	{hx::fsInt,(void *) &BitmapFont_obj::CHAR_NEWLINE,HX_HCSTRING("CHAR_NEWLINE","\x8b","\xb2","\x16","\x9e")},
	{hx::fsInt,(void *) &BitmapFont_obj::CHAR_CARRIAGE_RETURN,HX_HCSTRING("CHAR_CARRIAGE_RETURN","\x52","\x89","\x3c","\x3b")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &BitmapFont_obj::sLines,HX_HCSTRING("sLines","\x8c","\xcc","\x39","\x03")},
	{hx::fsObject /*::starling::text::TextOptions*/ ,(void *) &BitmapFont_obj::sDefaultOptions,HX_HCSTRING("sDefaultOptions","\x70","\xe4","\x9c","\xa6")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapFont_obj_sMemberFields[] = {
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__chars","\xbd","\xf5","\x11","\xb0"),
	HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"),
	HX_HCSTRING("__size","\xe1","\x03","\x4c","\xfb"),
	HX_HCSTRING("__lineHeight","\x1b","\x7e","\x87","\x0f"),
	HX_HCSTRING("__baseline","\xa5","\x4f","\x60","\xb4"),
	HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"),
	HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"),
	HX_HCSTRING("__padding","\xb1","\xaa","\xcb","\x51"),
	HX_HCSTRING("__helperImage","\xed","\xe3","\x5c","\xd1"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("parseFontXml","\x55","\x67","\x08","\xf0"),
	HX_HCSTRING("getChar","\x8c","\x0e","\x42","\x14"),
	HX_HCSTRING("addChar","\x97","\xa1","\xfc","\x7d"),
	HX_HCSTRING("getCharIDs","\x2c","\x31","\xbc","\x1e"),
	HX_HCSTRING("hasChars","\x23","\xe7","\x0b","\xd2"),
	HX_HCSTRING("createSprite","\x21","\x1c","\xeb","\xe5"),
	HX_HCSTRING("fillMeshBatch","\x8a","\x9b","\x23","\xc7"),
	HX_HCSTRING("clearMeshBatch","\x40","\x47","\xe0","\xa3"),
	HX_HCSTRING("arrangeChars","\x11","\xc6","\xf2","\x64"),
	HX_HCSTRING("get_name","\xd4","\x2d","\xba","\xc8"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("get_lineHeight","\x44","\x8b","\xe9","\x4c"),
	HX_HCSTRING("set_lineHeight","\xb8","\x73","\x09","\x6d"),
	HX_HCSTRING("get_smoothing","\x4b","\xa9","\x45","\x57"),
	HX_HCSTRING("set_smoothing","\x57","\x8b","\x4b","\x9c"),
	HX_HCSTRING("get_baseline","\x8e","\x90","\x41","\xc6"),
	HX_HCSTRING("set_baseline","\x02","\xb4","\x3a","\xdb"),
	HX_HCSTRING("get_offsetX","\x7c","\x69","\x5f","\x5d"),
	HX_HCSTRING("set_offsetX","\x88","\x70","\xcc","\x67"),
	HX_HCSTRING("get_offsetY","\x7d","\x69","\x5f","\x5d"),
	HX_HCSTRING("set_offsetY","\x89","\x70","\xcc","\x67"),
	HX_HCSTRING("get_padding","\xe8","\xb9","\x77","\x56"),
	HX_HCSTRING("set_padding","\xf4","\xc0","\xe4","\x60"),
	HX_HCSTRING("get_texture","\xf2","\x28","\xdb","\x24"),
	::String(null()) };

static void BitmapFont_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapFont_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::NATIVE_SIZE,"NATIVE_SIZE");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::MINI,"MINI");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::CHAR_SPACE,"CHAR_SPACE");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::CHAR_TAB,"CHAR_TAB");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::CHAR_NEWLINE,"CHAR_NEWLINE");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::CHAR_CARRIAGE_RETURN,"CHAR_CARRIAGE_RETURN");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::sLines,"sLines");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::sDefaultOptions,"sDefaultOptions");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapFont_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::NATIVE_SIZE,"NATIVE_SIZE");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::MINI,"MINI");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::CHAR_SPACE,"CHAR_SPACE");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::CHAR_TAB,"CHAR_TAB");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::CHAR_NEWLINE,"CHAR_NEWLINE");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::CHAR_CARRIAGE_RETURN,"CHAR_CARRIAGE_RETURN");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::sLines,"sLines");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::sDefaultOptions,"sDefaultOptions");
};

#endif

hx::Class BitmapFont_obj::__mClass;

static ::String BitmapFont_obj_sStaticFields[] = {
	HX_HCSTRING("NATIVE_SIZE","\xa9","\x6b","\x41","\x16"),
	HX_HCSTRING("MINI","\x97","\x16","\x1d","\x33"),
	HX_HCSTRING("CHAR_SPACE","\x3d","\xf7","\x4d","\x7a"),
	HX_HCSTRING("CHAR_TAB","\x0c","\x85","\x56","\x1d"),
	HX_HCSTRING("CHAR_NEWLINE","\x8b","\xb2","\x16","\x9e"),
	HX_HCSTRING("CHAR_CARRIAGE_RETURN","\x52","\x89","\x3c","\x3b"),
	HX_HCSTRING("sLines","\x8c","\xcc","\x39","\x03"),
	HX_HCSTRING("sDefaultOptions","\x70","\xe4","\x9c","\xa6"),
	::String(null())
};

void BitmapFont_obj::__register()
{
	hx::Object *dummy = new BitmapFont_obj;
	BitmapFont_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.text.BitmapFont","\xf9","\x8f","\x02","\x3e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapFont_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapFont_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapFont_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapFont_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapFont_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapFont_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapFont_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapFont_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapFont_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapFont_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_63_boot)
HXDLIN(  63)		NATIVE_SIZE = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_66_boot)
HXDLIN(  66)		MINI = HX_("mini",97,4e,5c,48);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_68_boot)
HXDLIN(  68)		CHAR_SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_69_boot)
HXDLIN(  69)		CHAR_TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_70_boot)
HXDLIN(  70)		CHAR_NEWLINE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_71_boot)
HXDLIN(  71)		CHAR_CARRIAGE_RETURN = (int)13;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_85_boot)
HXDLIN(  85)		sLines = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d31ca8c91c04ce02_86_boot)
HXDLIN(  86)		sDefaultOptions =  ::starling::text::TextOptions_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace starling
} // end namespace text
