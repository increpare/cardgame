// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_MeshBatch
#include <starling/display/MeshBatch.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_styles_MeshStyle
#include <starling/styles/MeshStyle.h>
#endif
#ifndef INCLUDED_starling_text_BitmapFont
#include <starling/text/BitmapFont.h>
#endif
#ifndef INCLUDED_starling_text_ITextCompositor
#include <starling/text/ITextCompositor.h>
#endif
#ifndef INCLUDED_starling_text_TextField
#include <starling/text/TextField.h>
#endif
#ifndef INCLUDED_starling_text_TextFormat
#include <starling/text/TextFormat.h>
#endif
#ifndef INCLUDED_starling_text_TextOptions
#include <starling/text/TextOptions.h>
#endif
#ifndef INCLUDED_starling_text_TrueTypeCompositor
#include <starling/text/TrueTypeCompositor.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_RectangleUtil
#include <starling/utils/RectangleUtil.h>
#endif
#ifndef INCLUDED_starling_utils_SystemUtil
#include <starling/utils/SystemUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_142_new,"starling.text.TextField","new",0x55a23084,"starling.text.TextField.new","starling/text/TextField.hx",142,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_164_dispose,"starling.text.TextField","dispose",0x01b7c2c3,"starling.text.TextField.dispose","starling/text/TextField.hx",164,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_174_render,"starling.text.TextField","render",0x00e2b9b2,"starling.text.TextField.render","starling/text/TextField.hx",174,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_183_recompose,"starling.text.TextField","recompose",0x2d3694e3,"starling.text.TextField.recompose","starling/text/TextField.hx",183,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_210_updateText,"starling.text.TextField","updateText",0x0c0463b2,"starling.text.TextField.updateText","starling/text/TextField.hx",210,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_251_updateBorder,"starling.text.TextField","updateBorder",0xec3c6f31,"starling.text.TextField.updateBorder","starling/text/TextField.hx",251,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_278_setRequiresRecomposition,"starling.text.TextField","setRequiresRecomposition",0xc197b923,"starling.text.TextField.setRequiresRecomposition","starling/text/TextField.hx",278,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_290_get_isHorizontalAutoSize,"starling.text.TextField","get_isHorizontalAutoSize",0x016ac243,"starling.text.TextField.get_isHorizontalAutoSize","starling/text/TextField.hx",290,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_297_get_isVerticalAutoSize,"starling.text.TextField","get_isVerticalAutoSize",0x7e0bda15,"starling.text.TextField.get_isVerticalAutoSize","starling/text/TextField.hx",297,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_304_get_textBounds,"starling.text.TextField","get_textBounds",0x4c7c99a7,"starling.text.TextField.get_textBounds","starling/text/TextField.hx",304,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_312_getBounds,"starling.text.TextField","getBounds",0x0bcf22cf,"starling.text.TextField.getBounds","starling/text/TextField.hx",312,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_321_hitTest,"starling.text.TextField","hitTest",0x28eaa269,"starling.text.TextField.hitTest","starling/text/TextField.hx",321,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_328_set_width,"starling.text.TextField","set_width",0x1ab8118d,"starling.text.TextField.set_width","starling/text/TextField.hx",328,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_340_set_height,"starling.text.TextField","set_height",0xfca6c280,"starling.text.TextField.set_height","starling/text/TextField.hx",340,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_348_get_text,"starling.text.TextField","get_text",0x24232592,"starling.text.TextField.get_text","starling/text/TextField.hx",348,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_350_set_text,"starling.text.TextField","set_text",0xd2807f06,"starling.text.TextField.set_text","starling/text/TextField.hx",350,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_374_get_format,"starling.text.TextField","get_format",0xf46bab5c,"starling.text.TextField.get_format","starling/text/TextField.hx",374,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_376_set_format,"starling.text.TextField","set_format",0xf7e949d0,"starling.text.TextField.set_format","starling/text/TextField.hx",376,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_387_get_options,"starling.text.TextField","get_options",0xea99b799,"starling.text.TextField.get_options","starling/text/TextField.hx",387,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_392_get_border,"starling.text.TextField","get_border",0x5af76911,"starling.text.TextField.get_border","starling/text/TextField.hx",392,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_394_set_border,"starling.text.TextField","set_border",0x5e750785,"starling.text.TextField.set_border","starling/text/TextField.hx",394,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_416_get_autoScale,"starling.text.TextField","get_autoScale",0xe28b5596,"starling.text.TextField.get_autoScale","starling/text/TextField.hx",416,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_417_set_autoScale,"starling.text.TextField","set_autoScale",0x279137a2,"starling.text.TextField.set_autoScale","starling/text/TextField.hx",417,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_423_get_autoSize,"starling.text.TextField","get_autoSize",0x6cf1bf35,"starling.text.TextField.get_autoSize","starling/text/TextField.hx",423,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_424_set_autoSize,"starling.text.TextField","set_autoSize",0x81eae2a9,"starling.text.TextField.set_autoSize","starling/text/TextField.hx",424,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_429_get_wordWrap,"starling.text.TextField","get_wordWrap",0x3e534419,"starling.text.TextField.get_wordWrap","starling/text/TextField.hx",429,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_430_set_wordWrap,"starling.text.TextField","set_wordWrap",0x534c678d,"starling.text.TextField.set_wordWrap","starling/text/TextField.hx",430,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_441_get_batchable,"starling.text.TextField","get_batchable",0x875c034f,"starling.text.TextField.get_batchable","starling/text/TextField.hx",441,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_444_set_batchable,"starling.text.TextField","set_batchable",0xcc61e55b,"starling.text.TextField.set_batchable","starling/text/TextField.hx",444,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_452_get_isHtmlText,"starling.text.TextField","get_isHtmlText",0x3a55c467,"starling.text.TextField.get_isHtmlText","starling/text/TextField.hx",452,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_453_set_isHtmlText,"starling.text.TextField","set_isHtmlText",0x5a75acdb,"starling.text.TextField.set_isHtmlText","starling/text/TextField.hx",453,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_468_get_pixelSnapping,"starling.text.TextField","get_pixelSnapping",0xd02a90dd,"starling.text.TextField.get_pixelSnapping","starling/text/TextField.hx",468,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_469_set_pixelSnapping,"starling.text.TextField","set_pixelSnapping",0xf39868e9,"starling.text.TextField.set_pixelSnapping","starling/text/TextField.hx",469,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_474_get_style,"starling.text.TextField","get_style",0xf12214ac,"starling.text.TextField.get_style","starling/text/TextField.hx",474,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_476_set_style,"starling.text.TextField","set_style",0xd47300b8,"starling.text.TextField.set_style","starling/text/TextField.hx",476,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_488_get_defaultTextureFormat,"starling.text.TextField","get_defaultTextureFormat",0x4f6be7d6,"starling.text.TextField.get_defaultTextureFormat","starling/text/TextField.hx",488,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_491_set_defaultTextureFormat,"starling.text.TextField","set_defaultTextureFormat",0x6246694a,"starling.text.TextField.set_defaultTextureFormat","starling/text/TextField.hx",491,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_500_get_defaultCompositor,"starling.text.TextField","get_defaultCompositor",0xf115f35d,"starling.text.TextField.get_defaultCompositor","starling/text/TextField.hx",500,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_503_set_defaultCompositor,"starling.text.TextField","set_defaultCompositor",0x451ec169,"starling.text.TextField.set_defaultCompositor","starling/text/TextField.hx",503,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_510_updateEmbeddedFonts,"starling.text.TextField","updateEmbeddedFonts",0x2d411a35,"starling.text.TextField.updateEmbeddedFonts","starling/text/TextField.hx",510,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_519_registerCompositor,"starling.text.TextField","registerCompositor",0x960c0be0,"starling.text.TextField.registerCompositor","starling/text/TextField.hx",519,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_526_unregisterCompositor,"starling.text.TextField","unregisterCompositor",0x8b99cb79,"starling.text.TextField.unregisterCompositor","starling/text/TextField.hx",526,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_540_getCompositor,"starling.text.TextField","getCompositor",0x6488d09b,"starling.text.TextField.getCompositor","starling/text/TextField.hx",540,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_549_registerBitmapFont,"starling.text.TextField","registerBitmapFont",0x8d60c9fd,"starling.text.TextField.registerBitmapFont","starling/text/TextField.hx",549,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_559_unregisterBitmapFont,"starling.text.TextField","unregisterBitmapFont",0x82ee8996,"starling.text.TextField.unregisterBitmapFont","starling/text/TextField.hx",559,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_567_getBitmapFont,"starling.text.TextField","getBitmapFont",0x5bdd8eb8,"starling.text.TextField.getBitmapFont","starling/text/TextField.hx",567,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_574_get_compositors,"starling.text.TextField","get_compositors",0xa36817cd,"starling.text.TextField.get_compositors","starling/text/TextField.hx",574,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_591_convertToLowerCase,"starling.text.TextField","convertToLowerCase",0x511c7d7f,"starling.text.TextField.convertToLowerCase","starling/text/TextField.hx",591,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_95_boot,"starling.text.TextField","boot",0x9061438e,"starling.text.TextField.boot","starling/text/TextField.hx",95,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_110_boot,"starling.text.TextField","boot",0x9061438e,"starling.text.TextField.boot","starling/text/TextField.hx",110,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_111_boot,"starling.text.TextField","boot",0x9061438e,"starling.text.TextField.boot","starling/text/TextField.hx",111,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_112_boot,"starling.text.TextField","boot",0x9061438e,"starling.text.TextField.boot","starling/text/TextField.hx",112,0xe248b7cc)
HX_LOCAL_STACK_FRAME(_hx_pos_c0b5f7b5e994b665_588_boot,"starling.text.TextField","boot",0x9061438e,"starling.text.TextField.boot","starling/text/TextField.hx",588,0xe248b7cc)
namespace starling{
namespace text{

void TextField_obj::__construct(int width,int height,::String __o_text, ::starling::text::TextFormat format){
::String text = __o_text.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_142_new)
HXLINE( 143)		super::__construct();
HXLINE( 145)		::String _hx_tmp;
HXDLIN( 145)		if (hx::IsNotNull( text )) {
HXLINE( 145)			_hx_tmp = text;
            		}
            		else {
HXLINE( 145)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 145)		this->_text = _hx_tmp;
HXLINE( 146)		this->_hitArea =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height);
HXLINE( 147)		this->_requiresRecomposition = true;
HXLINE( 148)		this->_compositor = ::starling::text::TextField_obj::sDefaultCompositor;
HXLINE( 150)		 ::starling::text::TextFormat _hx_tmp1;
HXDLIN( 150)		if (hx::IsNotNull( format )) {
HXLINE( 150)			_hx_tmp1 = format->clone();
            		}
            		else {
HXLINE( 150)			_hx_tmp1 =  ::starling::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
            		}
HXDLIN( 150)		this->_format = _hx_tmp1;
HXLINE( 151)		this->_format->addEventListener(HX_("change",70,91,72,b7),this->setRequiresRecomposition_dyn());
HXLINE( 153)		 ::starling::text::TextOptions _hx_tmp2;
HXDLIN( 153)		if (hx::IsNotNull( this->get_options() )) {
HXLINE( 153)			_hx_tmp2 = this->get_options()->clone();
            		}
            		else {
HXLINE( 153)			_hx_tmp2 =  ::starling::text::TextOptions_obj::__alloc( HX_CTX ,null(),null());
            		}
HXDLIN( 153)		this->_options = _hx_tmp2;
HXLINE( 154)		this->_options->addEventListener(HX_("change",70,91,72,b7),this->setRequiresRecomposition_dyn());
HXLINE( 156)		this->_meshBatch =  ::starling::display::MeshBatch_obj::__alloc( HX_CTX );
HXLINE( 157)		this->_meshBatch->set_touchable(false);
HXLINE( 158)		this->_meshBatch->set_pixelSnapping(true);
HXLINE( 159)		this->addChild(this->_meshBatch);
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x31a4bcfa) {
		if (inClassId<=(int)0x25137bc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
		} else {
			return inClassId==(int)0x31a4bcfa;
		}
	} else {
		return inClassId==(int)0x3577f9d8 || inClassId==(int)0x6dea180f;
	}
}

void TextField_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_164_dispose)
HXLINE( 165)		this->_format->removeEventListener(HX_("change",70,91,72,b7),this->setRequiresRecomposition_dyn());
HXLINE( 166)		this->_options->removeEventListener(HX_("change",70,91,72,b7),this->setRequiresRecomposition_dyn());
HXLINE( 167)		::starling::text::ITextCompositor_obj::clearMeshBatch(this->_compositor,this->_meshBatch);
HXLINE( 169)		this->super::dispose();
            	}


void TextField_obj::render( ::starling::rendering::Painter painter){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_174_render)
HXLINE( 175)		if (this->_requiresRecomposition) {
HXLINE( 175)			this->recompose();
            		}
HXLINE( 176)		this->super::render(painter);
            	}


void TextField_obj::recompose(){
            	HX_GC_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_183_recompose)
HXDLIN( 183)		if (this->_requiresRecomposition) {
HXLINE( 185)			this->_recomposing = true;
HXLINE( 186)			::starling::text::ITextCompositor_obj::clearMeshBatch(this->_compositor,this->_meshBatch);
HXLINE( 188)			::String fontName = this->_format->get_font();
HXLINE( 189)			::Dynamic compositor = ::starling::text::TextField_obj::getCompositor(fontName);
HXLINE( 191)			bool _hx_tmp;
HXDLIN( 191)			if (hx::IsNull( compositor )) {
HXLINE( 191)				_hx_tmp = (fontName == HX_("mini",97,4e,5c,48));
            			}
            			else {
HXLINE( 191)				_hx_tmp = false;
            			}
HXDLIN( 191)			if (_hx_tmp) {
HXLINE( 193)				compositor =  ::starling::text::BitmapFont_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 194)				::starling::text::TextField_obj::registerCompositor(compositor,fontName);
            			}
HXLINE( 197)			::Dynamic _hx_tmp1;
HXDLIN( 197)			if (hx::IsNotNull( compositor )) {
HXLINE( 197)				_hx_tmp1 = compositor;
            			}
            			else {
HXLINE( 197)				_hx_tmp1 = ::starling::text::TextField_obj::sDefaultCompositor;
            			}
HXDLIN( 197)			this->_compositor = _hx_tmp1;
HXLINE( 199)			this->updateText();
HXLINE( 200)			this->updateBorder();
HXLINE( 202)			this->_requiresRecomposition = false;
HXLINE( 203)			this->_recomposing = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,recompose,(void))

void TextField_obj::updateText(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_210_updateText)
HXLINE( 211)		Float width = this->_hitArea->width;
HXLINE( 212)		Float height = this->_hitArea->height;
HXLINE( 217)		bool _hx_tmp;
HXDLIN( 217)		if (this->get_isHorizontalAutoSize()) {
HXLINE( 217)			_hx_tmp = !(this->_options->get_isHtmlText());
            		}
            		else {
HXLINE( 217)			_hx_tmp = false;
            		}
HXDLIN( 217)		if (_hx_tmp) {
HXLINE( 217)			width = (int)100000;
            		}
HXLINE( 218)		if (this->get_isVerticalAutoSize()) {
HXLINE( 218)			height = (int)100000;
            		}
HXLINE( 220)		 ::starling::display::MeshBatch _hx_tmp1 = this->_meshBatch;
HXDLIN( 220)		_hx_tmp1->set_x(this->_meshBatch->set_y((int)0));
HXLINE( 221)		 ::starling::text::TextOptions _hx_tmp2 = this->_options;
HXDLIN( 221)		_hx_tmp2->set_textureScale(::starling::core::Starling_obj::get_current()->get_contentScaleFactor());
HXLINE( 222)		::starling::text::ITextCompositor_obj::fillMeshBatch(this->_compositor,this->_meshBatch,width,height,this->_text,this->_format,this->_options);
HXLINE( 224)		if (hx::IsNotNull( this->_style )) {
HXLINE( 224)			this->_meshBatch->set_style(this->_style);
            		}
HXLINE( 225)		if ((this->_options->get_autoSize() != HX_("none",b8,12,0a,49))) {
HXLINE( 227)			this->_textBounds = this->_meshBatch->getBounds(this->_meshBatch,this->_textBounds);
HXLINE( 229)			if (this->get_isHorizontalAutoSize()) {
HXLINE( 231)				 ::starling::display::MeshBatch _hx_tmp3 = this->_meshBatch;
HXDLIN( 231)				_hx_tmp3->set_x((this->_textBounds->x = -(this->_textBounds->x)));
HXLINE( 232)				this->_hitArea->width = this->_textBounds->width;
HXLINE( 233)				this->_textBounds->x = (int)0;
            			}
HXLINE( 236)			if (this->get_isVerticalAutoSize()) {
HXLINE( 238)				 ::starling::display::MeshBatch _hx_tmp4 = this->_meshBatch;
HXDLIN( 238)				_hx_tmp4->set_y((this->_textBounds->y = -(this->_textBounds->y)));
HXLINE( 239)				this->_hitArea->height = this->_textBounds->height;
HXLINE( 240)				this->_textBounds->y = (int)0;
            			}
            		}
            		else {
HXLINE( 246)			this->_textBounds = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,updateText,(void))

void TextField_obj::updateBorder(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_251_updateBorder)
HXLINE( 252)		if (hx::IsNull( this->_border )) {
HXLINE( 252)			return;
            		}
HXLINE( 254)		Float width = this->_hitArea->width;
HXLINE( 255)		Float height = this->_hitArea->height;
HXLINE( 257)		 ::starling::display::Quad topLine = ( ( ::starling::display::Quad)(this->_border->getChildAt((int)0)) );
HXLINE( 258)		 ::starling::display::Quad rightLine = ( ( ::starling::display::Quad)(this->_border->getChildAt((int)1)) );
HXLINE( 259)		 ::starling::display::Quad bottomLine = ( ( ::starling::display::Quad)(this->_border->getChildAt((int)2)) );
HXLINE( 260)		 ::starling::display::Quad leftLine = ( ( ::starling::display::Quad)(this->_border->getChildAt((int)3)) );
HXLINE( 262)		topLine->set_width(width);
HXDLIN( 262)		topLine->set_height((int)1);
HXLINE( 263)		bottomLine->set_width(width);
HXDLIN( 263)		bottomLine->set_height((int)1);
HXLINE( 264)		leftLine->set_width((int)1);
HXDLIN( 264)		leftLine->set_height(height);
HXLINE( 265)		rightLine->set_width((int)1);
HXDLIN( 265)		rightLine->set_height(height);
HXLINE( 266)		rightLine->set_x((width - (int)1));
HXLINE( 267)		bottomLine->set_y((height - (int)1));
HXLINE( 268)		topLine->set_color(rightLine->set_color(bottomLine->set_color(leftLine->set_color(this->_format->get_color()))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,updateBorder,(void))

void TextField_obj::setRequiresRecomposition(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_278_setRequiresRecomposition)
HXDLIN( 278)		if (!(this->_recomposing)) {
HXLINE( 280)			this->_requiresRecomposition = true;
HXLINE( 281)			this->setRequiresRedraw();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,setRequiresRecomposition,(void))

bool TextField_obj::get_isHorizontalAutoSize(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_290_get_isHorizontalAutoSize)
HXDLIN( 290)		if ((this->_options->get_autoSize() != HX_("horizontal",e4,fc,c3,15))) {
HXLINE( 291)			return (this->_options->get_autoSize() == HX_("bothDirections",35,2d,b0,08));
            		}
            		else {
HXDLIN( 290)			return true;
            		}
HXDLIN( 290)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_isHorizontalAutoSize,return )

bool TextField_obj::get_isVerticalAutoSize(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_297_get_isVerticalAutoSize)
HXDLIN( 297)		if ((this->_options->get_autoSize() != HX_("vertical",76,bc,15,6a))) {
HXLINE( 298)			return (this->_options->get_autoSize() == HX_("bothDirections",35,2d,b0,08));
            		}
            		else {
HXDLIN( 297)			return true;
            		}
HXDLIN( 297)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_isVerticalAutoSize,return )

 ::openfl::geom::Rectangle TextField_obj::get_textBounds(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_304_get_textBounds)
HXLINE( 305)		if (this->_requiresRecomposition) {
HXLINE( 305)			this->recompose();
            		}
HXLINE( 306)		if (hx::IsNull( this->_textBounds )) {
HXLINE( 306)			this->_textBounds = this->_meshBatch->getBounds(hx::ObjectPtr<OBJ_>(this),null());
            		}
HXLINE( 307)		return this->_textBounds->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textBounds,return )

 ::openfl::geom::Rectangle TextField_obj::getBounds( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle out){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_312_getBounds)
HXLINE( 313)		if (this->_requiresRecomposition) {
HXLINE( 313)			this->recompose();
            		}
HXLINE( 314)		this->getTransformationMatrix(targetSpace,::starling::text::TextField_obj::sMatrix);
HXLINE( 315)		return ::starling::utils::RectangleUtil_obj::getBounds(this->_hitArea,::starling::text::TextField_obj::sMatrix,out);
            	}


 ::starling::display::DisplayObject TextField_obj::hitTest( ::openfl::geom::Point localPoint){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_321_hitTest)
HXDLIN( 321)		bool _hx_tmp;
HXDLIN( 321)		bool _hx_tmp1;
HXDLIN( 321)		if (!(!(this->get_visible()))) {
HXDLIN( 321)			_hx_tmp1 = !(this->get_touchable());
            		}
            		else {
HXDLIN( 321)			_hx_tmp1 = true;
            		}
HXDLIN( 321)		if (!(_hx_tmp1)) {
HXDLIN( 321)			_hx_tmp = !(this->hitTestMask(localPoint));
            		}
            		else {
HXDLIN( 321)			_hx_tmp = true;
            		}
HXDLIN( 321)		if (_hx_tmp) {
HXDLIN( 321)			return null();
            		}
            		else {
HXLINE( 322)			if (this->_hitArea->containsPoint(localPoint)) {
HXLINE( 322)				return hx::ObjectPtr<OBJ_>(this);
            			}
            			else {
HXLINE( 323)				return null();
            			}
            		}
HXLINE( 321)		return null();
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_328_set_width)
HXLINE( 333)		Float _hx_tmp;
HXDLIN( 333)		if ((this->get_scaleX() != (int)0)) {
HXLINE( 333)			_hx_tmp = this->get_scaleX();
            		}
            		else {
HXLINE( 333)			_hx_tmp = ((Float)1.0);
            		}
HXDLIN( 333)		this->_hitArea->width = ((Float)value / (Float)_hx_tmp);
HXLINE( 334)		this->setRequiresRecomposition();
HXLINE( 335)		return value;
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_340_set_height)
HXLINE( 341)		Float _hx_tmp;
HXDLIN( 341)		if ((this->get_scaleY() != (int)0)) {
HXLINE( 341)			_hx_tmp = this->get_scaleY();
            		}
            		else {
HXLINE( 341)			_hx_tmp = ((Float)1.0);
            		}
HXDLIN( 341)		this->_hitArea->height = ((Float)value / (Float)_hx_tmp);
HXLINE( 342)		this->setRequiresRecomposition();
HXLINE( 343)		return value;
            	}


::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_348_get_text)
HXDLIN( 348)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_350_set_text)
HXLINE( 351)		if (hx::IsNull( value )) {
HXLINE( 351)			value = HX_("",00,00,00,00);
            		}
HXLINE( 352)		if ((this->_text != value)) {
HXLINE( 354)			this->_text = value;
HXLINE( 355)			this->setRequiresRecomposition();
            		}
HXLINE( 357)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

 ::starling::text::TextFormat TextField_obj::get_format(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_374_get_format)
HXDLIN( 374)		return this->_format;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_format,return )

 ::starling::text::TextFormat TextField_obj::set_format( ::starling::text::TextFormat value){
            	HX_GC_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_376_set_format)
HXLINE( 377)		if (hx::IsNull( value )) {
HXLINE( 377)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("format cannot be null",b0,02,e1,39)));
            		}
HXLINE( 378)		this->_format->copyFrom(value);
HXLINE( 379)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_format,return )

 ::starling::text::TextOptions TextField_obj::get_options(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_387_get_options)
HXDLIN( 387)		return this->_options;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_options,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_392_get_border)
HXDLIN( 392)		return hx::IsNotNull( this->_border );
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_394_set_border)
HXLINE( 395)		bool _hx_tmp;
HXDLIN( 395)		if (value) {
HXLINE( 395)			_hx_tmp = hx::IsNull( this->_border );
            		}
            		else {
HXLINE( 395)			_hx_tmp = false;
            		}
HXDLIN( 395)		if (_hx_tmp) {
HXLINE( 397)			this->_border =  ::starling::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 398)			this->addChild(this->_border);
HXLINE( 400)			{
HXLINE( 400)				int _g = (int)0;
HXDLIN( 400)				while((_g < (int)4)){
HXLINE( 400)					_g = (_g + (int)1);
HXDLIN( 400)					int i = (_g - (int)1);
HXLINE( 401)					 ::starling::display::DisplayObjectContainer _hx_tmp1 = this->_border;
HXDLIN( 401)					_hx_tmp1->addChild( ::starling::display::Quad_obj::__alloc( HX_CTX ,((Float)1.0),((Float)1.0),null()));
            				}
            			}
HXLINE( 403)			this->updateBorder();
            		}
            		else {
HXLINE( 405)			bool _hx_tmp2;
HXDLIN( 405)			if (!(value)) {
HXLINE( 405)				_hx_tmp2 = hx::IsNotNull( this->_border );
            			}
            			else {
HXLINE( 405)				_hx_tmp2 = false;
            			}
HXDLIN( 405)			if (_hx_tmp2) {
HXLINE( 407)				this->_border->removeFromParent(true);
HXLINE( 408)				this->_border = null();
            			}
            		}
HXLINE( 410)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

bool TextField_obj::get_autoScale(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_416_get_autoScale)
HXDLIN( 416)		return this->_options->get_autoScale();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoScale,return )

bool TextField_obj::set_autoScale(bool value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_417_set_autoScale)
HXDLIN( 417)		return this->_options->set_autoScale(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoScale,return )

::String TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_423_get_autoSize)
HXDLIN( 423)		return this->_options->get_autoSize();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

::String TextField_obj::set_autoSize(::String value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_424_set_autoSize)
HXDLIN( 424)		return this->_options->set_autoSize(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_429_get_wordWrap)
HXDLIN( 429)		return this->_options->get_wordWrap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_430_set_wordWrap)
HXDLIN( 430)		return this->_options->set_wordWrap(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

bool TextField_obj::get_batchable(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_441_get_batchable)
HXDLIN( 441)		return this->_meshBatch->get_batchable();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_batchable,return )

bool TextField_obj::set_batchable(bool value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_444_set_batchable)
HXDLIN( 444)		return this->_meshBatch->set_batchable(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_batchable,return )

bool TextField_obj::get_isHtmlText(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_452_get_isHtmlText)
HXDLIN( 452)		return this->_options->get_isHtmlText();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_isHtmlText,return )

bool TextField_obj::set_isHtmlText(bool value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_453_set_isHtmlText)
HXDLIN( 453)		return this->_options->set_isHtmlText(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_isHtmlText,return )

bool TextField_obj::get_pixelSnapping(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_468_get_pixelSnapping)
HXDLIN( 468)		return this->_meshBatch->get_pixelSnapping();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_pixelSnapping,return )

bool TextField_obj::set_pixelSnapping(bool value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_469_set_pixelSnapping)
HXDLIN( 469)		return this->_meshBatch->set_pixelSnapping(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_pixelSnapping,return )

 ::starling::styles::MeshStyle TextField_obj::get_style(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_474_get_style)
HXDLIN( 474)		return this->_meshBatch->get_style();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_style,return )

 ::starling::styles::MeshStyle TextField_obj::set_style( ::starling::styles::MeshStyle value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_476_set_style)
HXLINE( 477)		 ::starling::display::MeshBatch _hx_tmp = this->_meshBatch;
HXDLIN( 477)		_hx_tmp->set_style((this->_style = value));
HXLINE( 478)		this->setRequiresRecomposition();
HXLINE( 479)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_style,return )

::String TextField_obj::COMPOSITOR_DATA_NAME;

 ::openfl::geom::Matrix TextField_obj::sMatrix;

::Dynamic TextField_obj::sDefaultCompositor;

::String TextField_obj::sDefaultTextureFormat;

::String TextField_obj::get_defaultTextureFormat(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_488_get_defaultTextureFormat)
HXDLIN( 488)		return ::starling::text::TextField_obj::sDefaultTextureFormat;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextureFormat,return )

::String TextField_obj::set_defaultTextureFormat(::String value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_491_set_defaultTextureFormat)
HXDLIN( 491)		return (::starling::text::TextField_obj::sDefaultTextureFormat = value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextureFormat,return )

::Dynamic TextField_obj::get_defaultCompositor(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_500_get_defaultCompositor)
HXDLIN( 500)		return ::starling::text::TextField_obj::sDefaultCompositor;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultCompositor,return )

::Dynamic TextField_obj::set_defaultCompositor(::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_503_set_defaultCompositor)
HXDLIN( 503)		return (::starling::text::TextField_obj::sDefaultCompositor = value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultCompositor,return )

void TextField_obj::updateEmbeddedFonts(){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_510_updateEmbeddedFonts)
HXDLIN( 510)		::starling::utils::SystemUtil_obj::updateEmbeddedFonts();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,updateEmbeddedFonts,(void))

void TextField_obj::registerCompositor(::Dynamic compositor,::String name){
            	HX_GC_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_519_registerCompositor)
HXLINE( 520)		if (hx::IsNull( name )) {
HXLINE( 520)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("name must not be null",d5,12,78,96)));
            		}
HXLINE( 521)		{
HXLINE( 521)			::Dynamic this1 = ::starling::text::TextField_obj::get_compositors();
HXDLIN( 521)			( ( ::haxe::ds::StringMap)(this1) )->set(::starling::text::TextField_obj::convertToLowerCase(name),compositor);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,registerCompositor,(void))

void TextField_obj::unregisterCompositor(::String name,hx::Null< bool >  __o_dispose){
bool dispose = __o_dispose.Default(true);
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_526_unregisterCompositor)
HXLINE( 527)		name = ::starling::text::TextField_obj::convertToLowerCase(name);
HXLINE( 528)		 ::haxe::ds::StringMap compositors = ::starling::text::TextField_obj::get_compositors();
HXLINE( 530)		bool _hx_tmp;
HXDLIN( 530)		if (dispose) {
HXLINE( 530)			_hx_tmp = compositors->exists(name);
            		}
            		else {
HXLINE( 530)			_hx_tmp = false;
            		}
HXDLIN( 530)		if (_hx_tmp) {
HXLINE( 531)			::starling::text::ITextCompositor_obj::dispose(compositors->get(name));
            		}
HXLINE( 533)		compositors->remove(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,unregisterCompositor,(void))

::Dynamic TextField_obj::getCompositor(::String name){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_540_getCompositor)
HXDLIN( 540)		::Dynamic this1 = ::starling::text::TextField_obj::get_compositors();
HXDLIN( 540)		return ( ( ::haxe::ds::StringMap)(this1) )->get(::starling::text::TextField_obj::convertToLowerCase(name));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCompositor,return )

::String TextField_obj::registerBitmapFont( ::starling::text::BitmapFont bitmapFont,::String name){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_549_registerBitmapFont)
HXLINE( 550)		if (hx::IsNull( name )) {
HXLINE( 550)			name = bitmapFont->get_name();
            		}
HXLINE( 551)		::starling::text::TextField_obj::registerCompositor(bitmapFont,name);
HXLINE( 552)		return name;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,registerBitmapFont,return )

void TextField_obj::unregisterBitmapFont(::String name,hx::Null< bool >  __o_dispose){
bool dispose = __o_dispose.Default(true);
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_559_unregisterBitmapFont)
HXDLIN( 559)		::starling::text::TextField_obj::unregisterCompositor(name,dispose);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,unregisterBitmapFont,(void))

 ::starling::text::BitmapFont TextField_obj::getBitmapFont(::String name){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_567_getBitmapFont)
HXDLIN( 567)		return hx::TCast<  ::starling::text::BitmapFont >::cast(::starling::text::TextField_obj::getCompositor(name));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getBitmapFont,return )

 ::haxe::ds::StringMap TextField_obj::get_compositors(){
            	HX_GC_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_574_get_compositors)
HXLINE( 575)		 ::haxe::ds::StringMap compositors = ( ( ::haxe::ds::StringMap)(::starling::core::Starling_obj::get_current()->get_painter()->get_sharedData()->get(HX_("starling.display.TextField.compositors",7f,93,a1,79))) );
HXLINE( 577)		if (hx::IsNull( compositors )) {
HXLINE( 579)			compositors =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 580)			::starling::core::Starling_obj::get_current()->get_painter()->get_sharedData()->set(HX_("starling.display.TextField.compositors",7f,93,a1,79),compositors);
            		}
HXLINE( 583)		return compositors;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_compositors,return )

 ::haxe::ds::StringMap TextField_obj::sStringCache;

::String TextField_obj::convertToLowerCase(::String string){
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_591_convertToLowerCase)
HXLINE( 592)		::String result = ( (::String)(::starling::text::TextField_obj::sStringCache->get(string)) );
HXLINE( 593)		if (hx::IsNull( result )) {
HXLINE( 595)			result = string.toLowerCase();
HXLINE( 596)			::starling::text::TextField_obj::sStringCache->set(string,result);
            		}
HXLINE( 598)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,convertToLowerCase,return )


hx::ObjectPtr< TextField_obj > TextField_obj::__new(int width,int height,::String __o_text, ::starling::text::TextFormat format) {
	hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct(width,height,__o_text,format);
	return __this;
}

hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height,::String __o_text, ::starling::text::TextFormat format) {
	TextField_obj *__this = (TextField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "starling.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct(width,height,__o_text,format);
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_options,"_options");
	HX_MARK_MEMBER_NAME(_format,"_format");
	HX_MARK_MEMBER_NAME(_textBounds,"_textBounds");
	HX_MARK_MEMBER_NAME(_hitArea,"_hitArea");
	HX_MARK_MEMBER_NAME(_compositor,"_compositor");
	HX_MARK_MEMBER_NAME(_requiresRecomposition,"_requiresRecomposition");
	HX_MARK_MEMBER_NAME(_border,"_border");
	HX_MARK_MEMBER_NAME(_meshBatch,"_meshBatch");
	HX_MARK_MEMBER_NAME(_style,"_style");
	HX_MARK_MEMBER_NAME(_recomposing,"_recomposing");
	 ::starling::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_options,"_options");
	HX_VISIT_MEMBER_NAME(_format,"_format");
	HX_VISIT_MEMBER_NAME(_textBounds,"_textBounds");
	HX_VISIT_MEMBER_NAME(_hitArea,"_hitArea");
	HX_VISIT_MEMBER_NAME(_compositor,"_compositor");
	HX_VISIT_MEMBER_NAME(_requiresRecomposition,"_requiresRecomposition");
	HX_VISIT_MEMBER_NAME(_border,"_border");
	HX_VISIT_MEMBER_NAME(_meshBatch,"_meshBatch");
	HX_VISIT_MEMBER_NAME(_style,"_style");
	HX_VISIT_MEMBER_NAME(_recomposing,"_recomposing");
	 ::starling::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_text() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { return hx::Val( _text ); }
		if (HX_FIELD_EQ(inName,"style") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_style() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_style") ) { return hx::Val( _style ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_format() ); }
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_border() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_format") ) { return hx::Val( _format ); }
		if (HX_FIELD_EQ(inName,"_border") ) { return hx::Val( _border ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"options") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_options() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_options") ) { return hx::Val( _options ); }
		if (HX_FIELD_EQ(inName,"_hitArea") ) { return hx::Val( _hitArea ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_wordWrap() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"recompose") ) { return hx::Val( recompose_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"autoScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoScale() ); }
		if (HX_FIELD_EQ(inName,"batchable") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_batchable() ); }
		if (HX_FIELD_EQ(inName,"get_style") ) { return hx::Val( get_style_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_style") ) { return hx::Val( set_style_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_meshBatch") ) { return hx::Val( _meshBatch ); }
		if (HX_FIELD_EQ(inName,"updateText") ) { return hx::Val( updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"textBounds") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textBounds() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_format") ) { return hx::Val( get_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_format") ) { return hx::Val( set_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return hx::Val( get_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return hx::Val( set_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"isHtmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isHtmlText() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_textBounds") ) { return hx::Val( _textBounds ); }
		if (HX_FIELD_EQ(inName,"_compositor") ) { return hx::Val( _compositor ); }
		if (HX_FIELD_EQ(inName,"get_options") ) { return hx::Val( get_options_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_recomposing") ) { return hx::Val( _recomposing ); }
		if (HX_FIELD_EQ(inName,"updateBorder") ) { return hx::Val( updateBorder_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_autoScale") ) { return hx::Val( get_autoScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoScale") ) { return hx::Val( set_autoScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_batchable") ) { return hx::Val( get_batchable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_batchable") ) { return hx::Val( set_batchable_dyn() ); }
		if (HX_FIELD_EQ(inName,"pixelSnapping") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pixelSnapping() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_textBounds") ) { return hx::Val( get_textBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isHtmlText") ) { return hx::Val( get_isHtmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_isHtmlText") ) { return hx::Val( set_isHtmlText_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_pixelSnapping") ) { return hx::Val( get_pixelSnapping_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pixelSnapping") ) { return hx::Val( set_pixelSnapping_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"isVerticalAutoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isVerticalAutoSize() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"isHorizontalAutoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isHorizontalAutoSize() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_requiresRecomposition") ) { return hx::Val( _requiresRecomposition ); }
		if (HX_FIELD_EQ(inName,"get_isVerticalAutoSize") ) { return hx::Val( get_isVerticalAutoSize_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setRequiresRecomposition") ) { return hx::Val( setRequiresRecomposition_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isHorizontalAutoSize") ) { return hx::Val( get_isHorizontalAutoSize_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sMatrix") ) { outValue = ( sMatrix ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"compositors") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_compositors() ); return true; } }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sStringCache") ) { outValue = ( sStringCache ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getCompositor") ) { outValue = getCompositor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBitmapFont") ) { outValue = getBitmapFont_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_compositors") ) { outValue = get_compositors_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultCompositor") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_defaultCompositor() ); return true; } }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sDefaultCompositor") ) { outValue = ( sDefaultCompositor ); return true; }
		if (HX_FIELD_EQ(inName,"registerCompositor") ) { outValue = registerCompositor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"registerBitmapFont") ) { outValue = registerBitmapFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"convertToLowerCase") ) { outValue = convertToLowerCase_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateEmbeddedFonts") ) { outValue = updateEmbeddedFonts_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"defaultTextureFormat") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_defaultTextureFormat() ); return true; } }
		if (HX_FIELD_EQ(inName,"unregisterCompositor") ) { outValue = unregisterCompositor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unregisterBitmapFont") ) { outValue = unregisterBitmapFont_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"sDefaultTextureFormat") ) { outValue = ( sDefaultTextureFormat ); return true; }
		if (HX_FIELD_EQ(inName,"get_defaultCompositor") ) { outValue = get_defaultCompositor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_defaultCompositor") ) { outValue = set_defaultCompositor_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"get_defaultTextureFormat") ) { outValue = get_defaultTextureFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_defaultTextureFormat") ) { outValue = set_defaultTextureFormat_dyn(); return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { _text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"style") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_style(inValue.Cast<  ::starling::styles::MeshStyle >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_style") ) { _style=inValue.Cast<  ::starling::styles::MeshStyle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_format(inValue.Cast<  ::starling::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_border(inValue.Cast< bool >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_format") ) { _format=inValue.Cast<  ::starling::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_border") ) { _border=inValue.Cast<  ::starling::display::DisplayObjectContainer >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_options") ) { _options=inValue.Cast<  ::starling::text::TextOptions >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_hitArea") ) { _hitArea=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoScale(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"batchable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_batchable(inValue.Cast< bool >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_meshBatch") ) { _meshBatch=inValue.Cast<  ::starling::display::MeshBatch >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isHtmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_isHtmlText(inValue.Cast< bool >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_textBounds") ) { _textBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_compositor") ) { _compositor=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_recomposing") ) { _recomposing=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pixelSnapping") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pixelSnapping(inValue.Cast< bool >()) ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_requiresRecomposition") ) { _requiresRecomposition=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sMatrix") ) { sMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sStringCache") ) { sStringCache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultCompositor") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_defaultCompositor(ioValue.Cast< ::Dynamic >()) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sDefaultCompositor") ) { sDefaultCompositor=ioValue.Cast< ::Dynamic >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"defaultTextureFormat") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_defaultTextureFormat(ioValue.Cast< ::String >()) ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"sDefaultTextureFormat") ) { sDefaultTextureFormat=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00"));
	outFields->push(HX_HCSTRING("_options","\xdf","\x8c","\xb6","\x19"));
	outFields->push(HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c"));
	outFields->push(HX_HCSTRING("_textBounds","\x21","\xd4","\x97","\x6f"));
	outFields->push(HX_HCSTRING("_hitArea","\x01","\x7d","\xb2","\x0f"));
	outFields->push(HX_HCSTRING("_compositor","\x60","\xcc","\x52","\x10"));
	outFields->push(HX_HCSTRING("_requiresRecomposition","\x0a","\x78","\x5e","\x3e"));
	outFields->push(HX_HCSTRING("_border","\x8b","\x5e","\x91","\xd2"));
	outFields->push(HX_HCSTRING("_meshBatch","\x4e","\x6e","\x7d","\x41"));
	outFields->push(HX_HCSTRING("_style","\x72","\xec","\x04","\x80"));
	outFields->push(HX_HCSTRING("_recomposing","\xbd","\xc6","\x1b","\xb9"));
	outFields->push(HX_HCSTRING("isHorizontalAutoSize","\x5e","\x8f","\xf6","\x93"));
	outFields->push(HX_HCSTRING("isVerticalAutoSize","\x70","\x9a","\x22","\x0d"));
	outFields->push(HX_HCSTRING("textBounds","\x02","\x07","\x0e","\x9d"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("options","\x5e","\x33","\xfe","\xdf"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("autoScale","\x9b","\x0c","\xda","\x56"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("batchable","\x54","\xba","\xaa","\xfb"));
	outFields->push(HX_HCSTRING("isHtmlText","\xc2","\x31","\xe7","\x8a"));
	outFields->push(HX_HCSTRING("pixelSnapping","\x62","\xae","\xa1","\xb8"));
	outFields->push(HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TextField_obj,_text),HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00")},
	{hx::fsObject /*::starling::text::TextOptions*/ ,(int)offsetof(TextField_obj,_options),HX_HCSTRING("_options","\xdf","\x8c","\xb6","\x19")},
	{hx::fsObject /*::starling::text::TextFormat*/ ,(int)offsetof(TextField_obj,_format),HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextField_obj,_textBounds),HX_HCSTRING("_textBounds","\x21","\xd4","\x97","\x6f")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextField_obj,_hitArea),HX_HCSTRING("_hitArea","\x01","\x7d","\xb2","\x0f")},
	{hx::fsObject /*::starling::text::ITextCompositor*/ ,(int)offsetof(TextField_obj,_compositor),HX_HCSTRING("_compositor","\x60","\xcc","\x52","\x10")},
	{hx::fsBool,(int)offsetof(TextField_obj,_requiresRecomposition),HX_HCSTRING("_requiresRecomposition","\x0a","\x78","\x5e","\x3e")},
	{hx::fsObject /*::starling::display::DisplayObjectContainer*/ ,(int)offsetof(TextField_obj,_border),HX_HCSTRING("_border","\x8b","\x5e","\x91","\xd2")},
	{hx::fsObject /*::starling::display::MeshBatch*/ ,(int)offsetof(TextField_obj,_meshBatch),HX_HCSTRING("_meshBatch","\x4e","\x6e","\x7d","\x41")},
	{hx::fsObject /*::starling::styles::MeshStyle*/ ,(int)offsetof(TextField_obj,_style),HX_HCSTRING("_style","\x72","\xec","\x04","\x80")},
	{hx::fsBool,(int)offsetof(TextField_obj,_recomposing),HX_HCSTRING("_recomposing","\xbd","\xc6","\x1b","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &TextField_obj::COMPOSITOR_DATA_NAME,HX_HCSTRING("COMPOSITOR_DATA_NAME","\x02","\x8a","\x99","\xff")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &TextField_obj::sMatrix,HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e")},
	{hx::fsObject /*::starling::text::ITextCompositor*/ ,(void *) &TextField_obj::sDefaultCompositor,HX_HCSTRING("sDefaultCompositor","\x6f","\xc5","\x94","\xf8")},
	{hx::fsString,(void *) &TextField_obj::sDefaultTextureFormat,HX_HCSTRING("sDefaultTextureFormat","\x04","\x2d","\x62","\x65")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextField_obj::sStringCache,HX_HCSTRING("sStringCache","\xfe","\x21","\x48","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00"),
	HX_HCSTRING("_options","\xdf","\x8c","\xb6","\x19"),
	HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c"),
	HX_HCSTRING("_textBounds","\x21","\xd4","\x97","\x6f"),
	HX_HCSTRING("_hitArea","\x01","\x7d","\xb2","\x0f"),
	HX_HCSTRING("_compositor","\x60","\xcc","\x52","\x10"),
	HX_HCSTRING("_requiresRecomposition","\x0a","\x78","\x5e","\x3e"),
	HX_HCSTRING("_border","\x8b","\x5e","\x91","\xd2"),
	HX_HCSTRING("_meshBatch","\x4e","\x6e","\x7d","\x41"),
	HX_HCSTRING("_style","\x72","\xec","\x04","\x80"),
	HX_HCSTRING("_recomposing","\xbd","\xc6","\x1b","\xb9"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("recompose","\xbf","\x81","\xdb","\x03"),
	HX_HCSTRING("updateText","\x56","\xb7","\xae","\x05"),
	HX_HCSTRING("updateBorder","\xd5","\xf3","\xdd","\x63"),
	HX_HCSTRING("setRequiresRecomposition","\xc7","\xa3","\xbf","\x96"),
	HX_HCSTRING("get_isHorizontalAutoSize","\xe7","\xac","\x92","\xd6"),
	HX_HCSTRING("get_isVerticalAutoSize","\xb9","\x13","\xb7","\x66"),
	HX_HCSTRING("get_textBounds","\x4b","\x8f","\x03","\x13"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_format","\x00","\xff","\x15","\xee"),
	HX_HCSTRING("set_format","\x74","\x9d","\x93","\xf1"),
	HX_HCSTRING("get_options","\x75","\x93","\xf8","\x65"),
	HX_HCSTRING("get_border","\xb5","\xbc","\xa1","\x54"),
	HX_HCSTRING("set_border","\x29","\x5b","\x1f","\x58"),
	HX_HCSTRING("get_autoScale","\x72","\xe0","\x3d","\x18"),
	HX_HCSTRING("set_autoScale","\x7e","\xc2","\x43","\x5d"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("get_batchable","\x2b","\x8e","\x0e","\xbd"),
	HX_HCSTRING("set_batchable","\x37","\x70","\x14","\x02"),
	HX_HCSTRING("get_isHtmlText","\x0b","\xba","\xdc","\x00"),
	HX_HCSTRING("set_isHtmlText","\x7f","\xa2","\xfc","\x20"),
	HX_HCSTRING("get_pixelSnapping","\xb9","\xb9","\x11","\xbf"),
	HX_HCSTRING("set_pixelSnapping","\xc5","\x91","\x7f","\xe2"),
	HX_HCSTRING("get_style","\x88","\x01","\xc7","\xc7"),
	HX_HCSTRING("set_style","\x94","\xed","\x17","\xab"),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextField_obj::COMPOSITOR_DATA_NAME,"COMPOSITOR_DATA_NAME");
	HX_MARK_MEMBER_NAME(TextField_obj::sMatrix,"sMatrix");
	HX_MARK_MEMBER_NAME(TextField_obj::sDefaultCompositor,"sDefaultCompositor");
	HX_MARK_MEMBER_NAME(TextField_obj::sDefaultTextureFormat,"sDefaultTextureFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::sStringCache,"sStringCache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextField_obj::COMPOSITOR_DATA_NAME,"COMPOSITOR_DATA_NAME");
	HX_VISIT_MEMBER_NAME(TextField_obj::sMatrix,"sMatrix");
	HX_VISIT_MEMBER_NAME(TextField_obj::sDefaultCompositor,"sDefaultCompositor");
	HX_VISIT_MEMBER_NAME(TextField_obj::sDefaultTextureFormat,"sDefaultTextureFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::sStringCache,"sStringCache");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_HCSTRING("COMPOSITOR_DATA_NAME","\x02","\x8a","\x99","\xff"),
	HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e"),
	HX_HCSTRING("sDefaultCompositor","\x6f","\xc5","\x94","\xf8"),
	HX_HCSTRING("sDefaultTextureFormat","\x04","\x2d","\x62","\x65"),
	HX_HCSTRING("get_defaultTextureFormat","\x7a","\xd2","\x93","\x24"),
	HX_HCSTRING("set_defaultTextureFormat","\xee","\x53","\x6e","\x37"),
	HX_HCSTRING("get_defaultCompositor","\x39","\xba","\xd8","\x92"),
	HX_HCSTRING("set_defaultCompositor","\x45","\x88","\xe1","\xe6"),
	HX_HCSTRING("updateEmbeddedFonts","\x11","\x32","\xe9","\x02"),
	HX_HCSTRING("registerCompositor","\x84","\xa3","\x68","\xb1"),
	HX_HCSTRING("unregisterCompositor","\x1d","\x94","\x06","\xa9"),
	HX_HCSTRING("getCompositor","\x77","\x5b","\x3b","\x9a"),
	HX_HCSTRING("registerBitmapFont","\xa1","\x61","\xbd","\xa8"),
	HX_HCSTRING("unregisterBitmapFont","\x3a","\x52","\x5b","\xa0"),
	HX_HCSTRING("getBitmapFont","\x94","\x19","\x90","\x91"),
	HX_HCSTRING("get_compositors","\xa9","\x11","\xf8","\x92"),
	HX_HCSTRING("sStringCache","\xfe","\x21","\x48","\xb9"),
	HX_HCSTRING("convertToLowerCase","\x23","\x15","\x79","\x6c"),
	::String(null())
};

void TextField_obj::__register()
{
	hx::Object *dummy = new TextField_obj;
	TextField_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.text.TextField","\x92","\xde","\x9e","\x8a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_95_boot)
HXDLIN(  95)		COMPOSITOR_DATA_NAME = HX_("starling.display.TextField.compositors",7f,93,a1,79);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_110_boot)
HXDLIN( 110)		sMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_111_boot)
HXDLIN( 111)		sDefaultCompositor =  ::starling::text::TrueTypeCompositor_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_112_boot)
HXDLIN( 112)		sDefaultTextureFormat = ::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString((int)2);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c0b5f7b5e994b665_588_boot)
HXDLIN( 588)		sStringCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace starling
} // end namespace text
