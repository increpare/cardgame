// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text__TextFormatAlign_TextFormatAlign_Impl_
#include <openfl/text/_TextFormatAlign/TextFormatAlign_Impl_.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_text_TextFormat
#include <starling/text/TextFormat.h>
#endif
#ifndef INCLUDED_starling_utils_Align
#include <starling/utils/Align.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8d1217061a1779ca_66_new,"starling.text.TextFormat","new",0x8bc99ed1,"starling.text.TextFormat.new","starling/text/TextFormat.hx",66,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_80_copyFrom,"starling.text.TextFormat","copyFrom",0x477443ae,"starling.text.TextFormat.copyFrom","starling/text/TextFormat.hx",80,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_98_clone,"starling.text.TextFormat","clone",0xf7be200e,"starling.text.TextFormat.clone","starling/text/TextFormat.hx",98,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_107_setTo,"starling.text.TextFormat","setTo",0x298a9e6e,"starling.text.TextFormat.setTo","starling/text/TextFormat.hx",107,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_119_toNativeFormat,"starling.text.TextFormat","toNativeFormat",0x6e186b78,"starling.text.TextFormat.toNativeFormat","starling/text/TextFormat.hx",119,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_142_get_font,"starling.text.TextFormat","get_font",0x428e5147,"starling.text.TextFormat.get_font","starling/text/TextFormat.hx",142,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_144_set_font,"starling.text.TextFormat","set_font",0xf0ebaabb,"starling.text.TextFormat.set_font","starling/text/TextFormat.hx",144,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_156_get_size,"starling.text.TextFormat","get_size",0x4b219439,"starling.text.TextFormat.get_size","starling/text/TextFormat.hx",156,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_158_set_size,"starling.text.TextFormat","set_size",0xf97eedad,"starling.text.TextFormat.set_size","starling/text/TextFormat.hx",158,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_171_get_color,"starling.text.TextFormat","get_color",0x3fc386eb,"starling.text.TextFormat.get_color","starling/text/TextFormat.hx",171,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_173_set_color,"starling.text.TextFormat","set_color",0x231472f7,"starling.text.TextFormat.set_color","starling/text/TextFormat.hx",173,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_184_get_bold,"starling.text.TextFormat","get_bold",0x3fe974fd,"starling.text.TextFormat.get_bold","starling/text/TextFormat.hx",184,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_186_set_bold,"starling.text.TextFormat","set_bold",0xee46ce71,"starling.text.TextFormat.set_bold","starling/text/TextFormat.hx",186,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_197_get_italic,"starling.text.TextFormat","get_italic",0xcb2ff068,"starling.text.TextFormat.get_italic","starling/text/TextFormat.hx",197,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_199_set_italic,"starling.text.TextFormat","set_italic",0xcead8edc,"starling.text.TextFormat.set_italic","starling/text/TextFormat.hx",199,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_210_get_underline,"starling.text.TextFormat","get_underline",0x75658e94,"starling.text.TextFormat.get_underline","starling/text/TextFormat.hx",210,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_212_set_underline,"starling.text.TextFormat","set_underline",0xba6b70a0,"starling.text.TextFormat.set_underline","starling/text/TextFormat.hx",212,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_224_get_horizontalAlign,"starling.text.TextFormat","get_horizontalAlign",0x0583dec9,"starling.text.TextFormat.get_horizontalAlign","starling/text/TextFormat.hx",224,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_226_set_horizontalAlign,"starling.text.TextFormat","set_horizontalAlign",0x4220d1d5,"starling.text.TextFormat.set_horizontalAlign","starling/text/TextFormat.hx",226,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_241_get_verticalAlign,"starling.text.TextFormat","get_verticalAlign",0xf6bffbf7,"starling.text.TextFormat.get_verticalAlign","starling/text/TextFormat.hx",241,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_243_set_verticalAlign,"starling.text.TextFormat","set_verticalAlign",0x1a2dd403,"starling.text.TextFormat.set_verticalAlign","starling/text/TextFormat.hx",243,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_258_get_kerning,"starling.text.TextFormat","get_kerning",0x1db54254,"starling.text.TextFormat.get_kerning","starling/text/TextFormat.hx",258,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_260_set_kerning,"starling.text.TextFormat","set_kerning",0x28224960,"starling.text.TextFormat.set_kerning","starling/text/TextFormat.hx",260,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_271_get_leading,"starling.text.TextFormat","get_leading",0x76deba4e,"starling.text.TextFormat.get_leading","starling/text/TextFormat.hx",271,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_273_set_leading,"starling.text.TextFormat","set_leading",0x814bc15a,"starling.text.TextFormat.set_leading","starling/text/TextFormat.hx",273,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_284_get_letterSpacing,"starling.text.TextFormat","get_letterSpacing",0x074794c5,"starling.text.TextFormat.get_letterSpacing","starling/text/TextFormat.hx",284,0x6b5e4d5f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1217061a1779ca_286_set_letterSpacing,"starling.text.TextFormat","set_letterSpacing",0x2ab56cd1,"starling.text.TextFormat.set_letterSpacing","starling/text/TextFormat.hx",286,0x6b5e4d5f)
namespace starling{
namespace text{

void TextFormat_obj::__construct(::String __o_font,hx::Null< Float >  __o_size,hx::Null< int >  __o_color,::String __o_horizontalAlign,::String __o_verticalAlign){
::String font = __o_font.Default(HX_HCSTRING("Verdana","\xb3","\xc8","\x52","\x40"));
Float size = __o_size.Default(12);
int color = __o_color.Default(0);
::String horizontalAlign = __o_horizontalAlign.Default(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
::String verticalAlign = __o_verticalAlign.Default(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_66_new)
HXLINE(  67)		super::__construct();
HXLINE(  69)		this->_hx___font = font;
HXLINE(  70)		this->_hx___size = size;
HXLINE(  71)		this->_hx___color = color;
HXLINE(  72)		this->_hx___horizontalAlign = horizontalAlign;
HXLINE(  73)		this->_hx___verticalAlign = verticalAlign;
HXLINE(  74)		this->_hx___kerning = true;
HXLINE(  75)		this->_hx___letterSpacing = (this->_hx___leading = ((Float)0.0));
            	}

Dynamic TextFormat_obj::__CreateEmpty() { return new TextFormat_obj; }

void *TextFormat_obj::_hx_vtable = 0;

Dynamic TextFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextFormat_obj > _hx_result = new TextFormat_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool TextFormat_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1082a459) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1082a459;
	} else {
		return inClassId==(int)0x25137bc0;
	}
}

void TextFormat_obj::copyFrom( ::starling::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_80_copyFrom)
HXLINE(  81)		this->_hx___font = format->_hx___font;
HXLINE(  82)		this->_hx___size = format->_hx___size;
HXLINE(  83)		this->_hx___color = format->_hx___color;
HXLINE(  84)		this->_hx___bold = format->_hx___bold;
HXLINE(  85)		this->_hx___italic = format->_hx___italic;
HXLINE(  86)		this->_hx___underline = format->_hx___underline;
HXLINE(  87)		this->_hx___horizontalAlign = format->_hx___horizontalAlign;
HXLINE(  88)		this->_hx___verticalAlign = format->_hx___verticalAlign;
HXLINE(  89)		this->_hx___kerning = format->_hx___kerning;
HXLINE(  90)		this->_hx___leading = format->_hx___leading;
HXLINE(  91)		this->_hx___letterSpacing = format->_hx___letterSpacing;
HXLINE(  93)		this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,copyFrom,(void))

 ::starling::text::TextFormat TextFormat_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_8d1217061a1779ca_98_clone)
HXLINE(  99)		 ::starling::text::TextFormat clone =  ::starling::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 100)		clone->copyFrom(hx::ObjectPtr<OBJ_>(this));
HXLINE( 101)		return clone;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,clone,return )

void TextFormat_obj::setTo(::String __o_font,hx::Null< Float >  __o_size,hx::Null< int >  __o_color,::String __o_horizontalAlign,::String __o_verticalAlign){
::String font = __o_font.Default(HX_HCSTRING("Verdana","\xb3","\xc8","\x52","\x40"));
Float size = __o_size.Default(12);
int color = __o_color.Default(0);
::String horizontalAlign = __o_horizontalAlign.Default(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
::String verticalAlign = __o_verticalAlign.Default(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_107_setTo)
HXLINE( 108)		this->_hx___font = font;
HXLINE( 109)		this->_hx___size = size;
HXLINE( 110)		this->_hx___color = color;
HXLINE( 111)		this->_hx___horizontalAlign = horizontalAlign;
HXLINE( 112)		this->_hx___verticalAlign = verticalAlign;
HXLINE( 114)		this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC5(TextFormat_obj,setTo,(void))

 ::openfl::text::TextFormat TextFormat_obj::toNativeFormat( ::openfl::text::TextFormat out){
            	HX_GC_STACKFRAME(&_hx_pos_8d1217061a1779ca_119_toNativeFormat)
HXLINE( 120)		if (hx::IsNull( out )) {
HXLINE( 120)			out =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE( 122)		out->font = this->_hx___font;
HXLINE( 123)		out->size = ::Std_obj::_hx_int(this->_hx___size);
HXLINE( 124)		out->color = this->_hx___color;
HXLINE( 125)		out->bold = this->_hx___bold;
HXLINE( 126)		out->italic = this->_hx___italic;
HXLINE( 127)		out->underline = this->_hx___underline;
HXLINE( 128)		out->align = ::openfl::text::_TextFormatAlign::TextFormatAlign_Impl__obj::fromString(this->_hx___horizontalAlign);
HXLINE( 129)		out->kerning = this->_hx___kerning;
HXLINE( 130)		out->leading = ::Std_obj::_hx_int(this->_hx___leading);
HXLINE( 131)		out->letterSpacing = this->_hx___letterSpacing;
HXLINE( 133)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,toNativeFormat,return )

::String TextFormat_obj::get_font(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_142_get_font)
HXDLIN( 142)		return this->_hx___font;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_font,return )

::String TextFormat_obj::set_font(::String value){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_144_set_font)
HXLINE( 145)		if ((value != this->_hx___font)) {
HXLINE( 147)			this->_hx___font = value;
HXLINE( 148)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 150)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_font,return )

Float TextFormat_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_156_get_size)
HXDLIN( 156)		return this->_hx___size;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_size,return )

Float TextFormat_obj::set_size(Float value){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_158_set_size)
HXLINE( 159)		if ((value != this->_hx___size)) {
HXLINE( 161)			this->_hx___size = value;
HXLINE( 162)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 164)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_size,return )

int TextFormat_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_171_get_color)
HXDLIN( 171)		return this->_hx___color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_color,return )

int TextFormat_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_173_set_color)
HXLINE( 174)		if ((value != this->_hx___color)) {
HXLINE( 176)			this->_hx___color = value;
HXLINE( 177)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 179)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_color,return )

bool TextFormat_obj::get_bold(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_184_get_bold)
HXDLIN( 184)		return this->_hx___bold;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_bold,return )

bool TextFormat_obj::set_bold(bool value){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_186_set_bold)
HXLINE( 187)		if ((value != this->_hx___bold)) {
HXLINE( 189)			this->_hx___bold = value;
HXLINE( 190)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 192)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_bold,return )

bool TextFormat_obj::get_italic(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_197_get_italic)
HXDLIN( 197)		return this->_hx___italic;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_italic,return )

bool TextFormat_obj::set_italic(bool value){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_199_set_italic)
HXLINE( 200)		if ((value != this->_hx___italic)) {
HXLINE( 202)			this->_hx___italic = value;
HXLINE( 203)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 205)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_italic,return )

bool TextFormat_obj::get_underline(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_210_get_underline)
HXDLIN( 210)		return this->_hx___underline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_underline,return )

bool TextFormat_obj::set_underline(bool value){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_212_set_underline)
HXLINE( 213)		if ((value != this->_hx___underline)) {
HXLINE( 215)			this->_hx___underline = value;
HXLINE( 216)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 218)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_underline,return )

::String TextFormat_obj::get_horizontalAlign(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_224_get_horizontalAlign)
HXDLIN( 224)		return this->_hx___horizontalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_horizontalAlign,return )

::String TextFormat_obj::set_horizontalAlign(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_8d1217061a1779ca_226_set_horizontalAlign)
HXLINE( 227)		if (!(::starling::utils::Align_obj::isValidHorizontal(value))) {
HXLINE( 228)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid horizontal alignment",90,64,44,4d)));
            		}
HXLINE( 230)		if ((value != this->_hx___horizontalAlign)) {
HXLINE( 232)			this->_hx___horizontalAlign = value;
HXLINE( 233)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 235)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_horizontalAlign,return )

::String TextFormat_obj::get_verticalAlign(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_241_get_verticalAlign)
HXDLIN( 241)		return this->_hx___verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_verticalAlign,return )

::String TextFormat_obj::set_verticalAlign(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_8d1217061a1779ca_243_set_verticalAlign)
HXLINE( 244)		if (!(::starling::utils::Align_obj::isValidVertical(value))) {
HXLINE( 245)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Invalid vertical alignment",62,12,a4,2b)));
            		}
HXLINE( 247)		if ((value != this->_hx___verticalAlign)) {
HXLINE( 249)			this->_hx___verticalAlign = value;
HXLINE( 250)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 252)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_verticalAlign,return )

bool TextFormat_obj::get_kerning(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_258_get_kerning)
HXDLIN( 258)		return this->_hx___kerning;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_kerning,return )

bool TextFormat_obj::set_kerning(bool value){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_260_set_kerning)
HXLINE( 261)		if ((value != this->_hx___kerning)) {
HXLINE( 263)			this->_hx___kerning = value;
HXLINE( 264)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 266)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_kerning,return )

Float TextFormat_obj::get_leading(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_271_get_leading)
HXDLIN( 271)		return this->_hx___leading;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_leading,return )

Float TextFormat_obj::set_leading(Float value){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_273_set_leading)
HXLINE( 274)		if ((value != this->_hx___leading)) {
HXLINE( 276)			this->_hx___leading = value;
HXLINE( 277)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 279)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_leading,return )

Float TextFormat_obj::get_letterSpacing(){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_284_get_letterSpacing)
HXDLIN( 284)		return this->_hx___letterSpacing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFormat_obj,get_letterSpacing,return )

Float TextFormat_obj::set_letterSpacing(Float value){
            	HX_STACKFRAME(&_hx_pos_8d1217061a1779ca_286_set_letterSpacing)
HXLINE( 287)		if ((value != this->_hx___letterSpacing)) {
HXLINE( 289)			this->_hx___letterSpacing = value;
HXLINE( 290)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 292)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFormat_obj,set_letterSpacing,return )


hx::ObjectPtr< TextFormat_obj > TextFormat_obj::__new(::String __o_font,hx::Null< Float >  __o_size,hx::Null< int >  __o_color,::String __o_horizontalAlign,::String __o_verticalAlign) {
	hx::ObjectPtr< TextFormat_obj > __this = new TextFormat_obj();
	__this->__construct(__o_font,__o_size,__o_color,__o_horizontalAlign,__o_verticalAlign);
	return __this;
}

hx::ObjectPtr< TextFormat_obj > TextFormat_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_font,hx::Null< Float >  __o_size,hx::Null< int >  __o_color,::String __o_horizontalAlign,::String __o_verticalAlign) {
	TextFormat_obj *__this = (TextFormat_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextFormat_obj), true, "starling.text.TextFormat"));
	*(void **)__this = TextFormat_obj::_hx_vtable;
	__this->__construct(__o_font,__o_size,__o_color,__o_horizontalAlign,__o_verticalAlign);
	return __this;
}

TextFormat_obj::TextFormat_obj()
{
}

void TextFormat_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextFormat);
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_MEMBER_NAME(_hx___size,"__size");
	HX_MARK_MEMBER_NAME(_hx___color,"__color");
	HX_MARK_MEMBER_NAME(_hx___bold,"__bold");
	HX_MARK_MEMBER_NAME(_hx___italic,"__italic");
	HX_MARK_MEMBER_NAME(_hx___underline,"__underline");
	HX_MARK_MEMBER_NAME(_hx___horizontalAlign,"__horizontalAlign");
	HX_MARK_MEMBER_NAME(_hx___verticalAlign,"__verticalAlign");
	HX_MARK_MEMBER_NAME(_hx___kerning,"__kerning");
	HX_MARK_MEMBER_NAME(_hx___leading,"__leading");
	HX_MARK_MEMBER_NAME(_hx___letterSpacing,"__letterSpacing");
	 ::starling::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextFormat_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
	HX_VISIT_MEMBER_NAME(_hx___size,"__size");
	HX_VISIT_MEMBER_NAME(_hx___color,"__color");
	HX_VISIT_MEMBER_NAME(_hx___bold,"__bold");
	HX_VISIT_MEMBER_NAME(_hx___italic,"__italic");
	HX_VISIT_MEMBER_NAME(_hx___underline,"__underline");
	HX_VISIT_MEMBER_NAME(_hx___horizontalAlign,"__horizontalAlign");
	HX_VISIT_MEMBER_NAME(_hx___verticalAlign,"__verticalAlign");
	HX_VISIT_MEMBER_NAME(_hx___kerning,"__kerning");
	HX_VISIT_MEMBER_NAME(_hx___leading,"__leading");
	HX_VISIT_MEMBER_NAME(_hx___letterSpacing,"__letterSpacing");
	 ::starling::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextFormat_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_font() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		if (HX_FIELD_EQ(inName,"bold") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bold() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_color() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font ); }
		if (HX_FIELD_EQ(inName,"__size") ) { return hx::Val( _hx___size ); }
		if (HX_FIELD_EQ(inName,"__bold") ) { return hx::Val( _hx___bold ); }
		if (HX_FIELD_EQ(inName,"italic") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_italic() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__color") ) { return hx::Val( _hx___color ); }
		if (HX_FIELD_EQ(inName,"kerning") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_kerning() ); }
		if (HX_FIELD_EQ(inName,"leading") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_leading() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__italic") ) { return hx::Val( _hx___italic ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_font") ) { return hx::Val( get_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bold") ) { return hx::Val( get_bold_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bold") ) { return hx::Val( set_bold_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__kerning") ) { return hx::Val( _hx___kerning ); }
		if (HX_FIELD_EQ(inName,"__leading") ) { return hx::Val( _hx___leading ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"underline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_underline() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_italic") ) { return hx::Val( get_italic_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_italic") ) { return hx::Val( set_italic_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__underline") ) { return hx::Val( _hx___underline ); }
		if (HX_FIELD_EQ(inName,"get_kerning") ) { return hx::Val( get_kerning_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_kerning") ) { return hx::Val( set_kerning_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_leading") ) { return hx::Val( get_leading_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_leading") ) { return hx::Val( set_leading_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_underline") ) { return hx::Val( get_underline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_underline") ) { return hx::Val( set_underline_dyn() ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_verticalAlign() ); }
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_letterSpacing() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"toNativeFormat") ) { return hx::Val( toNativeFormat_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__verticalAlign") ) { return hx::Val( _hx___verticalAlign ); }
		if (HX_FIELD_EQ(inName,"__letterSpacing") ) { return hx::Val( _hx___letterSpacing ); }
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_horizontalAlign() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__horizontalAlign") ) { return hx::Val( _hx___horizontalAlign ); }
		if (HX_FIELD_EQ(inName,"get_verticalAlign") ) { return hx::Val( get_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_verticalAlign") ) { return hx::Val( set_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_letterSpacing") ) { return hx::Val( get_letterSpacing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_letterSpacing") ) { return hx::Val( set_letterSpacing_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_horizontalAlign") ) { return hx::Val( get_horizontalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_horizontalAlign") ) { return hx::Val( set_horizontalAlign_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TextFormat_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_font(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"bold") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bold(inValue.Cast< bool >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__size") ) { _hx___size=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bold") ) { _hx___bold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"italic") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_italic(inValue.Cast< bool >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__color") ) { _hx___color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kerning") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_kerning(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"leading") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_leading(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__italic") ) { _hx___italic=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__kerning") ) { _hx___kerning=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__leading") ) { _hx___leading=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"underline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_underline(inValue.Cast< bool >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__underline") ) { _hx___underline=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_verticalAlign(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_letterSpacing(inValue.Cast< Float >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__verticalAlign") ) { _hx___verticalAlign=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__letterSpacing") ) { _hx___letterSpacing=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_horizontalAlign(inValue.Cast< ::String >()) ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__horizontalAlign") ) { _hx___horizontalAlign=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextFormat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"));
	outFields->push(HX_HCSTRING("__size","\xe1","\x03","\x4c","\xfb"));
	outFields->push(HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"));
	outFields->push(HX_HCSTRING("__bold","\xa5","\xe4","\x13","\xf0"));
	outFields->push(HX_HCSTRING("__italic","\x10","\x9a","\x93","\xae"));
	outFields->push(HX_HCSTRING("__underline","\xec","\x5d","\xfd","\xb5"));
	outFields->push(HX_HCSTRING("__horizontalAlign","\x21","\xc0","\xc1","\x77"));
	outFields->push(HX_HCSTRING("__verticalAlign","\x4f","\x57","\x2e","\x6c"));
	outFields->push(HX_HCSTRING("__kerning","\xac","\x0b","\x86","\x31"));
	outFields->push(HX_HCSTRING("__leading","\xa6","\x83","\xaf","\x8a"));
	outFields->push(HX_HCSTRING("__letterSpacing","\x1d","\xf0","\xb5","\x7c"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"));
	outFields->push(HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06"));
	outFields->push(HX_HCSTRING("underline","\x0c","\x15","\xd1","\x87"));
	outFields->push(HX_HCSTRING("horizontalAlign","\x41","\x8f","\x67","\xf4"));
	outFields->push(HX_HCSTRING("verticalAlign","\x6f","\x1e","\x7c","\xe4"));
	outFields->push(HX_HCSTRING("kerning","\xcc","\xba","\x37","\xb0"));
	outFields->push(HX_HCSTRING("leading","\xc6","\x32","\x61","\x09"));
	outFields->push(HX_HCSTRING("letterSpacing","\x3d","\xb7","\x03","\xf5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextFormat_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TextFormat_obj,_hx___font),HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2")},
	{hx::fsFloat,(int)offsetof(TextFormat_obj,_hx___size),HX_HCSTRING("__size","\xe1","\x03","\x4c","\xfb")},
	{hx::fsInt,(int)offsetof(TextFormat_obj,_hx___color),HX_HCSTRING("__color","\x43","\xca","\xba","\xb4")},
	{hx::fsBool,(int)offsetof(TextFormat_obj,_hx___bold),HX_HCSTRING("__bold","\xa5","\xe4","\x13","\xf0")},
	{hx::fsBool,(int)offsetof(TextFormat_obj,_hx___italic),HX_HCSTRING("__italic","\x10","\x9a","\x93","\xae")},
	{hx::fsBool,(int)offsetof(TextFormat_obj,_hx___underline),HX_HCSTRING("__underline","\xec","\x5d","\xfd","\xb5")},
	{hx::fsString,(int)offsetof(TextFormat_obj,_hx___horizontalAlign),HX_HCSTRING("__horizontalAlign","\x21","\xc0","\xc1","\x77")},
	{hx::fsString,(int)offsetof(TextFormat_obj,_hx___verticalAlign),HX_HCSTRING("__verticalAlign","\x4f","\x57","\x2e","\x6c")},
	{hx::fsBool,(int)offsetof(TextFormat_obj,_hx___kerning),HX_HCSTRING("__kerning","\xac","\x0b","\x86","\x31")},
	{hx::fsFloat,(int)offsetof(TextFormat_obj,_hx___leading),HX_HCSTRING("__leading","\xa6","\x83","\xaf","\x8a")},
	{hx::fsFloat,(int)offsetof(TextFormat_obj,_hx___letterSpacing),HX_HCSTRING("__letterSpacing","\x1d","\xf0","\xb5","\x7c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TextFormat_obj_sStaticStorageInfo = 0;
#endif

static ::String TextFormat_obj_sMemberFields[] = {
	HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"),
	HX_HCSTRING("__size","\xe1","\x03","\x4c","\xfb"),
	HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"),
	HX_HCSTRING("__bold","\xa5","\xe4","\x13","\xf0"),
	HX_HCSTRING("__italic","\x10","\x9a","\x93","\xae"),
	HX_HCSTRING("__underline","\xec","\x5d","\xfd","\xb5"),
	HX_HCSTRING("__horizontalAlign","\x21","\xc0","\xc1","\x77"),
	HX_HCSTRING("__verticalAlign","\x4f","\x57","\x2e","\x6c"),
	HX_HCSTRING("__kerning","\xac","\x0b","\x86","\x31"),
	HX_HCSTRING("__leading","\xa6","\x83","\xaf","\x8a"),
	HX_HCSTRING("__letterSpacing","\x1d","\xf0","\xb5","\x7c"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("toNativeFormat","\x49","\x16","\xb8","\xef"),
	HX_HCSTRING("get_font","\x58","\x19","\x7b","\xc3"),
	HX_HCSTRING("set_font","\xcc","\x72","\xd8","\x71"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_bold","\x0e","\x3d","\xd6","\xc0"),
	HX_HCSTRING("set_bold","\x82","\x96","\x33","\x6f"),
	HX_HCSTRING("get_italic","\xb9","\x9e","\xeb","\xf6"),
	HX_HCSTRING("set_italic","\x2d","\x3d","\x69","\xfa"),
	HX_HCSTRING("get_underline","\xe3","\xe8","\x34","\x49"),
	HX_HCSTRING("set_underline","\xef","\xca","\x3a","\x8e"),
	HX_HCSTRING("get_horizontalAlign","\x58","\x5e","\x72","\x7f"),
	HX_HCSTRING("set_horizontalAlign","\x64","\x51","\x0f","\xbc"),
	HX_HCSTRING("get_verticalAlign","\xc6","\x29","\xec","\xea"),
	HX_HCSTRING("set_verticalAlign","\xd2","\x01","\x5a","\x0e"),
	HX_HCSTRING("get_kerning","\xe3","\x1a","\x32","\x36"),
	HX_HCSTRING("set_kerning","\xef","\x21","\x9f","\x40"),
	HX_HCSTRING("get_leading","\xdd","\x92","\x5b","\x8f"),
	HX_HCSTRING("set_leading","\xe9","\x99","\xc8","\x99"),
	HX_HCSTRING("get_letterSpacing","\x94","\xc2","\x73","\xfb"),
	HX_HCSTRING("set_letterSpacing","\xa0","\x9a","\xe1","\x1e"),
	::String(null()) };

static void TextFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextFormat_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextFormat_obj::__mClass,"__mClass");
};

#endif

hx::Class TextFormat_obj::__mClass;

void TextFormat_obj::__register()
{
	hx::Object *dummy = new TextFormat_obj;
	TextFormat_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.text.TextFormat","\x5f","\xe2","\x63","\x3d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextFormat_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace text
