// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_openfl_ui_Mouse
#include <openfl/ui/Mouse.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_errors_AbstractMethodError
#include <starling/errors/AbstractMethodError.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_events_TouchEvent
#include <starling/events/TouchEvent.h>
#endif
#ifndef INCLUDED_starling_filters_FragmentFilter
#include <starling/filters/FragmentFilter.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchToken
#include <starling/rendering/BatchToken.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_Color
#include <starling/utils/Color.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif
#ifndef INCLUDED_starling_utils_SystemUtil
#include <starling/utils/SystemUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c9579787cbd2d31a_120_new,"starling.display.DisplayObject","new",0x693c43a1,"starling.display.DisplayObject.new","starling/display/DisplayObject.hx",120,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_227_dispose,"starling.display.DisplayObject","dispose",0x39f62860,"starling.display.DisplayObject.dispose","starling/display/DisplayObject.hx",227,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_237_removeFromParent,"starling.display.DisplayObject","removeFromParent",0x5af8ffb7,"starling.display.DisplayObject.removeFromParent","starling/display/DisplayObject.hx",237,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_246_getTransformationMatrix,"starling.display.DisplayObject","getTransformationMatrix",0x6bb35a61,"starling.display.DisplayObject.getTransformationMatrix","starling/display/DisplayObject.hx",246,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_323_getBounds,"starling.display.DisplayObject","getBounds",0x9ca7e9ac,"starling.display.DisplayObject.getBounds","starling/display/DisplayObject.hx",323,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_329_hitTest,"starling.display.DisplayObject","hitTest",0x61290806,"starling.display.DisplayObject.hitTest","starling/display/DisplayObject.hx",329,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_346_hitTestMask,"starling.display.DisplayObject","hitTestMask",0x85e3f012,"starling.display.DisplayObject.hitTestMask","starling/display/DisplayObject.hx",346,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_368_localToGlobal,"starling.display.DisplayObject","localToGlobal",0x857ab04a,"starling.display.DisplayObject.localToGlobal","starling/display/DisplayObject.hx",368,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_385_globalToLocal,"starling.display.DisplayObject","globalToLocal",0xa93dbd4e,"starling.display.DisplayObject.globalToLocal","starling/display/DisplayObject.hx",385,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_407_render,"starling.display.DisplayObject","render",0x4bc1b6b5,"starling.display.DisplayObject.render","starling/display/DisplayObject.hx",407,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_414_alignPivot,"starling.display.DisplayObject","alignPivot",0x8f1fa09c,"starling.display.DisplayObject.alignPivot","starling/display/DisplayObject.hx",414,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_438_drawToBitmapData,"starling.display.DisplayObject","drawToBitmapData",0x65442d57,"starling.display.DisplayObject.drawToBitmapData","starling/display/DisplayObject.hx",438,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_497_getTransformationMatrix3D,"starling.display.DisplayObject","getTransformationMatrix3D",0x4307a152,"starling.display.DisplayObject.getTransformationMatrix3D","starling/display/DisplayObject.hx",497,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_575_local3DToGlobal,"starling.display.DisplayObject","local3DToGlobal",0xd6de08fb,"starling.display.DisplayObject.local3DToGlobal","starling/display/DisplayObject.hx",575,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_588_globalToLocal3D,"starling.display.DisplayObject","globalToLocal3D",0xc222597f,"starling.display.DisplayObject.globalToLocal3D","starling/display/DisplayObject.hx",588,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_602___setParent,"starling.display.DisplayObject","__setParent",0x0db0df8d,"starling.display.DisplayObject.__setParent","starling/display/DisplayObject.hx",602,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_618___setIs3D,"starling.display.DisplayObject","__setIs3D",0x46c542be,"starling.display.DisplayObject.__setIs3D","starling/display/DisplayObject.hx",618,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_625_get_isMask,"starling.display.DisplayObject","get_isMask",0x896f5c9e,"starling.display.DisplayObject.get_isMask","starling/display/DisplayObject.hx",625,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_642_setRequiresRedraw,"starling.display.DisplayObject","setRequiresRedraw",0x02fb7b88,"starling.display.DisplayObject.setRequiresRedraw","starling/display/DisplayObject.hx",642,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_662_get_requiresRedraw,"starling.display.DisplayObject","get_requiresRedraw",0x0eefefed,"starling.display.DisplayObject.get_requiresRedraw","starling/display/DisplayObject.hx",662,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_673_excludeFromCache,"starling.display.DisplayObject","excludeFromCache",0x6aedd25d,"starling.display.DisplayObject.excludeFromCache","starling/display/DisplayObject.hx",673,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_688___setTransformationChanged,"starling.display.DisplayObject","__setTransformationChanged",0xdd5da328,"starling.display.DisplayObject.__setTransformationChanged","starling/display/DisplayObject.hx",688,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_697___updateTransformationMatrices,"starling.display.DisplayObject","__updateTransformationMatrices",0x35f018eb,"starling.display.DisplayObject.__updateTransformationMatrices","starling/display/DisplayObject.hx",697,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_766_dispatchEvent,"starling.display.DisplayObject","dispatchEvent",0x03f43581,"starling.display.DisplayObject.dispatchEvent","starling/display/DisplayObject.hx",766,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_782_addEventListener,"starling.display.DisplayObject","addEventListener",0x61f1e3ec,"starling.display.DisplayObject.addEventListener","starling/display/DisplayObject.hx",782,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_795_removeEventListener,"starling.display.DisplayObject","removeEventListener",0xd59c4d0b,"starling.display.DisplayObject.removeEventListener","starling/display/DisplayObject.hx",795,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_808_removeEventListeners,"starling.display.DisplayObject","removeEventListeners",0x13271d08,"starling.display.DisplayObject.removeEventListeners","starling/display/DisplayObject.hx",808,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_821___addEnterFrameListenerToStage,"starling.display.DisplayObject","__addEnterFrameListenerToStage",0xf9afd7d8,"starling.display.DisplayObject.__addEnterFrameListenerToStage","starling/display/DisplayObject.hx",821,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_826___removeEnterFrameListenerFromStage,"starling.display.DisplayObject","__removeEnterFrameListenerFromStage",0x1f6a1068,"starling.display.DisplayObject.__removeEnterFrameListenerFromStage","starling/display/DisplayObject.hx",826,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_842_get_transformationMatrix,"starling.display.DisplayObject","get_transformationMatrix",0x0ad01192,"starling.display.DisplayObject.get_transformationMatrix","starling/display/DisplayObject.hx",842,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_859_set_transformationMatrix,"starling.display.DisplayObject","set_transformationMatrix",0x1daa9306,"starling.display.DisplayObject.set_transformationMatrix","starling/display/DisplayObject.hx",859,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_903_get_transformationMatrix3D,"starling.display.DisplayObject","get_transformationMatrix3D",0x6c2546c3,"starling.display.DisplayObject.get_transformationMatrix3D","starling/display/DisplayObject.hx",903,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_920_get_is3D,"starling.display.DisplayObject","get_is3D",0x1b42b3c3,"starling.display.DisplayObject.get_is3D","starling/display/DisplayObject.hx",920,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_925_get_useHandCursor,"starling.display.DisplayObject","get_useHandCursor",0x9bae2924,"starling.display.DisplayObject.get_useHandCursor","starling/display/DisplayObject.hx",925,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_927_set_useHandCursor,"starling.display.DisplayObject","set_useHandCursor",0xbf1c0130,"starling.display.DisplayObject.set_useHandCursor","starling/display/DisplayObject.hx",927,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_941___onTouch,"starling.display.DisplayObject","__onTouch",0xe5f2e101,"starling.display.DisplayObject.__onTouch","starling/display/DisplayObject.hx",941,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_948_get_bounds,"starling.display.DisplayObject","get_bounds",0x89cfdd1d,"starling.display.DisplayObject.get_bounds","starling/display/DisplayObject.hx",948,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_955_get_width,"starling.display.DisplayObject","get_width",0xc83fec5e,"starling.display.DisplayObject.get_width","starling/display/DisplayObject.hx",955,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_957_set_width,"starling.display.DisplayObject","set_width",0xab90d86a,"starling.display.DisplayObject.set_width","starling/display/DisplayObject.hx",957,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_976_get_height,"starling.display.DisplayObject","get_height",0x25fe5e8f,"starling.display.DisplayObject.get_height","starling/display/DisplayObject.hx",976,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_978_set_height,"starling.display.DisplayObject","set_height",0x297bfd03,"starling.display.DisplayObject.set_height","starling/display/DisplayObject.hx",978,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_992_get_x,"starling.display.DisplayObject","get_x",0x5bbd2ad0,"starling.display.DisplayObject.get_x","starling/display/DisplayObject.hx",992,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_994_set_x,"starling.display.DisplayObject","set_x",0x448c20dc,"starling.display.DisplayObject.set_x","starling/display/DisplayObject.hx",994,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1005_get_y,"starling.display.DisplayObject","get_y",0x5bbd2ad1,"starling.display.DisplayObject.get_y","starling/display/DisplayObject.hx",1005,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1007_set_y,"starling.display.DisplayObject","set_y",0x448c20dd,"starling.display.DisplayObject.set_y","starling/display/DisplayObject.hx",1007,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1018_get_pivotX,"starling.display.DisplayObject","get_pivotX",0xaf1175fe,"starling.display.DisplayObject.get_pivotX","starling/display/DisplayObject.hx",1018,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1020_set_pivotX,"starling.display.DisplayObject","set_pivotX",0xb28f1472,"starling.display.DisplayObject.set_pivotX","starling/display/DisplayObject.hx",1020,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1031_get_pivotY,"starling.display.DisplayObject","get_pivotY",0xaf1175ff,"starling.display.DisplayObject.get_pivotY","starling/display/DisplayObject.hx",1031,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1033_set_pivotY,"starling.display.DisplayObject","set_pivotY",0xb28f1473,"starling.display.DisplayObject.set_pivotY","starling/display/DisplayObject.hx",1033,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1045_get_scaleX,"starling.display.DisplayObject","get_scaleX",0x5fd84136,"starling.display.DisplayObject.get_scaleX","starling/display/DisplayObject.hx",1045,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1047_set_scaleX,"starling.display.DisplayObject","set_scaleX",0x6355dfaa,"starling.display.DisplayObject.set_scaleX","starling/display/DisplayObject.hx",1047,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1059_get_scaleY,"starling.display.DisplayObject","get_scaleY",0x5fd84137,"starling.display.DisplayObject.get_scaleY","starling/display/DisplayObject.hx",1059,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1061_set_scaleY,"starling.display.DisplayObject","set_scaleY",0x6355dfab,"starling.display.DisplayObject.set_scaleY","starling/display/DisplayObject.hx",1061,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1073_get_scale,"starling.display.DisplayObject","get_scale",0x76ac04e2,"starling.display.DisplayObject.get_scale","starling/display/DisplayObject.hx",1073,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1074_set_scale,"starling.display.DisplayObject","set_scale",0x59fcf0ee,"starling.display.DisplayObject.set_scale","starling/display/DisplayObject.hx",1074,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1078_get_skewX,"starling.display.DisplayObject","get_skewX",0x7bf8cc66,"starling.display.DisplayObject.get_skewX","starling/display/DisplayObject.hx",1078,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1080_set_skewX,"starling.display.DisplayObject","set_skewX",0x5f49b872,"starling.display.DisplayObject.set_skewX","starling/display/DisplayObject.hx",1080,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1093_get_skewY,"starling.display.DisplayObject","get_skewY",0x7bf8cc67,"starling.display.DisplayObject.get_skewY","starling/display/DisplayObject.hx",1093,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1095_set_skewY,"starling.display.DisplayObject","set_skewY",0x5f49b873,"starling.display.DisplayObject.set_skewY","starling/display/DisplayObject.hx",1095,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1109_get_rotation,"starling.display.DisplayObject","get_rotation",0x3e798de6,"starling.display.DisplayObject.get_rotation","starling/display/DisplayObject.hx",1109,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1111_set_rotation,"starling.display.DisplayObject","set_rotation",0x5372b15a,"starling.display.DisplayObject.set_rotation","starling/display/DisplayObject.hx",1111,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1126_get_isRotated,"starling.display.DisplayObject","get_isRotated",0xf40f0937,"starling.display.DisplayObject.get_isRotated","starling/display/DisplayObject.hx",1126,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1131_get_alpha,"starling.display.DisplayObject","get_alpha",0x1f73ddb6,"starling.display.DisplayObject.get_alpha","starling/display/DisplayObject.hx",1131,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1133_set_alpha,"starling.display.DisplayObject","set_alpha",0x02c4c9c2,"starling.display.DisplayObject.set_alpha","starling/display/DisplayObject.hx",1133,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1144_get_visible,"starling.display.DisplayObject","get_visible",0xbb7df4ca,"starling.display.DisplayObject.get_visible","starling/display/DisplayObject.hx",1144,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1146_set_visible,"starling.display.DisplayObject","set_visible",0xc5eafbd6,"starling.display.DisplayObject.set_visible","starling/display/DisplayObject.hx",1146,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1157_get_touchable,"starling.display.DisplayObject","get_touchable",0x19ef1331,"starling.display.DisplayObject.get_touchable","starling/display/DisplayObject.hx",1157,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1158_set_touchable,"starling.display.DisplayObject","set_touchable",0x5ef4f53d,"starling.display.DisplayObject.set_touchable","starling/display/DisplayObject.hx",1158,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1164_get_blendMode,"starling.display.DisplayObject","get_blendMode",0x0b2b26ac,"starling.display.DisplayObject.get_blendMode","starling/display/DisplayObject.hx",1164,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1166_set_blendMode,"starling.display.DisplayObject","set_blendMode",0x503108b8,"starling.display.DisplayObject.set_blendMode","starling/display/DisplayObject.hx",1166,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1178_get_name,"starling.display.DisplayObject","get_name",0x1e834ef3,"starling.display.DisplayObject.get_name","starling/display/DisplayObject.hx",1178,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1179_set_name,"starling.display.DisplayObject","set_name",0xcce0a867,"starling.display.DisplayObject.set_name","starling/display/DisplayObject.hx",1179,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1195_get_filter,"starling.display.DisplayObject","get_filter",0xa8e77660,"starling.display.DisplayObject.get_filter","starling/display/DisplayObject.hx",1195,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1197_set_filter,"starling.display.DisplayObject","set_filter",0xac6514d4,"starling.display.DisplayObject.set_filter","starling/display/DisplayObject.hx",1197,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1238_get_mask,"starling.display.DisplayObject","get_mask",0x1dda1d94,"starling.display.DisplayObject.get_mask","starling/display/DisplayObject.hx",1238,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1240_set_mask,"starling.display.DisplayObject","set_mask",0xcc377708,"starling.display.DisplayObject.set_mask","starling/display/DisplayObject.hx",1240,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1268_get_maskInverted,"starling.display.DisplayObject","get_maskInverted",0xa3333ea9,"starling.display.DisplayObject.get_maskInverted","starling/display/DisplayObject.hx",1268,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1269_set_maskInverted,"starling.display.DisplayObject","set_maskInverted",0xf9752c1d,"starling.display.DisplayObject.set_maskInverted","starling/display/DisplayObject.hx",1269,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1273_get_parent,"starling.display.DisplayObject","get_parent",0x11305bd2,"starling.display.DisplayObject.get_parent","starling/display/DisplayObject.hx",1273,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1278_get_base,"starling.display.DisplayObject","get_base",0x1694c4b9,"starling.display.DisplayObject.get_base","starling/display/DisplayObject.hx",1278,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1289_get_root,"starling.display.DisplayObject","get_root",0x2132caca,"starling.display.DisplayObject.get_root","starling/display/DisplayObject.hx",1289,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_1303_get_stage,"starling.display.DisplayObject","get_stage",0x81e8a116,"starling.display.DisplayObject.get_stage","starling/display/DisplayObject.hx",1303,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_742___findCommonParent,"starling.display.DisplayObject","__findCommonParent",0x6e9f9f8d,"starling.display.DisplayObject.__findCommonParent","starling/display/DisplayObject.hx",742,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_160_boot,"starling.display.DisplayObject","boot",0xa397e9d1,"starling.display.DisplayObject.boot","starling/display/DisplayObject.hx",160,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_161_boot,"starling.display.DisplayObject","boot",0xa397e9d1,"starling.display.DisplayObject.boot","starling/display/DisplayObject.hx",161,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_162_boot,"starling.display.DisplayObject","boot",0xa397e9d1,"starling.display.DisplayObject.boot","starling/display/DisplayObject.hx",162,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_163_boot,"starling.display.DisplayObject","boot",0xa397e9d1,"starling.display.DisplayObject.boot","starling/display/DisplayObject.hx",163,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_164_boot,"starling.display.DisplayObject","boot",0xa397e9d1,"starling.display.DisplayObject.boot","starling/display/DisplayObject.hx",164,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_165_boot,"starling.display.DisplayObject","boot",0xa397e9d1,"starling.display.DisplayObject.boot","starling/display/DisplayObject.hx",165,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_166_boot,"starling.display.DisplayObject","boot",0xa397e9d1,"starling.display.DisplayObject.boot","starling/display/DisplayObject.hx",166,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_167_boot,"starling.display.DisplayObject","boot",0xa397e9d1,"starling.display.DisplayObject.boot","starling/display/DisplayObject.hx",167,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_168_boot,"starling.display.DisplayObject","boot",0xa397e9d1,"starling.display.DisplayObject.boot","starling/display/DisplayObject.hx",168,0xd154d7f1)
HX_LOCAL_STACK_FRAME(_hx_pos_c9579787cbd2d31a_169_boot,"starling.display.DisplayObject","boot",0xa397e9d1,"starling.display.DisplayObject.boot","starling/display/DisplayObject.hx",169,0xd154d7f1)
namespace starling{
namespace display{

void DisplayObject_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_120_new)
HXLINE( 153)		this->_hx___popToken =  ::starling::rendering::BatchToken_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 152)		this->_hx___pushToken =  ::starling::rendering::BatchToken_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 144)		this->_hx___maskInverted = false;
HXLINE( 215)		super::__construct();
HXLINE( 217)		this->_hx___x = (this->_hx___y = (this->_hx___pivotX = (this->_hx___pivotY = (this->_hx___rotation = (this->_hx___skewX = (this->_hx___skewY = ((Float)0.0)))))));
HXLINE( 218)		this->_hx___scaleX = (this->_hx___scaleY = (this->_hx___alpha = ((Float)1.0)));
HXLINE( 219)		this->_hx___visible = (this->_hx___touchable = (this->_hx___hasVisibleArea = true));
HXLINE( 220)		this->_hx___blendMode = HX_("auto",6f,df,76,40);
HXLINE( 221)		this->_hx___transformationMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}

Dynamic DisplayObject_obj::__CreateEmpty() { return new DisplayObject_obj; }

void *DisplayObject_obj::_hx_vtable = 0;

Dynamic DisplayObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObject_obj > _hx_result = new DisplayObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25137bc0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
	} else {
		return inClassId==(int)0x6dea180f;
	}
}

void DisplayObject_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_227_dispose)
HXLINE( 228)		if (hx::IsNotNull( this->__filter )) {
HXLINE( 228)			this->__filter->dispose();
            		}
HXLINE( 229)		if (hx::IsNotNull( this->_hx___mask )) {
HXLINE( 229)			this->_hx___mask->dispose();
            		}
HXLINE( 230)		this->removeEventListeners(null());
HXLINE( 231)		this->set_mask(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,dispose,(void))

void DisplayObject_obj::removeFromParent(hx::Null< bool >  __o_dispose){
bool dispose = __o_dispose.Default(false);
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_237_removeFromParent)
HXDLIN( 237)		if (hx::IsNotNull( this->_hx___parent )) {
HXDLIN( 237)			this->_hx___parent->removeChild(hx::ObjectPtr<OBJ_>(this),dispose);
            		}
            		else {
HXLINE( 238)			if (dispose) {
HXLINE( 238)				this->dispose();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,removeFromParent,(void))

 ::openfl::geom::Matrix DisplayObject_obj::getTransformationMatrix( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Matrix out){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_246_getTransformationMatrix)
HXLINE( 247)		 ::starling::display::DisplayObject commonParent;
HXLINE( 248)		 ::starling::display::DisplayObject currentObject;
HXLINE( 250)		if (hx::IsNotNull( out )) {
HXLINE( 250)			out->identity();
            		}
            		else {
HXLINE( 251)			out =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 253)		if (hx::IsEq( targetSpace,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 255)			return out;
            		}
            		else {
HXLINE( 257)			bool _hx_tmp;
HXDLIN( 257)			if (hx::IsNotEq( targetSpace,this->_hx___parent )) {
HXLINE( 257)				if (hx::IsNull( targetSpace )) {
HXLINE( 257)					_hx_tmp = hx::IsNull( this->_hx___parent );
            				}
            				else {
HXLINE( 257)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 257)				_hx_tmp = true;
            			}
HXDLIN( 257)			if (_hx_tmp) {
HXLINE( 259)				out->copyFrom(this->get_transformationMatrix());
HXLINE( 260)				return out;
            			}
            			else {
HXLINE( 262)				bool _hx_tmp1;
HXDLIN( 262)				if (hx::IsNotNull( targetSpace )) {
HXLINE( 262)					_hx_tmp1 = hx::IsEq( targetSpace,this->get_base() );
            				}
            				else {
HXLINE( 262)					_hx_tmp1 = true;
            				}
HXDLIN( 262)				if (_hx_tmp1) {
HXLINE( 267)					currentObject = hx::ObjectPtr<OBJ_>(this);
HXLINE( 268)					while(hx::IsNotEq( currentObject,targetSpace )){
HXLINE( 270)						out->concat(currentObject->get_transformationMatrix());
HXLINE( 271)						currentObject = currentObject->_hx___parent;
            					}
HXLINE( 274)					return out;
            				}
            				else {
HXLINE( 276)					if (hx::IsEq( targetSpace->_hx___parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 278)						targetSpace->getTransformationMatrix(hx::ObjectPtr<OBJ_>(this),out);
HXLINE( 279)						out->invert();
HXLINE( 281)						return out;
            					}
            				}
            			}
            		}
HXLINE( 286)		commonParent = ::starling::display::DisplayObject_obj::_hx___findCommonParent(hx::ObjectPtr<OBJ_>(this),targetSpace);
HXLINE( 290)		currentObject = hx::ObjectPtr<OBJ_>(this);
HXLINE( 291)		while(hx::IsNotEq( currentObject,commonParent )){
HXLINE( 293)			out->concat(currentObject->get_transformationMatrix());
HXLINE( 294)			currentObject = currentObject->_hx___parent;
            		}
HXLINE( 297)		if (hx::IsEq( commonParent,targetSpace )) {
HXLINE( 298)			return out;
            		}
HXLINE( 302)		::starling::display::DisplayObject_obj::sHelperMatrix->identity();
HXLINE( 303)		currentObject = targetSpace;
HXLINE( 304)		while(hx::IsNotEq( currentObject,commonParent )){
HXLINE( 306)			 ::openfl::geom::Matrix _hx_tmp2 = ::starling::display::DisplayObject_obj::sHelperMatrix;
HXDLIN( 306)			_hx_tmp2->concat(currentObject->get_transformationMatrix());
HXLINE( 307)			currentObject = currentObject->_hx___parent;
            		}
HXLINE( 312)		::starling::display::DisplayObject_obj::sHelperMatrix->invert();
HXLINE( 313)		out->concat(::starling::display::DisplayObject_obj::sHelperMatrix);
HXLINE( 315)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,getTransformationMatrix,return )

 ::openfl::geom::Rectangle DisplayObject_obj::getBounds( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle out){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_323_getBounds)
HXDLIN( 323)		HX_STACK_DO_THROW( ::starling::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 323)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,getBounds,return )

 ::starling::display::DisplayObject DisplayObject_obj::hitTest( ::openfl::geom::Point localPoint){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_329_hitTest)
HXLINE( 331)		bool _hx_tmp;
HXDLIN( 331)		if (!(!(this->_hx___visible))) {
HXLINE( 331)			_hx_tmp = !(this->_hx___touchable);
            		}
            		else {
HXLINE( 331)			_hx_tmp = true;
            		}
HXDLIN( 331)		if (_hx_tmp) {
HXLINE( 331)			return null();
            		}
HXLINE( 334)		bool _hx_tmp1;
HXDLIN( 334)		if (hx::IsNotNull( this->_hx___mask )) {
HXLINE( 334)			_hx_tmp1 = !(this->hitTestMask(localPoint));
            		}
            		else {
HXLINE( 334)			_hx_tmp1 = false;
            		}
HXDLIN( 334)		if (_hx_tmp1) {
HXLINE( 334)			return null();
            		}
HXLINE( 337)		if (this->getBounds(hx::ObjectPtr<OBJ_>(this),::starling::display::DisplayObject_obj::sHelperRect)->containsPoint(localPoint)) {
HXLINE( 337)			return hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE( 338)			return null();
            		}
HXLINE( 337)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,hitTest,return )

bool DisplayObject_obj::hitTestMask( ::openfl::geom::Point localPoint){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_346_hitTestMask)
HXDLIN( 346)		if (hx::IsNotNull( this->_hx___mask )) {
HXLINE( 348)			if (hx::IsNotNull( this->_hx___mask->get_stage() )) {
HXLINE( 348)				this->getTransformationMatrix(this->_hx___mask,::starling::display::DisplayObject_obj::sHelperMatrixAlt);
            			}
            			else {
HXLINE( 351)				 ::openfl::geom::Matrix _hx_tmp = ::starling::display::DisplayObject_obj::sHelperMatrixAlt;
HXDLIN( 351)				_hx_tmp->copyFrom(this->_hx___mask->get_transformationMatrix());
HXLINE( 352)				::starling::display::DisplayObject_obj::sHelperMatrixAlt->invert();
            			}
HXLINE( 355)			 ::openfl::geom::Point helperPoint;
HXDLIN( 355)			if (hx::IsEq( localPoint,::starling::display::DisplayObject_obj::sHelperPoint )) {
HXLINE( 355)				helperPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 355)				helperPoint = ::starling::display::DisplayObject_obj::sHelperPoint;
            			}
HXLINE( 356)			::starling::utils::MatrixUtil_obj::transformPoint(::starling::display::DisplayObject_obj::sHelperMatrixAlt,localPoint,helperPoint);
HXLINE( 357)			bool isMaskHit = hx::IsNotNull( this->_hx___mask->hitTest(helperPoint) );
HXLINE( 358)			if (this->_hx___maskInverted) {
HXLINE( 358)				return !(isMaskHit);
            			}
            			else {
HXLINE( 358)				return isMaskHit;
            			}
            		}
            		else {
HXLINE( 360)			return true;
            		}
HXLINE( 346)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,hitTestMask,return )

 ::openfl::geom::Point DisplayObject_obj::localToGlobal( ::openfl::geom::Point localPoint, ::openfl::geom::Point out){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_368_localToGlobal)
HXDLIN( 368)		if (this->get_is3D()) {
HXLINE( 370)			::starling::display::DisplayObject_obj::sHelperPoint3D->setTo(localPoint->x,localPoint->y,(int)0);
HXLINE( 371)			return this->local3DToGlobal(::starling::display::DisplayObject_obj::sHelperPoint3D,out);
            		}
            		else {
HXLINE( 375)			 ::starling::display::DisplayObject _hx_tmp = this->get_base();
HXDLIN( 375)			this->getTransformationMatrix(_hx_tmp,::starling::display::DisplayObject_obj::sHelperMatrixAlt);
HXLINE( 376)			return ::starling::utils::MatrixUtil_obj::transformPoint(::starling::display::DisplayObject_obj::sHelperMatrixAlt,localPoint,out);
            		}
HXLINE( 368)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,localToGlobal,return )

 ::openfl::geom::Point DisplayObject_obj::globalToLocal( ::openfl::geom::Point globalPoint, ::openfl::geom::Point out){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_385_globalToLocal)
HXDLIN( 385)		if (this->get_is3D()) {
HXLINE( 387)			this->globalToLocal3D(globalPoint,::starling::display::DisplayObject_obj::sHelperPoint3D);
HXLINE( 388)			this->get_stage()->getCameraPosition(hx::ObjectPtr<OBJ_>(this),::starling::display::DisplayObject_obj::sHelperPointAlt3D);
HXLINE( 389)			return ::starling::utils::MathUtil_obj::intersectLineWithXYPlane(::starling::display::DisplayObject_obj::sHelperPointAlt3D,::starling::display::DisplayObject_obj::sHelperPoint3D,out);
            		}
            		else {
HXLINE( 393)			 ::starling::display::DisplayObject _hx_tmp = this->get_base();
HXDLIN( 393)			this->getTransformationMatrix(_hx_tmp,::starling::display::DisplayObject_obj::sHelperMatrixAlt);
HXLINE( 394)			::starling::display::DisplayObject_obj::sHelperMatrixAlt->invert();
HXLINE( 395)			return ::starling::utils::MatrixUtil_obj::transformPoint(::starling::display::DisplayObject_obj::sHelperMatrixAlt,globalPoint,out);
            		}
HXLINE( 385)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,globalToLocal,return )

void DisplayObject_obj::render( ::starling::rendering::Painter painter){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_407_render)
HXDLIN( 407)		HX_STACK_DO_THROW( ::starling::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,render,(void))

void DisplayObject_obj::alignPivot(::String __o_horizontalAlign,::String __o_verticalAlign){
::String horizontalAlign = __o_horizontalAlign.Default(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
::String verticalAlign = __o_verticalAlign.Default(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_414_alignPivot)
HXLINE( 415)		 ::openfl::geom::Rectangle bounds = this->getBounds(hx::ObjectPtr<OBJ_>(this),::starling::display::DisplayObject_obj::sHelperRect);
HXLINE( 417)		if ((horizontalAlign == HX_("left",07,08,b0,47))) {
HXLINE( 417)			this->set_pivotX(bounds->x);
            		}
            		else {
HXLINE( 418)			if ((horizontalAlign == HX_("center",d5,25,db,05))) {
HXLINE( 418)				Float bounds1 = bounds->x;
HXDLIN( 418)				this->set_pivotX((bounds1 + ((Float)bounds->width / (Float)((Float)2.0))));
            			}
            			else {
HXLINE( 419)				if ((horizontalAlign == HX_("right",dc,0b,64,e9))) {
HXLINE( 419)					this->set_pivotX((bounds->x + bounds->width));
            				}
            				else {
HXLINE( 420)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid horizontal alignment: ",36,db,92,72) + horizontalAlign)));
            				}
            			}
            		}
HXLINE( 422)		if ((verticalAlign == HX_("top",95,66,58,00))) {
HXLINE( 422)			this->set_pivotY(bounds->y);
            		}
            		else {
HXLINE( 423)			if ((verticalAlign == HX_("center",d5,25,db,05))) {
HXLINE( 423)				Float bounds2 = bounds->y;
HXDLIN( 423)				this->set_pivotY((bounds2 + ((Float)bounds->height / (Float)((Float)2.0))));
            			}
            			else {
HXLINE( 424)				if ((verticalAlign == HX_("bottom",eb,e6,78,65))) {
HXLINE( 424)					this->set_pivotY((bounds->y + bounds->height));
            				}
            				else {
HXLINE( 425)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid vertical alignment: ",88,21,97,6a) + verticalAlign)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,alignPivot,(void))

 ::openfl::display::BitmapData DisplayObject_obj::drawToBitmapData( ::openfl::display::BitmapData out,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha){
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(((Float)0.0));
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_438_drawToBitmapData)
HXLINE( 439)		 ::starling::rendering::Painter painter = ::starling::core::Starling_obj::get_current()->get_painter();
HXLINE( 440)		 ::starling::display::Stage stage = ::starling::core::Starling_obj::get_current()->get_stage();
HXLINE( 441)		 ::openfl::geom::Rectangle viewPort = ::starling::core::Starling_obj::get_current()->get_viewPort();
HXLINE( 442)		Float stageWidth = stage->get_stageWidth();
HXLINE( 443)		Float stageHeight = stage->get_stageHeight();
HXLINE( 444)		Float scaleX = ((Float)viewPort->width / (Float)stageWidth);
HXLINE( 445)		Float scaleY = ((Float)viewPort->height / (Float)stageHeight);
HXLINE( 446)		Float backBufferScale = painter->get_backBufferScaleFactor();
HXLINE( 447)		Float projectionX;
HXDLIN( 447)		Float projectionY;
HXLINE( 448)		 ::openfl::geom::Rectangle bounds;
HXLINE( 450)		if (::Std_obj::is(hx::ObjectPtr<OBJ_>(this),hx::ClassOf< ::starling::display::Stage >())) {
HXLINE( 452)			if ((viewPort->x < (int)0)) {
HXLINE( 452)				projectionX = ((Float)-(viewPort->x) / (Float)scaleX);
            			}
            			else {
HXLINE( 452)				projectionX = ((Float)0.0);
            			}
HXLINE( 453)			if ((viewPort->y < (int)0)) {
HXLINE( 453)				projectionY = ((Float)-(viewPort->y) / (Float)scaleY);
            			}
            			else {
HXLINE( 453)				projectionY = ((Float)0.0);
            			}
HXLINE( 455)			if (hx::IsNull( out )) {
HXLINE( 455)				int out1 = ::Std_obj::_hx_int((painter->get_backBufferWidth() * backBufferScale));
HXDLIN( 455)				out =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,out1,::Std_obj::_hx_int((painter->get_backBufferHeight() * backBufferScale)),null(),null());
            			}
            		}
            		else {
HXLINE( 460)			bounds = this->getBounds(this->_hx___parent,::starling::display::DisplayObject_obj::sHelperRect);
HXLINE( 461)			projectionX = bounds->x;
HXLINE( 462)			projectionY = bounds->y;
HXLINE( 464)			if (hx::IsNull( out )) {
HXLINE( 464)				int out2 = ::Math_obj::ceil(((bounds->width * scaleX) * backBufferScale));
HXDLIN( 464)				out =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,out2,::Math_obj::ceil(((bounds->height * scaleY) * backBufferScale)),null(),null());
            			}
            		}
HXLINE( 468)		color = ::starling::utils::Color_obj::multiply(color,alpha);
HXLINE( 470)		painter->clear(color,alpha);
HXLINE( 471)		painter->pushState(null());
HXLINE( 472)		painter->setupContextDefaults();
HXLINE( 473)		painter->get_state()->set_renderTarget(null());
HXLINE( 474)		painter->get_state()->setModelviewMatricesToIdentity();
HXLINE( 475)		painter->setStateTo(this->get_transformationMatrix(),null(),null());
HXLINE( 476)		 ::starling::rendering::RenderState _hx_tmp = painter->get_state();
HXLINE( 477)		Float _hx_tmp1 = ((Float)painter->get_backBufferWidth() / (Float)scaleX);
HXDLIN( 477)		Float _hx_tmp2 = ((Float)painter->get_backBufferHeight() / (Float)scaleY);
HXLINE( 476)		_hx_tmp->setProjectionMatrix(projectionX,projectionY,_hx_tmp1,_hx_tmp2,stageWidth,stageHeight,stage->get_cameraPosition());
HXLINE( 480)		this->render(painter);
HXLINE( 482)		painter->finishMeshBatch();
HXLINE( 483)		painter->get_context()->drawToBitmapData(out);
HXLINE( 484)		painter->popState(null());
HXLINE( 486)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,drawToBitmapData,return )

 ::openfl::geom::Matrix3D DisplayObject_obj::getTransformationMatrix3D( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Matrix3D out){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_497_getTransformationMatrix3D)
HXLINE( 498)		 ::starling::display::DisplayObject commonParent;
HXLINE( 499)		 ::starling::display::DisplayObject currentObject;
HXLINE( 501)		if (hx::IsNotNull( out )) {
HXLINE( 501)			out->identity();
            		}
            		else {
HXLINE( 502)			out =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            		}
HXLINE( 504)		if (hx::IsEq( targetSpace,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 506)			return out;
            		}
            		else {
HXLINE( 508)			bool _hx_tmp;
HXDLIN( 508)			if (hx::IsNotEq( targetSpace,this->_hx___parent )) {
HXLINE( 508)				if (hx::IsNull( targetSpace )) {
HXLINE( 508)					_hx_tmp = hx::IsNull( this->_hx___parent );
            				}
            				else {
HXLINE( 508)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 508)				_hx_tmp = true;
            			}
HXDLIN( 508)			if (_hx_tmp) {
HXLINE( 510)				out->copyFrom(this->get_transformationMatrix3D());
HXLINE( 511)				return out;
            			}
            			else {
HXLINE( 513)				bool _hx_tmp1;
HXDLIN( 513)				if (hx::IsNotNull( targetSpace )) {
HXLINE( 513)					_hx_tmp1 = hx::IsEq( targetSpace,this->get_base() );
            				}
            				else {
HXLINE( 513)					_hx_tmp1 = true;
            				}
HXDLIN( 513)				if (_hx_tmp1) {
HXLINE( 518)					currentObject = hx::ObjectPtr<OBJ_>(this);
HXLINE( 519)					while(hx::IsNotEq( currentObject,targetSpace )){
HXLINE( 521)						out->append(currentObject->get_transformationMatrix3D());
HXLINE( 522)						currentObject = currentObject->_hx___parent;
            					}
HXLINE( 525)					return out;
            				}
            				else {
HXLINE( 527)					if (hx::IsEq( targetSpace->_hx___parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 529)						targetSpace->getTransformationMatrix3D(hx::ObjectPtr<OBJ_>(this),out);
HXLINE( 530)						out->invert();
HXLINE( 532)						return out;
            					}
            				}
            			}
            		}
HXLINE( 537)		commonParent = ::starling::display::DisplayObject_obj::_hx___findCommonParent(hx::ObjectPtr<OBJ_>(this),targetSpace);
HXLINE( 541)		currentObject = hx::ObjectPtr<OBJ_>(this);
HXLINE( 542)		while(hx::IsNotEq( currentObject,commonParent )){
HXLINE( 544)			out->append(currentObject->get_transformationMatrix3D());
HXLINE( 545)			currentObject = currentObject->_hx___parent;
            		}
HXLINE( 548)		if (hx::IsEq( commonParent,targetSpace )) {
HXLINE( 549)			return out;
            		}
HXLINE( 553)		::starling::display::DisplayObject_obj::sHelperMatrix3D->identity();
HXLINE( 554)		currentObject = targetSpace;
HXLINE( 555)		while(hx::IsNotEq( currentObject,commonParent )){
HXLINE( 557)			 ::openfl::geom::Matrix3D _hx_tmp2 = ::starling::display::DisplayObject_obj::sHelperMatrix3D;
HXDLIN( 557)			_hx_tmp2->append(currentObject->get_transformationMatrix3D());
HXLINE( 558)			currentObject = currentObject->_hx___parent;
            		}
HXLINE( 563)		::starling::display::DisplayObject_obj::sHelperMatrix3D->invert();
HXLINE( 564)		out->append(::starling::display::DisplayObject_obj::sHelperMatrix3D);
HXLINE( 566)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,getTransformationMatrix3D,return )

 ::openfl::geom::Point DisplayObject_obj::local3DToGlobal( ::openfl::geom::Vector3D localPoint, ::openfl::geom::Point out){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_575_local3DToGlobal)
HXLINE( 576)		 ::starling::display::Stage stage = this->get_stage();
HXLINE( 577)		if (hx::IsNull( stage )) {
HXLINE( 577)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Object not connected to stage",9e,6e,e0,bc)));
            		}
HXLINE( 579)		this->getTransformationMatrix3D(stage,::starling::display::DisplayObject_obj::sHelperMatrixAlt3D);
HXLINE( 580)		::starling::utils::MatrixUtil_obj::transformPoint3D(::starling::display::DisplayObject_obj::sHelperMatrixAlt3D,localPoint,::starling::display::DisplayObject_obj::sHelperPoint3D);
HXLINE( 581)		 ::openfl::geom::Vector3D _hx_tmp = stage->get_cameraPosition();
HXDLIN( 581)		return ::starling::utils::MathUtil_obj::intersectLineWithXYPlane(_hx_tmp,::starling::display::DisplayObject_obj::sHelperPoint3D,out);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,local3DToGlobal,return )

 ::openfl::geom::Vector3D DisplayObject_obj::globalToLocal3D( ::openfl::geom::Point globalPoint, ::openfl::geom::Vector3D out){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_588_globalToLocal3D)
HXLINE( 589)		 ::starling::display::Stage stage = this->get_stage();
HXLINE( 590)		if (hx::IsNull( stage )) {
HXLINE( 590)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Object not connected to stage",9e,6e,e0,bc)));
            		}
HXLINE( 592)		this->getTransformationMatrix3D(stage,::starling::display::DisplayObject_obj::sHelperMatrixAlt3D);
HXLINE( 593)		::starling::display::DisplayObject_obj::sHelperMatrixAlt3D->invert();
HXLINE( 594)		return ::starling::utils::MatrixUtil_obj::transformCoords3D(::starling::display::DisplayObject_obj::sHelperMatrixAlt3D,globalPoint->x,globalPoint->y,(int)0,out);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,globalToLocal3D,return )

void DisplayObject_obj::_hx___setParent( ::starling::display::DisplayObjectContainer value){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_602___setParent)
HXLINE( 604)		 ::starling::display::DisplayObject ancestor = value;
HXLINE( 605)		while(true){
HXLINE( 605)			bool _hx_tmp;
HXDLIN( 605)			if (hx::IsNotEq( ancestor,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 605)				_hx_tmp = hx::IsNotNull( ancestor );
            			}
            			else {
HXLINE( 605)				_hx_tmp = false;
            			}
HXDLIN( 605)			if (!(_hx_tmp)) {
HXLINE( 605)				goto _hx_goto_21;
            			}
HXLINE( 606)			ancestor = ancestor->_hx___parent;
            		}
            		_hx_goto_21:;
HXLINE( 608)		if (hx::IsEq( ancestor,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 609)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("An object cannot be added as a child to itself or one ",30,53,3f,40) + HX_("of its children (or children's children, etc.)",3c,6d,30,12))));
            		}
            		else {
HXLINE( 612)			this->_hx___parent = value;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___setParent,(void))

void DisplayObject_obj::_hx___setIs3D(bool value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_618___setIs3D)
HXDLIN( 618)		this->_hx___is3D = value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___setIs3D,(void))

bool DisplayObject_obj::get_isMask(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_625_get_isMask)
HXDLIN( 625)		return hx::IsNotNull( this->_hx___maskee );
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_isMask,return )

void DisplayObject_obj::setRequiresRedraw(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_642_setRequiresRedraw)
HXLINE( 643)		 ::starling::display::DisplayObject parent;
HXDLIN( 643)		if (hx::IsNotNull( this->_hx___parent )) {
HXLINE( 643)			parent = this->_hx___parent;
            		}
            		else {
HXLINE( 643)			parent = this->_hx___maskee;
            		}
HXLINE( 644)		int frameID;
HXDLIN( 644)		if (hx::IsNotNull( ::starling::core::Starling_obj::get_current() )) {
HXLINE( 644)			frameID = ::starling::core::Starling_obj::get_current()->get_frameID();
            		}
            		else {
HXLINE( 644)			frameID = (int)0;
            		}
HXLINE( 646)		this->_hx___lastParentOrSelfChangeFrameID = frameID;
HXLINE( 647)		bool _hx_tmp;
HXDLIN( 647)		bool _hx_tmp1;
HXDLIN( 647)		bool _hx_tmp2;
HXDLIN( 647)		bool _hx_tmp3;
HXDLIN( 647)		if ((this->_hx___alpha != ((Float)0.0))) {
HXLINE( 647)			_hx_tmp3 = this->_hx___visible;
            		}
            		else {
HXLINE( 647)			_hx_tmp3 = false;
            		}
HXDLIN( 647)		if (_hx_tmp3) {
HXLINE( 647)			_hx_tmp2 = hx::IsNull( this->_hx___maskee );
            		}
            		else {
HXLINE( 647)			_hx_tmp2 = false;
            		}
HXDLIN( 647)		if (_hx_tmp2) {
HXLINE( 647)			_hx_tmp1 = (this->_hx___scaleX != ((Float)0.0));
            		}
            		else {
HXLINE( 647)			_hx_tmp1 = false;
            		}
HXDLIN( 647)		if (_hx_tmp1) {
HXLINE( 647)			_hx_tmp = (this->_hx___scaleY != ((Float)0.0));
            		}
            		else {
HXLINE( 647)			_hx_tmp = false;
            		}
HXDLIN( 647)		this->_hx___hasVisibleArea = _hx_tmp;
HXLINE( 650)		while(true){
HXLINE( 650)			bool _hx_tmp4;
HXDLIN( 650)			if (hx::IsNotNull( parent )) {
HXLINE( 650)				_hx_tmp4 = (parent->_hx___lastChildChangeFrameID != frameID);
            			}
            			else {
HXLINE( 650)				_hx_tmp4 = false;
            			}
HXDLIN( 650)			if (!(_hx_tmp4)) {
HXLINE( 650)				goto _hx_goto_25;
            			}
HXLINE( 652)			parent->_hx___lastChildChangeFrameID = frameID;
HXLINE( 653)			if (hx::IsNotNull( parent->_hx___parent )) {
HXLINE( 653)				parent = parent->_hx___parent;
            			}
            			else {
HXLINE( 653)				parent = parent->_hx___maskee;
            			}
            		}
            		_hx_goto_25:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,setRequiresRedraw,(void))

bool DisplayObject_obj::get_requiresRedraw(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_662_get_requiresRedraw)
HXLINE( 663)		int frameID = ::starling::core::Starling_obj::get_current()->get_frameID();
HXLINE( 665)		if ((this->_hx___lastParentOrSelfChangeFrameID != frameID)) {
HXLINE( 666)			return (this->_hx___lastChildChangeFrameID == frameID);
            		}
            		else {
HXLINE( 665)			return true;
            		}
HXDLIN( 665)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_requiresRedraw,return )

void DisplayObject_obj::excludeFromCache(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_673_excludeFromCache)
HXLINE( 674)		 ::starling::display::DisplayObject object = hx::ObjectPtr<OBJ_>(this);
HXLINE( 675)		int max = (int)-1;
HXLINE( 677)		while(true){
HXLINE( 677)			bool _hx_tmp;
HXDLIN( 677)			if (hx::IsNotNull( object )) {
HXLINE( 677)				_hx_tmp = (object->_hx___tokenFrameID != max);
            			}
            			else {
HXLINE( 677)				_hx_tmp = false;
            			}
HXDLIN( 677)			if (!(_hx_tmp)) {
HXLINE( 677)				goto _hx_goto_28;
            			}
HXLINE( 679)			object->_hx___tokenFrameID = max;
HXLINE( 680)			object = object->_hx___parent;
            		}
            		_hx_goto_28:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,excludeFromCache,(void))

void DisplayObject_obj::_hx___setTransformationChanged(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_688___setTransformationChanged)
HXLINE( 689)		this->_hx___transformationChanged = true;
HXLINE( 690)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setTransformationChanged,(void))

void DisplayObject_obj::_hx___updateTransformationMatrices(Float x,Float y,Float pivotX,Float pivotY,Float scaleX,Float scaleY,Float skewX,Float skewY,Float rotation, ::openfl::geom::Matrix out, ::openfl::geom::Matrix3D out3D){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_697___updateTransformationMatrices)
HXLINE( 698)		bool _hx_tmp;
HXDLIN( 698)		if ((skewX == ((Float)0.0))) {
HXLINE( 698)			_hx_tmp = (skewY == ((Float)0.0));
            		}
            		else {
HXLINE( 698)			_hx_tmp = false;
            		}
HXDLIN( 698)		if (_hx_tmp) {
HXLINE( 702)			if ((rotation == ((Float)0.0))) {
HXLINE( 704)				out->setTo(scaleX,((Float)0.0),((Float)0.0),scaleY,(x - (pivotX * scaleX)),(y - (pivotY * scaleY)));
            			}
            			else {
HXLINE( 709)				Float cos = ::Math_obj::cos(rotation);
HXLINE( 710)				Float sin = ::Math_obj::sin(rotation);
HXLINE( 711)				Float a = (scaleX * cos);
HXLINE( 712)				Float b = (scaleX * sin);
HXLINE( 713)				Float c = (scaleY * -(sin));
HXLINE( 714)				Float d = (scaleY * cos);
HXLINE( 715)				Float tx = ((x - (pivotX * a)) - (pivotY * c));
HXLINE( 716)				Float ty = ((y - (pivotX * b)) - (pivotY * d));
HXLINE( 718)				out->setTo(a,b,c,d,tx,ty);
            			}
            		}
            		else {
HXLINE( 723)			out->identity();
HXLINE( 724)			out->scale(scaleX,scaleY);
HXLINE( 725)			::starling::utils::MatrixUtil_obj::skew(out,skewX,skewY);
HXLINE( 726)			out->rotate(rotation);
HXLINE( 727)			out->translate(x,y);
HXLINE( 729)			bool _hx_tmp1;
HXDLIN( 729)			if ((pivotX == ((Float)0.0))) {
HXLINE( 729)				_hx_tmp1 = (pivotY != ((Float)0.0));
            			}
            			else {
HXLINE( 729)				_hx_tmp1 = true;
            			}
HXDLIN( 729)			if (_hx_tmp1) {
HXLINE( 732)				Float _hx_tmp2 = (x - (out->a * pivotX));
HXDLIN( 732)				out->tx = (_hx_tmp2 - (out->c * pivotY));
HXLINE( 733)				Float _hx_tmp3 = (y - (out->b * pivotX));
HXDLIN( 733)				out->ty = (_hx_tmp3 - (out->d * pivotY));
            			}
            		}
HXLINE( 737)		if (hx::IsNotNull( out3D )) {
HXLINE( 737)			::starling::utils::MatrixUtil_obj::convertTo3D(out,out3D);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC11(DisplayObject_obj,_hx___updateTransformationMatrices,(void))

void DisplayObject_obj::dispatchEvent( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_766_dispatchEvent)
HXDLIN( 766)		bool _hx_tmp;
HXDLIN( 766)		if ((event->type == HX_("removedFromStage",34,21,76,ba))) {
HXDLIN( 766)			_hx_tmp = hx::IsNull( this->get_stage() );
            		}
            		else {
HXDLIN( 766)			_hx_tmp = false;
            		}
HXDLIN( 766)		if (_hx_tmp) {
HXLINE( 767)			return;
            		}
            		else {
HXLINE( 769)			this->super::dispatchEvent(event);
            		}
            	}


void DisplayObject_obj::addEventListener(::String type, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_782_addEventListener)
HXLINE( 783)		bool _hx_tmp;
HXDLIN( 783)		if ((type == HX_("enterFrame",f5,03,50,02))) {
HXLINE( 783)			_hx_tmp = !(this->hasEventListener(type,null()));
            		}
            		else {
HXLINE( 783)			_hx_tmp = false;
            		}
HXDLIN( 783)		if (_hx_tmp) {
HXLINE( 785)			this->addEventListener(HX_("addedToStage",63,22,55,0c),this->_hx___addEnterFrameListenerToStage_dyn());
HXLINE( 786)			this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->_hx___removeEnterFrameListenerFromStage_dyn());
HXLINE( 787)			if (hx::IsNotNull( this->get_stage() )) {
HXLINE( 787)				this->_hx___addEnterFrameListenerToStage(null());
            			}
            		}
HXLINE( 790)		this->super::addEventListener(type,listener);
            	}


void DisplayObject_obj::removeEventListener(::String type, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_795_removeEventListener)
HXLINE( 796)		this->super::removeEventListener(type,listener);
HXLINE( 798)		bool _hx_tmp;
HXDLIN( 798)		if ((type == HX_("enterFrame",f5,03,50,02))) {
HXLINE( 798)			_hx_tmp = !(this->hasEventListener(type,null()));
            		}
            		else {
HXLINE( 798)			_hx_tmp = false;
            		}
HXDLIN( 798)		if (_hx_tmp) {
HXLINE( 800)			this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->_hx___addEnterFrameListenerToStage_dyn());
HXLINE( 801)			this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->_hx___removeEnterFrameListenerFromStage_dyn());
HXLINE( 802)			this->_hx___removeEnterFrameListenerFromStage(null());
            		}
            	}


void DisplayObject_obj::removeEventListeners(::String type){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_808_removeEventListeners)
HXLINE( 809)		bool _hx_tmp;
HXDLIN( 809)		bool _hx_tmp1;
HXDLIN( 809)		if (hx::IsNotNull( type )) {
HXLINE( 809)			_hx_tmp1 = (type == HX_("enterFrame",f5,03,50,02));
            		}
            		else {
HXLINE( 809)			_hx_tmp1 = true;
            		}
HXDLIN( 809)		if (_hx_tmp1) {
HXLINE( 809)			_hx_tmp = this->hasEventListener(HX_("enterFrame",f5,03,50,02),null());
            		}
            		else {
HXLINE( 809)			_hx_tmp = false;
            		}
HXDLIN( 809)		if (_hx_tmp) {
HXLINE( 811)			this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->_hx___addEnterFrameListenerToStage_dyn());
HXLINE( 812)			this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->_hx___removeEnterFrameListenerFromStage_dyn());
HXLINE( 813)			this->_hx___removeEnterFrameListenerFromStage(null());
            		}
HXLINE( 816)		this->super::removeEventListeners(type);
            	}


void DisplayObject_obj::_hx___addEnterFrameListenerToStage( ::starling::events::Event e){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_821___addEnterFrameListenerToStage)
HXDLIN( 821)		::starling::core::Starling_obj::get_current()->get_stage()->addEnterFrameListener(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___addEnterFrameListenerToStage,(void))

void DisplayObject_obj::_hx___removeEnterFrameListenerFromStage( ::starling::events::Event e){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_826___removeEnterFrameListenerFromStage)
HXDLIN( 826)		::starling::core::Starling_obj::get_current()->get_stage()->removeEnterFrameListener(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___removeEnterFrameListenerFromStage,(void))

 ::openfl::geom::Matrix DisplayObject_obj::get_transformationMatrix(){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_842_get_transformationMatrix)
HXLINE( 843)		if (this->_hx___transformationChanged) {
HXLINE( 845)			this->_hx___transformationChanged = false;
HXLINE( 847)			bool _hx_tmp;
HXDLIN( 847)			if (hx::IsNull( this->_hx___transformationMatrix3D )) {
HXLINE( 847)				_hx_tmp = this->_hx___is3D;
            			}
            			else {
HXLINE( 847)				_hx_tmp = false;
            			}
HXDLIN( 847)			if (_hx_tmp) {
HXLINE( 848)				this->_hx___transformationMatrix3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            			}
HXLINE( 850)			this->_hx___updateTransformationMatrices(this->_hx___x,this->_hx___y,this->_hx___pivotX,this->_hx___pivotY,this->_hx___scaleX,this->_hx___scaleY,this->_hx___skewX,this->_hx___skewY,this->_hx___rotation,this->_hx___transformationMatrix,this->_hx___transformationMatrix3D);
            		}
HXLINE( 855)		return this->_hx___transformationMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_transformationMatrix,return )

 ::openfl::geom::Matrix DisplayObject_obj::set_transformationMatrix( ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_859_set_transformationMatrix)
HXLINE( 860)		Float PI_Q = ((Float)::Math_obj::PI / (Float)((Float)4.0));
HXLINE( 862)		this->setRequiresRedraw();
HXLINE( 863)		this->_hx___transformationChanged = false;
HXLINE( 864)		this->_hx___transformationMatrix->copyFrom(matrix);
HXLINE( 865)		this->_hx___pivotX = (this->_hx___pivotY = (int)0);
HXLINE( 867)		this->_hx___x = matrix->tx;
HXLINE( 868)		this->_hx___y = matrix->ty;
HXLINE( 870)		this->_hx___skewX = ::Math_obj::atan(((Float)-(matrix->c) / (Float)matrix->d));
HXLINE( 871)		this->_hx___skewY = ::Math_obj::atan(((Float)matrix->b / (Float)matrix->a));
HXLINE( 874)		if ((this->_hx___skewX != this->_hx___skewX)) {
HXLINE( 874)			this->_hx___skewX = ((Float)0.0);
            		}
HXLINE( 875)		if ((this->_hx___skewY != this->_hx___skewY)) {
HXLINE( 875)			this->_hx___skewY = ((Float)0.0);
            		}
HXLINE( 877)		Float _hx_tmp;
HXDLIN( 877)		bool _hx_tmp1;
HXDLIN( 877)		if ((this->_hx___skewX > -(PI_Q))) {
HXLINE( 877)			_hx_tmp1 = (this->_hx___skewX < PI_Q);
            		}
            		else {
HXLINE( 877)			_hx_tmp1 = false;
            		}
HXDLIN( 877)		if (_hx_tmp1) {
HXLINE( 877)			Float matrix1 = matrix->d;
HXDLIN( 877)			_hx_tmp = ((Float)matrix1 / (Float)::Math_obj::cos(this->_hx___skewX));
            		}
            		else {
HXLINE( 878)			Float _hx_tmp2 = -(matrix->c);
HXLINE( 877)			_hx_tmp = ((Float)_hx_tmp2 / (Float)::Math_obj::sin(this->_hx___skewX));
            		}
HXDLIN( 877)		this->_hx___scaleY = _hx_tmp;
HXLINE( 879)		Float _hx_tmp3;
HXDLIN( 879)		bool _hx_tmp4;
HXDLIN( 879)		if ((this->_hx___skewY > -(PI_Q))) {
HXLINE( 879)			_hx_tmp4 = (this->_hx___skewY < PI_Q);
            		}
            		else {
HXLINE( 879)			_hx_tmp4 = false;
            		}
HXDLIN( 879)		if (_hx_tmp4) {
HXLINE( 879)			Float matrix2 = matrix->a;
HXDLIN( 879)			_hx_tmp3 = ((Float)matrix2 / (Float)::Math_obj::cos(this->_hx___skewY));
            		}
            		else {
HXLINE( 880)			Float matrix3 = matrix->b;
HXLINE( 879)			_hx_tmp3 = ((Float)matrix3 / (Float)::Math_obj::sin(this->_hx___skewY));
            		}
HXDLIN( 879)		this->_hx___scaleX = _hx_tmp3;
HXLINE( 882)		if (::starling::utils::MathUtil_obj::isEquivalent(this->_hx___skewX,this->_hx___skewY,null())) {
HXLINE( 884)			this->_hx___rotation = this->_hx___skewX;
HXLINE( 885)			this->_hx___skewX = (this->_hx___skewY = (int)0);
            		}
            		else {
HXLINE( 889)			this->_hx___rotation = (int)0;
            		}
HXLINE( 892)		return this->_hx___transformationMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_transformationMatrix,return )

 ::openfl::geom::Matrix3D DisplayObject_obj::get_transformationMatrix3D(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_903_get_transformationMatrix3D)
HXLINE( 904)		if (hx::IsNull( this->_hx___transformationMatrix3D )) {
HXLINE( 905)			this->_hx___transformationMatrix3D = ::starling::utils::MatrixUtil_obj::convertTo3D(this->_hx___transformationMatrix,null());
            		}
HXLINE( 907)		if (this->_hx___transformationChanged) {
HXLINE( 909)			this->_hx___transformationChanged = false;
HXLINE( 910)			this->_hx___updateTransformationMatrices(this->_hx___x,this->_hx___y,this->_hx___pivotX,this->_hx___pivotY,this->_hx___scaleX,this->_hx___scaleY,this->_hx___skewX,this->_hx___skewY,this->_hx___rotation,this->_hx___transformationMatrix,this->_hx___transformationMatrix3D);
            		}
HXLINE( 915)		return this->_hx___transformationMatrix3D;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_transformationMatrix3D,return )

bool DisplayObject_obj::get_is3D(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_920_get_is3D)
HXDLIN( 920)		return this->_hx___is3D;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_is3D,return )

bool DisplayObject_obj::get_useHandCursor(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_925_get_useHandCursor)
HXDLIN( 925)		return this->_hx___useHandCursor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_useHandCursor,return )

bool DisplayObject_obj::set_useHandCursor(bool value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_927_set_useHandCursor)
HXLINE( 928)		if ((value == this->_hx___useHandCursor)) {
HXLINE( 928)			return value;
            		}
HXLINE( 929)		this->_hx___useHandCursor = value;
HXLINE( 931)		if (this->_hx___useHandCursor) {
HXLINE( 932)			this->addEventListener(HX_("touch",bf,17,33,14),this->_hx___onTouch_dyn());
            		}
            		else {
HXLINE( 934)			this->removeEventListener(HX_("touch",bf,17,33,14),this->_hx___onTouch_dyn());
            		}
HXLINE( 936)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_useHandCursor,return )

void DisplayObject_obj::_hx___onTouch( ::starling::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_941___onTouch)
HXDLIN( 941)		::String _hx_tmp;
HXDLIN( 941)		if (event->interactsWith(hx::ObjectPtr<OBJ_>(this))) {
HXDLIN( 941)			_hx_tmp = HX_("button",f2,61,e0,d9);
            		}
            		else {
HXDLIN( 941)			_hx_tmp = HX_("auto",6f,df,76,40);
            		}
HXDLIN( 941)		::openfl::ui::Mouse_obj::set_cursor(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___onTouch,(void))

 ::openfl::geom::Rectangle DisplayObject_obj::get_bounds(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_948_get_bounds)
HXDLIN( 948)		return this->getBounds(this->_hx___parent,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_bounds,return )

Float DisplayObject_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_955_get_width)
HXDLIN( 955)		return this->getBounds(this->_hx___parent,::starling::display::DisplayObject_obj::sHelperRect)->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_width,return )

Float DisplayObject_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_957_set_width)
HXLINE( 961)		Float actualWidth;
HXLINE( 962)		bool scaleIsNaN = (this->_hx___scaleX != this->_hx___scaleX);
HXLINE( 964)		bool _hx_tmp;
HXDLIN( 964)		if ((this->_hx___scaleX != ((Float)0.0))) {
HXLINE( 964)			_hx_tmp = scaleIsNaN;
            		}
            		else {
HXLINE( 964)			_hx_tmp = true;
            		}
HXDLIN( 964)		if (_hx_tmp) {
HXLINE( 964)			this->set_scaleX(((Float)1.0));
HXDLIN( 964)			actualWidth = this->get_width();
            		}
            		else {
HXLINE( 965)			Float actualWidth1 = this->get_width();
HXDLIN( 965)			actualWidth = ::Math_obj::abs(((Float)actualWidth1 / (Float)this->_hx___scaleX));
            		}
HXLINE( 967)		if ((actualWidth != (int)0)) {
HXLINE( 967)			this->set_scaleX(((Float)value / (Float)actualWidth));
            		}
HXLINE( 969)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_width,return )

Float DisplayObject_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_976_get_height)
HXDLIN( 976)		return this->getBounds(this->_hx___parent,::starling::display::DisplayObject_obj::sHelperRect)->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_height,return )

Float DisplayObject_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_978_set_height)
HXLINE( 979)		Float actualHeight;
HXLINE( 980)		bool scaleIsNaN = (this->_hx___scaleY != this->_hx___scaleY);
HXLINE( 982)		bool _hx_tmp;
HXDLIN( 982)		if ((this->_hx___scaleY != ((Float)0.0))) {
HXLINE( 982)			_hx_tmp = scaleIsNaN;
            		}
            		else {
HXLINE( 982)			_hx_tmp = true;
            		}
HXDLIN( 982)		if (_hx_tmp) {
HXLINE( 982)			this->set_scaleY(((Float)1.0));
HXDLIN( 982)			actualHeight = this->get_height();
            		}
            		else {
HXLINE( 983)			Float actualHeight1 = this->get_height();
HXDLIN( 983)			actualHeight = ::Math_obj::abs(((Float)actualHeight1 / (Float)this->_hx___scaleY));
            		}
HXLINE( 985)		if ((actualHeight != (int)0)) {
HXLINE( 985)			this->set_scaleY(((Float)value / (Float)actualHeight));
            		}
HXLINE( 987)		return this->get_height();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_height,return )

Float DisplayObject_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_992_get_x)
HXDLIN( 992)		return this->_hx___x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_x,return )

Float DisplayObject_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_994_set_x)
HXLINE( 995)		if ((this->_hx___x != value)) {
HXLINE( 997)			this->_hx___x = value;
HXLINE( 998)			this->_hx___setTransformationChanged();
            		}
HXLINE(1000)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_x,return )

Float DisplayObject_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1005_get_y)
HXDLIN(1005)		return this->_hx___y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_y,return )

Float DisplayObject_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1007_set_y)
HXLINE(1008)		if ((this->_hx___y != value)) {
HXLINE(1010)			this->_hx___y = value;
HXLINE(1011)			this->_hx___setTransformationChanged();
            		}
HXLINE(1013)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_y,return )

Float DisplayObject_obj::get_pivotX(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1018_get_pivotX)
HXDLIN(1018)		return this->_hx___pivotX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_pivotX,return )

Float DisplayObject_obj::set_pivotX(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1020_set_pivotX)
HXLINE(1021)		if ((this->_hx___pivotX != value)) {
HXLINE(1023)			this->_hx___pivotX = value;
HXLINE(1024)			this->_hx___setTransformationChanged();
            		}
HXLINE(1026)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_pivotX,return )

Float DisplayObject_obj::get_pivotY(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1031_get_pivotY)
HXDLIN(1031)		return this->_hx___pivotY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_pivotY,return )

Float DisplayObject_obj::set_pivotY(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1033_set_pivotY)
HXLINE(1034)		if ((this->_hx___pivotY != value)) {
HXLINE(1036)			this->_hx___pivotY = value;
HXLINE(1037)			this->_hx___setTransformationChanged();
            		}
HXLINE(1039)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_pivotY,return )

Float DisplayObject_obj::get_scaleX(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1045_get_scaleX)
HXDLIN(1045)		return this->_hx___scaleX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleX,return )

Float DisplayObject_obj::set_scaleX(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1047_set_scaleX)
HXLINE(1048)		if ((this->_hx___scaleX != value)) {
HXLINE(1050)			this->_hx___scaleX = value;
HXLINE(1051)			this->_hx___setTransformationChanged();
            		}
HXLINE(1053)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleX,return )

Float DisplayObject_obj::get_scaleY(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1059_get_scaleY)
HXDLIN(1059)		return this->_hx___scaleY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleY,return )

Float DisplayObject_obj::set_scaleY(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1061_set_scaleY)
HXLINE(1062)		if ((this->_hx___scaleY != value)) {
HXLINE(1064)			this->_hx___scaleY = value;
HXLINE(1065)			this->_hx___setTransformationChanged();
            		}
HXLINE(1067)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleY,return )

Float DisplayObject_obj::get_scale(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1073_get_scale)
HXDLIN(1073)		return this->get_scaleX();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scale,return )

Float DisplayObject_obj::set_scale(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1074_set_scale)
HXDLIN(1074)		return this->set_scaleX(this->set_scaleY(value));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scale,return )

Float DisplayObject_obj::get_skewX(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1078_get_skewX)
HXDLIN(1078)		return this->_hx___skewX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_skewX,return )

Float DisplayObject_obj::set_skewX(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1080_set_skewX)
HXLINE(1081)		value = ::starling::utils::MathUtil_obj::normalizeAngle(value);
HXLINE(1083)		if ((this->_hx___skewX != value)) {
HXLINE(1085)			this->_hx___skewX = value;
HXLINE(1086)			this->_hx___setTransformationChanged();
            		}
HXLINE(1088)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_skewX,return )

Float DisplayObject_obj::get_skewY(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1093_get_skewY)
HXDLIN(1093)		return this->_hx___skewY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_skewY,return )

Float DisplayObject_obj::set_skewY(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1095_set_skewY)
HXLINE(1096)		value = ::starling::utils::MathUtil_obj::normalizeAngle(value);
HXLINE(1098)		if ((this->_hx___skewY != value)) {
HXLINE(1100)			this->_hx___skewY = value;
HXLINE(1101)			this->_hx___setTransformationChanged();
            		}
HXLINE(1103)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_skewY,return )

Float DisplayObject_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1109_get_rotation)
HXDLIN(1109)		return this->_hx___rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_rotation,return )

Float DisplayObject_obj::set_rotation(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1111_set_rotation)
HXLINE(1112)		value = ::starling::utils::MathUtil_obj::normalizeAngle(value);
HXLINE(1114)		if ((this->_hx___rotation != value)) {
HXLINE(1116)			this->_hx___rotation = value;
HXLINE(1117)			this->_hx___setTransformationChanged();
            		}
HXLINE(1119)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_rotation,return )

bool DisplayObject_obj::get_isRotated(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1126_get_isRotated)
HXDLIN(1126)		bool _hx_tmp;
HXDLIN(1126)		if ((this->_hx___rotation == ((Float)0.0))) {
HXDLIN(1126)			_hx_tmp = (this->_hx___skewX != ((Float)0.0));
            		}
            		else {
HXDLIN(1126)			_hx_tmp = true;
            		}
HXDLIN(1126)		if (!(_hx_tmp)) {
HXDLIN(1126)			return (this->_hx___skewY != ((Float)0.0));
            		}
            		else {
HXDLIN(1126)			return true;
            		}
HXDLIN(1126)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_isRotated,return )

Float DisplayObject_obj::get_alpha(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1131_get_alpha)
HXDLIN(1131)		return this->_hx___alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_alpha,return )

Float DisplayObject_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1133_set_alpha)
HXLINE(1134)		if ((value != this->_hx___alpha)) {
HXLINE(1136)			Float _hx_tmp;
HXDLIN(1136)			if ((value < ((Float)0.0))) {
HXLINE(1136)				_hx_tmp = ((Float)0.0);
            			}
            			else {
HXLINE(1136)				if ((value > ((Float)1.0))) {
HXLINE(1136)					_hx_tmp = ((Float)1.0);
            				}
            				else {
HXLINE(1136)					_hx_tmp = value;
            				}
            			}
HXDLIN(1136)			this->_hx___alpha = _hx_tmp;
HXLINE(1137)			this->setRequiresRedraw();
            		}
HXLINE(1139)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_alpha,return )

bool DisplayObject_obj::get_visible(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1144_get_visible)
HXDLIN(1144)		return this->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_visible,return )

bool DisplayObject_obj::set_visible(bool value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1146_set_visible)
HXLINE(1147)		if ((value != this->_hx___visible)) {
HXLINE(1149)			this->_hx___visible = value;
HXLINE(1150)			this->setRequiresRedraw();
            		}
HXLINE(1152)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_visible,return )

bool DisplayObject_obj::get_touchable(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1157_get_touchable)
HXDLIN(1157)		return this->_hx___touchable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_touchable,return )

bool DisplayObject_obj::set_touchable(bool value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1158_set_touchable)
HXDLIN(1158)		return (this->_hx___touchable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_touchable,return )

::String DisplayObject_obj::get_blendMode(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1164_get_blendMode)
HXDLIN(1164)		return this->_hx___blendMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_blendMode,return )

::String DisplayObject_obj::set_blendMode(::String value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1166_set_blendMode)
HXLINE(1167)		if ((value != this->_hx___blendMode)) {
HXLINE(1169)			this->_hx___blendMode = value;
HXLINE(1170)			this->setRequiresRedraw();
            		}
HXLINE(1172)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_blendMode,return )

::String DisplayObject_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1178_get_name)
HXDLIN(1178)		return this->_hx___name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_name,return )

::String DisplayObject_obj::set_name(::String value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1179_set_name)
HXDLIN(1179)		return (this->_hx___name = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_name,return )

 ::starling::filters::FragmentFilter DisplayObject_obj::get_filter(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1195_get_filter)
HXDLIN(1195)		return this->__filter;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_filter,return )

 ::starling::filters::FragmentFilter DisplayObject_obj::set_filter( ::starling::filters::FragmentFilter value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1197_set_filter)
HXLINE(1198)		if (hx::IsNotEq( value,this->__filter )) {
HXLINE(1200)			if (hx::IsNotNull( this->__filter )) {
HXLINE(1200)				this->__filter->setTarget(null());
            			}
HXLINE(1201)			if (hx::IsNotNull( value )) {
HXLINE(1201)				value->setTarget(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE(1203)			this->__filter = value;
HXLINE(1204)			this->setRequiresRedraw();
            		}
HXLINE(1206)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_filter,return )

 ::starling::display::DisplayObject DisplayObject_obj::get_mask(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1238_get_mask)
HXDLIN(1238)		return this->_hx___mask;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mask,return )

 ::starling::display::DisplayObject DisplayObject_obj::set_mask( ::starling::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1240_set_mask)
HXLINE(1241)		if (hx::IsNotEq( this->_hx___mask,value )) {
HXLINE(1243)			if (!(::starling::display::DisplayObject_obj::sMaskWarningShown)) {
HXLINE(1245)				if (!(::starling::utils::SystemUtil_obj::get_supportsDepthAndStencil())) {
HXLINE(1246)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(1246)					_hx_tmp((HX_("[Starling] Full mask support requires 'depthAndStencil'",2e,3a,41,13) + HX_(" to be enabled in the application descriptor.",5c,31,7d,4f)),hx::SourceInfo(HX_("DisplayObject.hx",dd,7e,87,55),1246,HX_("starling.display.DisplayObject",2f,df,cf,4b),HX_("set_mask",e9,55,6e,76)));
            				}
HXLINE(1249)				::starling::display::DisplayObject_obj::sMaskWarningShown = true;
            			}
HXLINE(1252)			if (hx::IsNotNull( this->_hx___mask )) {
HXLINE(1252)				this->_hx___mask->_hx___maskee = null();
            			}
HXLINE(1253)			if (hx::IsNotNull( value )) {
HXLINE(1255)				value->_hx___maskee = hx::ObjectPtr<OBJ_>(this);
HXLINE(1256)				value->_hx___hasVisibleArea = false;
            			}
HXLINE(1259)			this->_hx___mask = value;
HXLINE(1260)			this->setRequiresRedraw();
            		}
HXLINE(1263)		return this->_hx___mask;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_mask,return )

bool DisplayObject_obj::get_maskInverted(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1268_get_maskInverted)
HXDLIN(1268)		return this->_hx___maskInverted;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_maskInverted,return )

bool DisplayObject_obj::set_maskInverted(bool value){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1269_set_maskInverted)
HXDLIN(1269)		return (this->_hx___maskInverted = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_maskInverted,return )

 ::starling::display::DisplayObjectContainer DisplayObject_obj::get_parent(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1273_get_parent)
HXDLIN(1273)		return this->_hx___parent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_parent,return )

 ::starling::display::DisplayObject DisplayObject_obj::get_base(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1278_get_base)
HXLINE(1279)		 ::starling::display::DisplayObject currentObject = hx::ObjectPtr<OBJ_>(this);
HXLINE(1280)		while(hx::IsNotNull( currentObject->_hx___parent )){
HXLINE(1280)			currentObject = currentObject->_hx___parent;
            		}
HXLINE(1281)		return currentObject;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_base,return )

 ::starling::display::DisplayObject DisplayObject_obj::get_root(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1289_get_root)
HXLINE(1290)		 ::starling::display::DisplayObject currentObject = hx::ObjectPtr<OBJ_>(this);
HXLINE(1291)		while(hx::IsNotNull( currentObject->_hx___parent )){
HXLINE(1293)			if (::Std_obj::is(currentObject->_hx___parent,hx::ClassOf< ::starling::display::Stage >())) {
HXLINE(1293)				return currentObject;
            			}
            			else {
HXLINE(1294)				currentObject = currentObject->get_parent();
            			}
            		}
HXLINE(1297)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_root,return )

 ::starling::display::Stage DisplayObject_obj::get_stage(){
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_1303_get_stage)
HXDLIN(1303)		if (::Std_obj::is(this->get_base(),hx::ClassOf< ::starling::display::Stage >())) {
HXDLIN(1303)			return ( ( ::starling::display::Stage)(this->get_base()) );
            		}
            		else {
HXDLIN(1303)			return null();
            		}
HXDLIN(1303)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_stage,return )

 ::openfl::_Vector::AbstractVector DisplayObject_obj::sAncestors;

 ::openfl::geom::Point DisplayObject_obj::sHelperPoint;

 ::openfl::geom::Vector3D DisplayObject_obj::sHelperPoint3D;

 ::openfl::geom::Vector3D DisplayObject_obj::sHelperPointAlt3D;

 ::openfl::geom::Rectangle DisplayObject_obj::sHelperRect;

 ::openfl::geom::Matrix DisplayObject_obj::sHelperMatrix;

 ::openfl::geom::Matrix DisplayObject_obj::sHelperMatrixAlt;

 ::openfl::geom::Matrix3D DisplayObject_obj::sHelperMatrix3D;

 ::openfl::geom::Matrix3D DisplayObject_obj::sHelperMatrixAlt3D;

bool DisplayObject_obj::sMaskWarningShown;

 ::starling::display::DisplayObject DisplayObject_obj::_hx___findCommonParent( ::starling::display::DisplayObject object1, ::starling::display::DisplayObject object2){
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_742___findCommonParent)
HXLINE( 743)		 ::starling::display::DisplayObject currentObject = object1;
HXLINE( 745)		while(hx::IsNotNull( currentObject )){
HXLINE( 747)			{
HXLINE( 747)				 ::openfl::_Vector::AbstractVector this1 = ::starling::display::DisplayObject_obj::sAncestors;
HXDLIN( 747)				int index = ::openfl::_Vector::IVector_obj::get_length(::starling::display::DisplayObject_obj::sAncestors->data);
HXDLIN( 747)				::openfl::_Vector::IVector_obj::set(this1->data,index,currentObject);
            			}
HXLINE( 748)			currentObject = currentObject->_hx___parent;
            		}
HXLINE( 751)		currentObject = object2;
HXLINE( 752)		while(true){
HXLINE( 752)			bool _hx_tmp;
HXDLIN( 752)			if (hx::IsNotNull( currentObject )) {
HXLINE( 752)				_hx_tmp = (::openfl::_Vector::IVector_obj::indexOf(::starling::display::DisplayObject_obj::sAncestors->data,currentObject,(int)0) == (int)-1);
            			}
            			else {
HXLINE( 752)				_hx_tmp = false;
            			}
HXDLIN( 752)			if (!(_hx_tmp)) {
HXLINE( 752)				goto _hx_goto_94;
            			}
HXLINE( 753)			currentObject = currentObject->_hx___parent;
            		}
            		_hx_goto_94:;
HXLINE( 755)		::openfl::_Vector::IVector_obj::set_length(::starling::display::DisplayObject_obj::sAncestors->data,(int)0);
HXLINE( 757)		if (hx::IsNotNull( currentObject )) {
HXLINE( 757)			return currentObject;
            		}
            		else {
HXLINE( 758)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Object not connected to target",71,53,7b,08)));
            		}
HXLINE( 757)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___findCommonParent,return )


hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__new() {
	hx::ObjectPtr< DisplayObject_obj > __this = new DisplayObject_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__alloc(hx::Ctx *_hx_ctx) {
	DisplayObject_obj *__this = (DisplayObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObject_obj), true, "starling.display.DisplayObject"));
	*(void **)__this = DisplayObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObject_obj::DisplayObject_obj()
{
}

void DisplayObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObject);
	HX_MARK_MEMBER_NAME(_hx___x,"__x");
	HX_MARK_MEMBER_NAME(_hx___y,"__y");
	HX_MARK_MEMBER_NAME(_hx___pivotX,"__pivotX");
	HX_MARK_MEMBER_NAME(_hx___pivotY,"__pivotY");
	HX_MARK_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_MARK_MEMBER_NAME(_hx___scaleY,"__scaleY");
	HX_MARK_MEMBER_NAME(_hx___skewX,"__skewX");
	HX_MARK_MEMBER_NAME(_hx___skewY,"__skewY");
	HX_MARK_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_MARK_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_MEMBER_NAME(_hx___touchable,"__touchable");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___name,"__name");
	HX_MARK_MEMBER_NAME(_hx___useHandCursor,"__useHandCursor");
	HX_MARK_MEMBER_NAME(_hx___transformationMatrix,"__transformationMatrix");
	HX_MARK_MEMBER_NAME(_hx___transformationMatrix3D,"__transformationMatrix3D");
	HX_MARK_MEMBER_NAME(_hx___transformationChanged,"__transformationChanged");
	HX_MARK_MEMBER_NAME(_hx___is3D,"__is3D");
	HX_MARK_MEMBER_NAME(_hx___maskee,"__maskee");
	HX_MARK_MEMBER_NAME(_hx___maskInverted,"__maskInverted");
	HX_MARK_MEMBER_NAME(_hx___parent,"__parent");
	HX_MARK_MEMBER_NAME(_hx___lastParentOrSelfChangeFrameID,"__lastParentOrSelfChangeFrameID");
	HX_MARK_MEMBER_NAME(_hx___lastChildChangeFrameID,"__lastChildChangeFrameID");
	HX_MARK_MEMBER_NAME(_hx___tokenFrameID,"__tokenFrameID");
	HX_MARK_MEMBER_NAME(_hx___pushToken,"__pushToken");
	HX_MARK_MEMBER_NAME(_hx___popToken,"__popToken");
	HX_MARK_MEMBER_NAME(_hx___hasVisibleArea,"__hasVisibleArea");
	HX_MARK_MEMBER_NAME(__filter,"__filter");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	 ::starling::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___x,"__x");
	HX_VISIT_MEMBER_NAME(_hx___y,"__y");
	HX_VISIT_MEMBER_NAME(_hx___pivotX,"__pivotX");
	HX_VISIT_MEMBER_NAME(_hx___pivotY,"__pivotY");
	HX_VISIT_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_VISIT_MEMBER_NAME(_hx___scaleY,"__scaleY");
	HX_VISIT_MEMBER_NAME(_hx___skewX,"__skewX");
	HX_VISIT_MEMBER_NAME(_hx___skewY,"__skewY");
	HX_VISIT_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_VISIT_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
	HX_VISIT_MEMBER_NAME(_hx___touchable,"__touchable");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___name,"__name");
	HX_VISIT_MEMBER_NAME(_hx___useHandCursor,"__useHandCursor");
	HX_VISIT_MEMBER_NAME(_hx___transformationMatrix,"__transformationMatrix");
	HX_VISIT_MEMBER_NAME(_hx___transformationMatrix3D,"__transformationMatrix3D");
	HX_VISIT_MEMBER_NAME(_hx___transformationChanged,"__transformationChanged");
	HX_VISIT_MEMBER_NAME(_hx___is3D,"__is3D");
	HX_VISIT_MEMBER_NAME(_hx___maskee,"__maskee");
	HX_VISIT_MEMBER_NAME(_hx___maskInverted,"__maskInverted");
	HX_VISIT_MEMBER_NAME(_hx___parent,"__parent");
	HX_VISIT_MEMBER_NAME(_hx___lastParentOrSelfChangeFrameID,"__lastParentOrSelfChangeFrameID");
	HX_VISIT_MEMBER_NAME(_hx___lastChildChangeFrameID,"__lastChildChangeFrameID");
	HX_VISIT_MEMBER_NAME(_hx___tokenFrameID,"__tokenFrameID");
	HX_VISIT_MEMBER_NAME(_hx___pushToken,"__pushToken");
	HX_VISIT_MEMBER_NAME(_hx___popToken,"__popToken");
	HX_VISIT_MEMBER_NAME(_hx___hasVisibleArea,"__hasVisibleArea");
	HX_VISIT_MEMBER_NAME(__filter,"__filter");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	 ::starling::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_y() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"__x") ) { return hx::Val( _hx___x ); }
		if (HX_FIELD_EQ(inName,"__y") ) { return hx::Val( _hx___y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"is3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_is3D() ); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_name() ); }
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mask() ); }
		if (HX_FIELD_EQ(inName,"base") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_base() ); }
		if (HX_FIELD_EQ(inName,"root") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_root() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_width() ); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scale() ); }
		if (HX_FIELD_EQ(inName,"skewX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_skewX() ); }
		if (HX_FIELD_EQ(inName,"skewY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_skewY() ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alpha() ); }
		if (HX_FIELD_EQ(inName,"stage") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stage() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__name") ) { return hx::Val( _hx___name ); }
		if (HX_FIELD_EQ(inName,"__is3D") ) { return hx::Val( _hx___is3D ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return hx::Val( _hx___mask ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"isMask") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isMask() ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bounds() ); }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_height() ); }
		if (HX_FIELD_EQ(inName,"pivotX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pivotX() ); }
		if (HX_FIELD_EQ(inName,"pivotY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pivotY() ); }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleX() ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleY() ); }
		if (HX_FIELD_EQ(inName,"filter") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_filter() ); }
		if (HX_FIELD_EQ(inName,"parent") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_parent() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__skewX") ) { return hx::Val( _hx___skewX ); }
		if (HX_FIELD_EQ(inName,"__skewY") ) { return hx::Val( _hx___skewY ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { return hx::Val( _hx___alpha ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_visible() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__pivotX") ) { return hx::Val( _hx___pivotX ); }
		if (HX_FIELD_EQ(inName,"__pivotY") ) { return hx::Val( _hx___pivotY ); }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { return hx::Val( _hx___scaleX ); }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { return hx::Val( _hx___scaleY ); }
		if (HX_FIELD_EQ(inName,"__maskee") ) { return hx::Val( _hx___maskee ); }
		if (HX_FIELD_EQ(inName,"__parent") ) { return hx::Val( _hx___parent ); }
		if (HX_FIELD_EQ(inName,"__filter") ) { return hx::Val( __filter ); }
		if (HX_FIELD_EQ(inName,"get_is3D") ) { return hx::Val( get_is3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotation() ); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return hx::Val( get_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return hx::Val( set_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mask") ) { return hx::Val( get_mask_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mask") ) { return hx::Val( set_mask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_base") ) { return hx::Val( get_base_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setIs3D") ) { return hx::Val( _hx___setIs3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onTouch") ) { return hx::Val( _hx___onTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scale") ) { return hx::Val( get_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scale") ) { return hx::Val( set_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_skewX") ) { return hx::Val( get_skewX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_skewX") ) { return hx::Val( set_skewX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_skewY") ) { return hx::Val( get_skewY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_skewY") ) { return hx::Val( set_skewY_dyn() ); }
		if (HX_FIELD_EQ(inName,"isRotated") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isRotated() ); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchable") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_touchable() ); }
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blendMode() ); }
		if (HX_FIELD_EQ(inName,"get_stage") ) { return hx::Val( get_stage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__rotation") ) { return hx::Val( _hx___rotation ); }
		if (HX_FIELD_EQ(inName,"__popToken") ) { return hx::Val( _hx___popToken ); }
		if (HX_FIELD_EQ(inName,"alignPivot") ) { return hx::Val( alignPivot_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isMask") ) { return hx::Val( get_isMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bounds") ) { return hx::Val( get_bounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pivotX") ) { return hx::Val( get_pivotX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pivotX") ) { return hx::Val( set_pivotX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pivotY") ) { return hx::Val( get_pivotY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pivotY") ) { return hx::Val( set_pivotY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleX") ) { return hx::Val( get_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleY") ) { return hx::Val( get_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_filter") ) { return hx::Val( get_filter_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filter") ) { return hx::Val( set_filter_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_parent") ) { return hx::Val( get_parent_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__touchable") ) { return hx::Val( _hx___touchable ); }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode ); }
		if (HX_FIELD_EQ(inName,"__pushToken") ) { return hx::Val( _hx___pushToken ); }
		if (HX_FIELD_EQ(inName,"hitTestMask") ) { return hx::Val( hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setParent") ) { return hx::Val( _hx___setParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_visible") ) { return hx::Val( get_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"maskInverted") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maskInverted() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return hx::Val( localToGlobal_dyn() ); }
		if (HX_FIELD_EQ(inName,"globalToLocal") ) { return hx::Val( globalToLocal_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { return hx::Val( dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"useHandCursor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_useHandCursor() ); }
		if (HX_FIELD_EQ(inName,"get_isRotated") ) { return hx::Val( get_isRotated_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_touchable") ) { return hx::Val( get_touchable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_touchable") ) { return hx::Val( set_touchable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blendMode") ) { return hx::Val( get_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blendMode") ) { return hx::Val( set_blendMode_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__maskInverted") ) { return hx::Val( _hx___maskInverted ); }
		if (HX_FIELD_EQ(inName,"__tokenFrameID") ) { return hx::Val( _hx___tokenFrameID ); }
		if (HX_FIELD_EQ(inName,"requiresRedraw") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_requiresRedraw() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__useHandCursor") ) { return hx::Val( _hx___useHandCursor ); }
		if (HX_FIELD_EQ(inName,"local3DToGlobal") ) { return hx::Val( local3DToGlobal_dyn() ); }
		if (HX_FIELD_EQ(inName,"globalToLocal3D") ) { return hx::Val( globalToLocal3D_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__hasVisibleArea") ) { return hx::Val( _hx___hasVisibleArea ); }
		if (HX_FIELD_EQ(inName,"removeFromParent") ) { return hx::Val( removeFromParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawToBitmapData") ) { return hx::Val( drawToBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"excludeFromCache") ) { return hx::Val( excludeFromCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return hx::Val( addEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maskInverted") ) { return hx::Val( get_maskInverted_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maskInverted") ) { return hx::Val( set_maskInverted_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setRequiresRedraw") ) { return hx::Val( setRequiresRedraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_useHandCursor") ) { return hx::Val( get_useHandCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_useHandCursor") ) { return hx::Val( set_useHandCursor_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_requiresRedraw") ) { return hx::Val( get_requiresRedraw_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { return hx::Val( removeEventListener_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"removeEventListeners") ) { return hx::Val( removeEventListeners_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformationMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_transformationMatrix() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__transformationMatrix") ) { return hx::Val( _hx___transformationMatrix ); }
		if (HX_FIELD_EQ(inName,"transformationMatrix3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_transformationMatrix3D() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__transformationChanged") ) { return hx::Val( _hx___transformationChanged ); }
		if (HX_FIELD_EQ(inName,"getTransformationMatrix") ) { return hx::Val( getTransformationMatrix_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__transformationMatrix3D") ) { return hx::Val( _hx___transformationMatrix3D ); }
		if (HX_FIELD_EQ(inName,"__lastChildChangeFrameID") ) { return hx::Val( _hx___lastChildChangeFrameID ); }
		if (HX_FIELD_EQ(inName,"get_transformationMatrix") ) { return hx::Val( get_transformationMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transformationMatrix") ) { return hx::Val( set_transformationMatrix_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"getTransformationMatrix3D") ) { return hx::Val( getTransformationMatrix3D_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__setTransformationChanged") ) { return hx::Val( _hx___setTransformationChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_transformationMatrix3D") ) { return hx::Val( get_transformationMatrix3D_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__updateTransformationMatrices") ) { return hx::Val( _hx___updateTransformationMatrices_dyn() ); }
		if (HX_FIELD_EQ(inName,"__addEnterFrameListenerToStage") ) { return hx::Val( _hx___addEnterFrameListenerToStage_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__lastParentOrSelfChangeFrameID") ) { return hx::Val( _hx___lastParentOrSelfChangeFrameID ); }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"__removeEnterFrameListenerFromStage") ) { return hx::Val( _hx___removeEnterFrameListenerFromStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DisplayObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"sAncestors") ) { outValue = ( sAncestors ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sHelperRect") ) { outValue = ( sHelperRect ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sHelperPoint") ) { outValue = ( sHelperPoint ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sHelperMatrix") ) { outValue = ( sHelperMatrix ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sHelperPoint3D") ) { outValue = ( sHelperPoint3D ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sHelperMatrix3D") ) { outValue = ( sHelperMatrix3D ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sHelperMatrixAlt") ) { outValue = ( sHelperMatrixAlt ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"sHelperPointAlt3D") ) { outValue = ( sHelperPointAlt3D ); return true; }
		if (HX_FIELD_EQ(inName,"sMaskWarningShown") ) { outValue = ( sMaskWarningShown ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sHelperMatrixAlt3D") ) { outValue = ( sHelperMatrixAlt3D ); return true; }
		if (HX_FIELD_EQ(inName,"__findCommonParent") ) { outValue = _hx___findCommonParent_dyn(); return true; }
	}
	return false;
}

hx::Val DisplayObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"__x") ) { _hx___x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__y") ) { _hx___y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_name(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mask(inValue.Cast<  ::starling::display::DisplayObject >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scale(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"skewX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_skewX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"skewY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_skewY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__name") ) { _hx___name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__is3D") ) { _hx___is3D=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::starling::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"pivotX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pivotX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"pivotY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pivotY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"filter") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filter(inValue.Cast<  ::starling::filters::FragmentFilter >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__skewX") ) { _hx___skewX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__skewY") ) { _hx___skewY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__alpha") ) { _hx___alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue.Cast< bool >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__pivotX") ) { _hx___pivotX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__pivotY") ) { _hx___pivotY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { _hx___scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { _hx___scaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__maskee") ) { _hx___maskee=inValue.Cast<  ::starling::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__parent") ) { _hx___parent=inValue.Cast<  ::starling::display::DisplayObjectContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__filter") ) { __filter=inValue.Cast<  ::starling::filters::FragmentFilter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touchable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_touchable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blendMode(inValue.Cast< ::String >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__rotation") ) { _hx___rotation=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__popToken") ) { _hx___popToken=inValue.Cast<  ::starling::rendering::BatchToken >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__touchable") ) { _hx___touchable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__pushToken") ) { _hx___pushToken=inValue.Cast<  ::starling::rendering::BatchToken >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"maskInverted") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maskInverted(inValue.Cast< bool >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"useHandCursor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_useHandCursor(inValue.Cast< bool >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__maskInverted") ) { _hx___maskInverted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tokenFrameID") ) { _hx___tokenFrameID=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__useHandCursor") ) { _hx___useHandCursor=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__hasVisibleArea") ) { _hx___hasVisibleArea=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"transformationMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transformationMatrix(inValue.Cast<  ::openfl::geom::Matrix >()) ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__transformationMatrix") ) { _hx___transformationMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__transformationChanged") ) { _hx___transformationChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__transformationMatrix3D") ) { _hx___transformationMatrix3D=inValue.Cast<  ::openfl::geom::Matrix3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastChildChangeFrameID") ) { _hx___lastChildChangeFrameID=inValue.Cast< int >(); return inValue; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__lastParentOrSelfChangeFrameID") ) { _hx___lastParentOrSelfChangeFrameID=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DisplayObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"sAncestors") ) { sAncestors=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sHelperRect") ) { sHelperRect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sHelperPoint") ) { sHelperPoint=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sHelperMatrix") ) { sHelperMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sHelperPoint3D") ) { sHelperPoint3D=ioValue.Cast<  ::openfl::geom::Vector3D >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sHelperMatrix3D") ) { sHelperMatrix3D=ioValue.Cast<  ::openfl::geom::Matrix3D >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sHelperMatrixAlt") ) { sHelperMatrixAlt=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"sHelperPointAlt3D") ) { sHelperPointAlt3D=ioValue.Cast<  ::openfl::geom::Vector3D >(); return true; }
		if (HX_FIELD_EQ(inName,"sMaskWarningShown") ) { sMaskWarningShown=ioValue.Cast< bool >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sHelperMatrixAlt3D") ) { sHelperMatrixAlt3D=ioValue.Cast<  ::openfl::geom::Matrix3D >(); return true; }
	}
	return false;
}

void DisplayObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__x","\x58","\x69","\x48","\x00"));
	outFields->push(HX_HCSTRING("__y","\x59","\x69","\x48","\x00"));
	outFields->push(HX_HCSTRING("__pivotX","\x76","\x8a","\x8e","\x33"));
	outFields->push(HX_HCSTRING("__pivotY","\x77","\x8a","\x8e","\x33"));
	outFields->push(HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__skewX","\xee","\xee","\x79","\xe8"));
	outFields->push(HX_HCSTRING("__skewY","\xef","\xee","\x79","\xe8"));
	outFields->push(HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"));
	outFields->push(HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	outFields->push(HX_HCSTRING("__touchable","\xb9","\x19","\x28","\x49"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"));
	outFields->push(HX_HCSTRING("__useHandCursor","\xac","\x13","\x61","\x11"));
	outFields->push(HX_HCSTRING("__transformationMatrix","\x0a","\x08","\x7b","\x0e"));
	outFields->push(HX_HCSTRING("__transformationMatrix3D","\x3b","\xcb","\x54","\xe9"));
	outFields->push(HX_HCSTRING("__transformationChanged","\x0b","\x6f","\x91","\xd6"));
	outFields->push(HX_HCSTRING("__is3D","\x3b","\x3a","\xb7","\xf4"));
	outFields->push(HX_HCSTRING("__maskee","\x6c","\x17","\x49","\x63"));
	outFields->push(HX_HCSTRING("__maskInverted","\x21","\xfd","\xc6","\x4e"));
	outFields->push(HX_HCSTRING("__parent","\x4a","\x70","\xad","\x95"));
	outFields->push(HX_HCSTRING("__lastParentOrSelfChangeFrameID","\x89","\x02","\x6d","\x7e"));
	outFields->push(HX_HCSTRING("__lastChildChangeFrameID","\x92","\x7d","\x96","\xf6"));
	outFields->push(HX_HCSTRING("__tokenFrameID","\x6f","\x46","\xbf","\x0d"));
	outFields->push(HX_HCSTRING("__pushToken","\x9f","\x33","\x73","\x86"));
	outFields->push(HX_HCSTRING("__popToken","\xc8","\x3a","\x6a","\x20"));
	outFields->push(HX_HCSTRING("__hasVisibleArea","\x05","\x1f","\x86","\x0f"));
	outFields->push(HX_HCSTRING("__filter","\xd8","\x8a","\x64","\x2d"));
	outFields->push(HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"));
	outFields->push(HX_HCSTRING("isMask","\xf6","\x05","\xbd","\x65"));
	outFields->push(HX_HCSTRING("requiresRedraw","\x45","\xb1","\x8a","\x61"));
	outFields->push(HX_HCSTRING("transformationMatrix","\xea","\x64","\xd2","\x46"));
	outFields->push(HX_HCSTRING("transformationMatrix3D","\x1b","\x20","\xe5","\x6b"));
	outFields->push(HX_HCSTRING("is3D","\x1b","\xd7","\xbe","\x45"));
	outFields->push(HX_HCSTRING("useHandCursor","\xcc","\xda","\xae","\x89"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("pivotX","\x56","\x1f","\x5f","\x8b"));
	outFields->push(HX_HCSTRING("pivotY","\x57","\x1f","\x5f","\x8b"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("skewX","\x0e","\x96","\x1b","\x7e"));
	outFields->push(HX_HCSTRING("skewY","\x0f","\x96","\x1b","\x7e"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("isRotated","\xdf","\xc6","\x1b","\xf5"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("touchable","\xd9","\xd0","\xfb","\x1a"));
	outFields->push(HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"));
	outFields->push(HX_HCSTRING("mask","\xec","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("maskInverted","\x01","\x7a","\x06","\x2e"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("base","\x11","\xe8","\x10","\x41"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObject_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___x),HX_HCSTRING("__x","\x58","\x69","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___y),HX_HCSTRING("__y","\x59","\x69","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___pivotX),HX_HCSTRING("__pivotX","\x76","\x8a","\x8e","\x33")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___pivotY),HX_HCSTRING("__pivotY","\x77","\x8a","\x8e","\x33")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___scaleX),HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___scaleY),HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___skewX),HX_HCSTRING("__skewX","\xee","\xee","\x79","\xe8")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___skewY),HX_HCSTRING("__skewY","\xef","\xee","\x79","\xe8")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotation),HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___alpha),HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___touchable),HX_HCSTRING("__touchable","\xb9","\x19","\x28","\x49")},
	{hx::fsString,(int)offsetof(DisplayObject_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsString,(int)offsetof(DisplayObject_obj,_hx___name),HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___useHandCursor),HX_HCSTRING("__useHandCursor","\xac","\x13","\x61","\x11")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___transformationMatrix),HX_HCSTRING("__transformationMatrix","\x0a","\x08","\x7b","\x0e")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(int)offsetof(DisplayObject_obj,_hx___transformationMatrix3D),HX_HCSTRING("__transformationMatrix3D","\x3b","\xcb","\x54","\xe9")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___transformationChanged),HX_HCSTRING("__transformationChanged","\x0b","\x6f","\x91","\xd6")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___is3D),HX_HCSTRING("__is3D","\x3b","\x3a","\xb7","\xf4")},
	{hx::fsObject /*::starling::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___maskee),HX_HCSTRING("__maskee","\x6c","\x17","\x49","\x63")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___maskInverted),HX_HCSTRING("__maskInverted","\x21","\xfd","\xc6","\x4e")},
	{hx::fsObject /*::starling::display::DisplayObjectContainer*/ ,(int)offsetof(DisplayObject_obj,_hx___parent),HX_HCSTRING("__parent","\x4a","\x70","\xad","\x95")},
	{hx::fsInt,(int)offsetof(DisplayObject_obj,_hx___lastParentOrSelfChangeFrameID),HX_HCSTRING("__lastParentOrSelfChangeFrameID","\x89","\x02","\x6d","\x7e")},
	{hx::fsInt,(int)offsetof(DisplayObject_obj,_hx___lastChildChangeFrameID),HX_HCSTRING("__lastChildChangeFrameID","\x92","\x7d","\x96","\xf6")},
	{hx::fsInt,(int)offsetof(DisplayObject_obj,_hx___tokenFrameID),HX_HCSTRING("__tokenFrameID","\x6f","\x46","\xbf","\x0d")},
	{hx::fsObject /*::starling::rendering::BatchToken*/ ,(int)offsetof(DisplayObject_obj,_hx___pushToken),HX_HCSTRING("__pushToken","\x9f","\x33","\x73","\x86")},
	{hx::fsObject /*::starling::rendering::BatchToken*/ ,(int)offsetof(DisplayObject_obj,_hx___popToken),HX_HCSTRING("__popToken","\xc8","\x3a","\x6a","\x20")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___hasVisibleArea),HX_HCSTRING("__hasVisibleArea","\x05","\x1f","\x86","\x0f")},
	{hx::fsObject /*::starling::filters::FragmentFilter*/ ,(int)offsetof(DisplayObject_obj,__filter),HX_HCSTRING("__filter","\xd8","\x8a","\x64","\x2d")},
	{hx::fsObject /*::starling::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___mask),HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DisplayObject_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &DisplayObject_obj::sAncestors,HX_HCSTRING("sAncestors","\xcd","\xfd","\x5a","\x7f")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &DisplayObject_obj::sHelperPoint,HX_HCSTRING("sHelperPoint","\x4f","\x0e","\x3c","\xff")},
	{hx::fsObject /*::openfl::geom::Vector3D*/ ,(void *) &DisplayObject_obj::sHelperPoint3D,HX_HCSTRING("sHelperPoint3D","\xc0","\xac","\x17","\x51")},
	{hx::fsObject /*::openfl::geom::Vector3D*/ ,(void *) &DisplayObject_obj::sHelperPointAlt3D,HX_HCSTRING("sHelperPointAlt3D","\x4b","\xa5","\x49","\x91")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &DisplayObject_obj::sHelperRect,HX_HCSTRING("sHelperRect","\x05","\x78","\x00","\xc1")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &DisplayObject_obj::sHelperMatrix,HX_HCSTRING("sHelperMatrix","\x62","\x9b","\xea","\x19")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &DisplayObject_obj::sHelperMatrixAlt,HX_HCSTRING("sHelperMatrixAlt","\xe7","\xde","\x60","\x29")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(void *) &DisplayObject_obj::sHelperMatrix3D,HX_HCSTRING("sHelperMatrix3D","\x93","\xe4","\x51","\x5e")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(void *) &DisplayObject_obj::sHelperMatrixAlt3D,HX_HCSTRING("sHelperMatrixAlt3D","\x58","\xd3","\x83","\xea")},
	{hx::fsBool,(void *) &DisplayObject_obj::sMaskWarningShown,HX_HCSTRING("sMaskWarningShown","\x74","\x82","\xe6","\xce")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplayObject_obj_sMemberFields[] = {
	HX_HCSTRING("__x","\x58","\x69","\x48","\x00"),
	HX_HCSTRING("__y","\x59","\x69","\x48","\x00"),
	HX_HCSTRING("__pivotX","\x76","\x8a","\x8e","\x33"),
	HX_HCSTRING("__pivotY","\x77","\x8a","\x8e","\x33"),
	HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"),
	HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"),
	HX_HCSTRING("__skewX","\xee","\xee","\x79","\xe8"),
	HX_HCSTRING("__skewY","\xef","\xee","\x79","\xe8"),
	HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"),
	HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("__touchable","\xb9","\x19","\x28","\x49"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"),
	HX_HCSTRING("__useHandCursor","\xac","\x13","\x61","\x11"),
	HX_HCSTRING("__transformationMatrix","\x0a","\x08","\x7b","\x0e"),
	HX_HCSTRING("__transformationMatrix3D","\x3b","\xcb","\x54","\xe9"),
	HX_HCSTRING("__transformationChanged","\x0b","\x6f","\x91","\xd6"),
	HX_HCSTRING("__is3D","\x3b","\x3a","\xb7","\xf4"),
	HX_HCSTRING("__maskee","\x6c","\x17","\x49","\x63"),
	HX_HCSTRING("__maskInverted","\x21","\xfd","\xc6","\x4e"),
	HX_HCSTRING("__parent","\x4a","\x70","\xad","\x95"),
	HX_HCSTRING("__lastParentOrSelfChangeFrameID","\x89","\x02","\x6d","\x7e"),
	HX_HCSTRING("__lastChildChangeFrameID","\x92","\x7d","\x96","\xf6"),
	HX_HCSTRING("__tokenFrameID","\x6f","\x46","\xbf","\x0d"),
	HX_HCSTRING("__pushToken","\x9f","\x33","\x73","\x86"),
	HX_HCSTRING("__popToken","\xc8","\x3a","\x6a","\x20"),
	HX_HCSTRING("__hasVisibleArea","\x05","\x1f","\x86","\x0f"),
	HX_HCSTRING("__filter","\xd8","\x8a","\x64","\x2d"),
	HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("removeFromParent","\x98","\x27","\x6b","\xea"),
	HX_HCSTRING("getTransformationMatrix","\xa0","\x60","\x3a","\x83"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("hitTestMask","\xd1","\xd3","\x84","\xf3"),
	HX_HCSTRING("localToGlobal","\xc9","\x41","\xeb","\x47"),
	HX_HCSTRING("globalToLocal","\xcd","\x4e","\xae","\x6b"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("alignPivot","\xbd","\xb9","\xf4","\x5b"),
	HX_HCSTRING("drawToBitmapData","\x38","\x55","\xb6","\xf4"),
	HX_HCSTRING("getTransformationMatrix3D","\x51","\xf5","\x0b","\x8f"),
	HX_HCSTRING("local3DToGlobal","\x3a","\x38","\xb5","\x83"),
	HX_HCSTRING("globalToLocal3D","\xbe","\x88","\xf9","\x6e"),
	HX_HCSTRING("__setParent","\x4c","\xc3","\x51","\x7b"),
	HX_HCSTRING("__setIs3D","\xbd","\x68","\x91","\x8c"),
	HX_HCSTRING("get_isMask","\xbf","\x75","\x44","\x56"),
	HX_HCSTRING("setRequiresRedraw","\x87","\x38","\x6c","\xf7"),
	HX_HCSTRING("get_requiresRedraw","\x0e","\x92","\x24","\xfd"),
	HX_HCSTRING("excludeFromCache","\x3e","\xfa","\x5f","\xfa"),
	HX_HCSTRING("__setTransformationChanged","\x49","\xce","\x22","\x15"),
	HX_HCSTRING("__updateTransformationMatrices","\x8c","\xe8","\x5f","\x6f"),
	HX_HCSTRING("dispatchEvent","\x00","\xc7","\x64","\xc6"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("removeEventListeners","\x69","\x49","\x61","\x71"),
	HX_HCSTRING("__addEnterFrameListenerToStage","\x79","\xa7","\x1f","\x33"),
	HX_HCSTRING("__removeEnterFrameListenerFromStage","\x27","\xf9","\xc0","\x92"),
	HX_HCSTRING("get_transformationMatrix","\x73","\x82","\x6e","\x89"),
	HX_HCSTRING("set_transformationMatrix","\xe7","\x03","\x49","\x9c"),
	HX_HCSTRING("get_transformationMatrix3D","\xe4","\x71","\xea","\xa3"),
	HX_HCSTRING("get_is3D","\xa4","\x92","\x79","\xc5"),
	HX_HCSTRING("get_useHandCursor","\x23","\xe6","\x1e","\x90"),
	HX_HCSTRING("set_useHandCursor","\x2f","\xbe","\x8c","\xb3"),
	HX_HCSTRING("__onTouch","\x00","\x07","\xbf","\x2b"),
	HX_HCSTRING("get_bounds","\x3e","\xf6","\xa4","\x56"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_pivotX","\x1f","\x8f","\xe6","\x7b"),
	HX_HCSTRING("set_pivotX","\x93","\x2d","\x64","\x7f"),
	HX_HCSTRING("get_pivotY","\x20","\x8f","\xe6","\x7b"),
	HX_HCSTRING("set_pivotY","\x94","\x2d","\x64","\x7f"),
	HX_HCSTRING("get_scaleX","\x57","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scaleY","\x58","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scale","\xe1","\x2a","\x78","\xbc"),
	HX_HCSTRING("set_scale","\xed","\x16","\xc9","\x9f"),
	HX_HCSTRING("get_skewX","\x65","\xf2","\xc4","\xc1"),
	HX_HCSTRING("set_skewX","\x71","\xde","\x15","\xa5"),
	HX_HCSTRING("get_skewY","\x66","\xf2","\xc4","\xc1"),
	HX_HCSTRING("set_skewY","\x72","\xde","\x15","\xa5"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_isRotated","\xb6","\x9a","\x7f","\xb6"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("get_visible","\x89","\xd8","\x1e","\x29"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("get_touchable","\xb0","\xa4","\x5f","\xdc"),
	HX_HCSTRING("set_touchable","\xbc","\x86","\x65","\x21"),
	HX_HCSTRING("get_blendMode","\x2b","\xb8","\x9b","\xcd"),
	HX_HCSTRING("set_blendMode","\x37","\x9a","\xa1","\x12"),
	HX_HCSTRING("get_name","\xd4","\x2d","\xba","\xc8"),
	HX_HCSTRING("set_name","\x48","\x87","\x17","\x77"),
	HX_HCSTRING("get_filter","\x81","\x8f","\xbc","\x75"),
	HX_HCSTRING("set_filter","\xf5","\x2d","\x3a","\x79"),
	HX_HCSTRING("get_mask","\x75","\xfc","\x10","\xc8"),
	HX_HCSTRING("set_mask","\xe9","\x55","\x6e","\x76"),
	HX_HCSTRING("get_maskInverted","\x8a","\x66","\xa5","\x32"),
	HX_HCSTRING("set_maskInverted","\xfe","\x53","\xe7","\x88"),
	HX_HCSTRING("get_parent","\xf3","\x74","\x05","\xde"),
	HX_HCSTRING("get_base","\x9a","\xa3","\xcb","\xc0"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_stage","\x15","\xc7","\xb4","\xc7"),
	::String(null()) };

static void DisplayObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::sAncestors,"sAncestors");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::sHelperPoint,"sHelperPoint");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::sHelperPoint3D,"sHelperPoint3D");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::sHelperPointAlt3D,"sHelperPointAlt3D");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::sHelperRect,"sHelperRect");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::sHelperMatrix,"sHelperMatrix");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::sHelperMatrixAlt,"sHelperMatrixAlt");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::sHelperMatrix3D,"sHelperMatrix3D");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::sHelperMatrixAlt3D,"sHelperMatrixAlt3D");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::sMaskWarningShown,"sMaskWarningShown");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::sAncestors,"sAncestors");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::sHelperPoint,"sHelperPoint");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::sHelperPoint3D,"sHelperPoint3D");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::sHelperPointAlt3D,"sHelperPointAlt3D");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::sHelperRect,"sHelperRect");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::sHelperMatrix,"sHelperMatrix");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::sHelperMatrixAlt,"sHelperMatrixAlt");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::sHelperMatrix3D,"sHelperMatrix3D");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::sHelperMatrixAlt3D,"sHelperMatrixAlt3D");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::sMaskWarningShown,"sMaskWarningShown");
};

#endif

hx::Class DisplayObject_obj::__mClass;

static ::String DisplayObject_obj_sStaticFields[] = {
	HX_HCSTRING("sAncestors","\xcd","\xfd","\x5a","\x7f"),
	HX_HCSTRING("sHelperPoint","\x4f","\x0e","\x3c","\xff"),
	HX_HCSTRING("sHelperPoint3D","\xc0","\xac","\x17","\x51"),
	HX_HCSTRING("sHelperPointAlt3D","\x4b","\xa5","\x49","\x91"),
	HX_HCSTRING("sHelperRect","\x05","\x78","\x00","\xc1"),
	HX_HCSTRING("sHelperMatrix","\x62","\x9b","\xea","\x19"),
	HX_HCSTRING("sHelperMatrixAlt","\xe7","\xde","\x60","\x29"),
	HX_HCSTRING("sHelperMatrix3D","\x93","\xe4","\x51","\x5e"),
	HX_HCSTRING("sHelperMatrixAlt3D","\x58","\xd3","\x83","\xea"),
	HX_HCSTRING("sMaskWarningShown","\x74","\x82","\xe6","\xce"),
	HX_HCSTRING("__findCommonParent","\xae","\x41","\xd4","\x5c"),
	::String(null())
};

void DisplayObject_obj::__register()
{
	hx::Object *dummy = new DisplayObject_obj;
	DisplayObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.DisplayObject","\x2f","\xdf","\xcf","\x4b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplayObject_obj::__GetStatic;
	__mClass->mSetStaticField = &DisplayObject_obj::__SetStatic;
	__mClass->mMarkFunc = DisplayObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DisplayObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplayObject_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_160_boot)
HXDLIN( 160)			int length = null();
HXDLIN( 160)			bool fixed = null();
HXDLIN( 160)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_160_boot)
HXDLIN( 160)		sAncestors =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_161_boot)
HXDLIN( 161)		sHelperPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_162_boot)
HXDLIN( 162)		sHelperPoint3D =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_163_boot)
HXDLIN( 163)		sHelperPointAlt3D =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_164_boot)
HXDLIN( 164)		sHelperRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_165_boot)
HXDLIN( 165)		sHelperMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_166_boot)
HXDLIN( 166)		sHelperMatrixAlt =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_167_boot)
HXDLIN( 167)		sHelperMatrix3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c9579787cbd2d31a_168_boot)
HXDLIN( 168)		sHelperMatrixAlt3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_c9579787cbd2d31a_169_boot)
HXDLIN( 169)		sMaskWarningShown = false;
            	}
}

} // end namespace starling
} // end namespace display
