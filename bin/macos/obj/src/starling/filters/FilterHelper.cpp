// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_filters_FilterHelper
#include <starling/filters/FilterHelper.h>
#endif
#ifndef INCLUDED_starling_filters_IFilterHelper
#include <starling/filters/IFilterHelper.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_SubTexture
#include <starling/textures/SubTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_Pool
#include <starling/utils/Pool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_30_new,"starling.filters.FilterHelper","new",0xb3371fd1,"starling.filters.FilterHelper.new","starling/filters/FilterHelper.hx",30,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_84_dispose,"starling.filters.FilterHelper","dispose",0xd3cadc90,"starling.filters.FilterHelper.dispose","starling/filters/FilterHelper.hx",84,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_98_start,"starling.filters.FilterHelper","start",0x31f64213,"starling.filters.FilterHelper.start","starling/filters/FilterHelper.hx",98,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_103_getTexture,"starling.filters.FilterHelper","getTexture",0x7e3b3f94,"starling.filters.FilterHelper.getTexture","starling/filters/FilterHelper.hx",103,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_136_putTexture,"starling.filters.FilterHelper","putTexture",0x6ff0067b,"starling.filters.FilterHelper.putTexture","starling/filters/FilterHelper.hx",136,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_147_purge,"starling.filters.FilterHelper","purge",0x787897dc,"starling.filters.FilterHelper.purge","starling/filters/FilterHelper.hx",147,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_159_setSize,"starling.filters.FilterHelper","setSize",0x2a563d74,"starling.filters.FilterHelper.setSize","starling/filters/FilterHelper.hx",159,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_189_getNativeSize,"starling.filters.FilterHelper","getNativeSize",0x41bf70df,"starling.filters.FilterHelper.getNativeSize","starling/filters/FilterHelper.hx",189,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_200_get_projectionMatrix3D,"starling.filters.FilterHelper","get_projectionMatrix3D",0x3e9d5559,"starling.filters.FilterHelper.get_projectionMatrix3D","starling/filters/FilterHelper.hx",200,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_202_set_projectionMatrix3D,"starling.filters.FilterHelper","set_projectionMatrix3D",0x7248d1cd,"starling.filters.FilterHelper.set_projectionMatrix3D","starling/filters/FilterHelper.hx",202,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_209_get_renderTarget,"starling.filters.FilterHelper","get_renderTarget",0x615b01bf,"starling.filters.FilterHelper.get_renderTarget","starling/filters/FilterHelper.hx",209,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_210_set_renderTarget,"starling.filters.FilterHelper","set_renderTarget",0xb79cef33,"starling.filters.FilterHelper.set_renderTarget","starling/filters/FilterHelper.hx",210,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_214_get_clipRect,"starling.filters.FilterHelper","get_clipRect",0x421dfe8c,"starling.filters.FilterHelper.get_clipRect","starling/filters/FilterHelper.hx",214,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_216_set_clipRect,"starling.filters.FilterHelper","set_clipRect",0x57172200,"starling.filters.FilterHelper.set_clipRect","starling/filters/FilterHelper.hx",216,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_232_get_targetBounds,"starling.filters.FilterHelper","get_targetBounds",0x8db9cb1e,"starling.filters.FilterHelper.get_targetBounds","starling/filters/FilterHelper.hx",232,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_234_set_targetBounds,"starling.filters.FilterHelper","set_targetBounds",0xe3fbb892,"starling.filters.FilterHelper.set_targetBounds","starling/filters/FilterHelper.hx",234,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_242_get_target,"starling.filters.FilterHelper","get_target",0x076d53c9,"starling.filters.FilterHelper.get_target","starling/filters/FilterHelper.hx",242,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_243_set_target,"starling.filters.FilterHelper","set_target",0x0aeaf23d,"starling.filters.FilterHelper.set_target","starling/filters/FilterHelper.hx",243,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_247_get_textureScale,"starling.filters.FilterHelper","get_textureScale",0xdc868627,"starling.filters.FilterHelper.get_textureScale","starling/filters/FilterHelper.hx",247,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_250_set_textureScale,"starling.filters.FilterHelper","set_textureScale",0x32c8739b,"starling.filters.FilterHelper.set_textureScale","starling/filters/FilterHelper.hx",250,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_255_get_textureFormat,"starling.filters.FilterHelper","get_textureFormat",0xda9780fa,"starling.filters.FilterHelper.get_textureFormat","starling/filters/FilterHelper.hx",255,0x9d8e8dfd)
HX_LOCAL_STACK_FRAME(_hx_pos_a6b6f16127efa2d1_256_set_textureFormat,"starling.filters.FilterHelper","set_textureFormat",0xfe055906,"starling.filters.FilterHelper.set_textureFormat","starling/filters/FilterHelper.hx",256,0x9d8e8dfd)
namespace starling{
namespace filters{

void FilterHelper_obj::__construct(::String __o_textureFormat){
::String textureFormat = __o_textureFormat.Default(HX_HCSTRING("bgra","\xb4","\x74","\x15","\x41"));
            	HX_GC_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_30_new)
HXLINE(  50)		this->sRegion =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  71)		this->_usePotTextures = hx::IsEq( ::starling::core::Starling_obj::get_current()->get_profile(),(int)1 );
HXLINE(  72)		this->_preferredScale = ::starling::core::Starling_obj::get_current()->get_contentScaleFactor();
HXLINE(  73)		this->_textureFormat = textureFormat;
HXLINE(  74)		this->_sizeStep = (int)64;
HXLINE(  75)		int length = null();
HXDLIN(  75)		bool fixed = null();
HXDLIN(  75)		this->_pool =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE(  76)		this->_projectionMatrix =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE(  77)		this->_targetBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  79)		this->setSize(this->_sizeStep,this->_sizeStep);
            	}

Dynamic FilterHelper_obj::__CreateEmpty() { return new FilterHelper_obj; }

void *FilterHelper_obj::_hx_vtable = 0;

Dynamic FilterHelper_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FilterHelper_obj > _hx_result = new FilterHelper_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FilterHelper_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ffec955;
}

static ::starling::filters::IFilterHelper_obj _hx_starling_filters_FilterHelper__hx_starling_filters_IFilterHelper= {
	(  ::starling::display::DisplayObject (hx::Object::*)())&::starling::filters::FilterHelper_obj::get_target,
	(  ::openfl::geom::Rectangle (hx::Object::*)())&::starling::filters::FilterHelper_obj::get_targetBounds,
	(  ::starling::textures::Texture (hx::Object::*)(hx::Null< Float > ))&::starling::filters::FilterHelper_obj::getTexture,
	( void (hx::Object::*)( ::starling::textures::Texture))&::starling::filters::FilterHelper_obj::putTexture,
};

void *FilterHelper_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd041069c: return &_hx_starling_filters_FilterHelper__hx_starling_filters_IFilterHelper;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FilterHelper_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_84_dispose)
HXLINE(  85)		::starling::utils::Pool_obj::putRectangle(this->_clipRect);
HXLINE(  86)		this->_clipRect = null();
HXLINE(  88)		this->purge();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterHelper_obj,dispose,(void))

void FilterHelper_obj::start(int numPasses,bool drawLastPassToBackBuffer){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_98_start)
HXDLIN(  98)		int _hx_tmp;
HXDLIN(  98)		if (drawLastPassToBackBuffer) {
HXDLIN(  98)			_hx_tmp = numPasses;
            		}
            		else {
HXDLIN(  98)			_hx_tmp = (int)-1;
            		}
HXDLIN(  98)		this->_numPasses = _hx_tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FilterHelper_obj,start,(void))

 ::starling::textures::Texture FilterHelper_obj::getTexture(hx::Null< Float >  __o_resolution){
Float resolution = __o_resolution.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_103_getTexture)
HXLINE( 104)		 ::starling::textures::Texture texture;
HXLINE( 105)		 ::starling::textures::SubTexture subTexture;
HXLINE( 107)		if ((this->_numPasses >= (int)0)) {
HXLINE( 108)			if ((this->_numPasses-- == (int)0)) {
HXLINE( 108)				return null();
            			}
            		}
HXLINE( 110)		if ((::openfl::_Vector::IVector_obj::get_length(this->_pool->data) != (int)0)) {
HXLINE( 111)			texture = ( ( ::starling::textures::Texture)(::openfl::_Vector::IVector_obj::pop(this->_pool->data)) );
            		}
            		else {
HXLINE( 113)			Float texture1 = ((Float)this->_nativeWidth / (Float)this->_scale);
HXDLIN( 113)			texture = ::starling::textures::Texture_obj::empty(texture1,((Float)this->_nativeHeight / (Float)this->_scale),true,false,true,this->_scale,this->_textureFormat,null());
            		}
HXLINE( 116)		bool _hx_tmp;
HXDLIN( 116)		bool _hx_tmp1;
HXDLIN( 116)		Float _hx_tmp2 = texture->get_width();
HXDLIN( 116)		if (!(!(::starling::utils::MathUtil_obj::isEquivalent(_hx_tmp2,this->_width,((Float)0.1))))) {
HXLINE( 117)			Float _hx_tmp3 = texture->get_height();
HXLINE( 116)			_hx_tmp1 = !(::starling::utils::MathUtil_obj::isEquivalent(_hx_tmp3,this->_height,((Float)0.1)));
            		}
            		else {
HXLINE( 116)			_hx_tmp1 = true;
            		}
HXDLIN( 116)		if (!(_hx_tmp1)) {
HXLINE( 118)			Float _hx_tmp4 = texture->get_scale();
HXLINE( 116)			_hx_tmp = !(::starling::utils::MathUtil_obj::isEquivalent(_hx_tmp4,(this->_scale * resolution),null()));
            		}
            		else {
HXLINE( 116)			_hx_tmp = true;
            		}
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 120)			 ::openfl::geom::Rectangle _hx_tmp5 = this->sRegion;
HXDLIN( 120)			Float _hx_tmp6 = (this->_width * resolution);
HXDLIN( 120)			_hx_tmp5->setTo((int)0,(int)0,_hx_tmp6,(this->_height * resolution));
HXLINE( 121)			if (::Std_obj::is(texture,hx::ClassOf< ::starling::textures::SubTexture >())) {
HXLINE( 121)				subTexture = ( ( ::starling::textures::SubTexture)(texture) );
            			}
            			else {
HXLINE( 121)				subTexture = null();
            			}
HXLINE( 123)			if (hx::IsNotNull( subTexture )) {
HXLINE( 124)				 ::starling::textures::ConcreteTexture _hx_tmp7 = texture->get_root();
HXDLIN( 124)				subTexture->setTo(_hx_tmp7,this->sRegion,true,null(),false,resolution);
            			}
            			else {
HXLINE( 126)				 ::starling::textures::ConcreteTexture texture2 = texture->get_root();
HXDLIN( 126)				texture =  ::starling::textures::SubTexture_obj::__alloc( HX_CTX ,texture2,this->sRegion,true,null(),false,resolution);
            			}
            		}
HXLINE( 129)		texture->get_root()->clear(null(),null());
HXLINE( 130)		return texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterHelper_obj,getTexture,return )

void FilterHelper_obj::putTexture( ::starling::textures::Texture texture){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_136_putTexture)
HXDLIN( 136)		if (hx::IsNotNull( texture )) {
HXLINE( 138)			bool _hx_tmp;
HXDLIN( 138)			Float _hx_tmp1 = texture->get_root()->get_nativeWidth();
HXDLIN( 138)			if ((_hx_tmp1 == this->_nativeWidth)) {
HXLINE( 138)				Float _hx_tmp2 = texture->get_root()->get_nativeHeight();
HXDLIN( 138)				_hx_tmp = (_hx_tmp2 == this->_nativeHeight);
            			}
            			else {
HXLINE( 138)				_hx_tmp = false;
            			}
HXDLIN( 138)			if (_hx_tmp) {
HXLINE( 139)				 ::openfl::_Vector::AbstractVector this1 = this->_pool;
HXDLIN( 139)				int index = ::openfl::_Vector::IVector_obj::get_length(this->_pool->data);
HXDLIN( 139)				::openfl::_Vector::IVector_obj::insertAt(this1->data,index,texture);
            			}
            			else {
HXLINE( 141)				texture->dispose();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterHelper_obj,putTexture,(void))

void FilterHelper_obj::purge(){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_147_purge)
HXLINE( 148)		int len = ::openfl::_Vector::IVector_obj::get_length(this->_pool->data);
HXLINE( 149)		{
HXLINE( 149)			int _g1 = (int)0;
HXDLIN( 149)			int _g = len;
HXDLIN( 149)			while((_g1 < _g)){
HXLINE( 149)				_g1 = (_g1 + (int)1);
HXDLIN( 149)				int i = (_g1 - (int)1);
HXLINE( 150)				( ( ::starling::textures::Texture)(::openfl::_Vector::IVector_obj::get(this->_pool->data,i)) )->dispose();
            			}
            		}
HXLINE( 152)		::openfl::_Vector::IVector_obj::set_length(this->_pool->data,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterHelper_obj,purge,(void))

void FilterHelper_obj::setSize(Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_159_setSize)
HXLINE( 160)		Float factor;
HXLINE( 161)		Float newScale = this->_preferredScale;
HXLINE( 162)		int maxNativeSize = ::starling::textures::Texture_obj::get_maxSize();
HXLINE( 163)		int newNativeWidth = this->getNativeSize(width,newScale);
HXLINE( 164)		int newNativeHeight = this->getNativeSize(height,newScale);
HXLINE( 166)		bool _hx_tmp;
HXDLIN( 166)		if ((newNativeWidth <= maxNativeSize)) {
HXLINE( 166)			_hx_tmp = (newNativeHeight > maxNativeSize);
            		}
            		else {
HXLINE( 166)			_hx_tmp = true;
            		}
HXDLIN( 166)		if (_hx_tmp) {
HXLINE( 168)			factor = ((Float)maxNativeSize / (Float)::Math_obj::max(newNativeWidth,newNativeHeight));
HXLINE( 169)			newNativeWidth = ::Std_obj::_hx_int((newNativeWidth * factor));
HXLINE( 170)			newNativeHeight = ::Std_obj::_hx_int((newNativeWidth * factor));
HXLINE( 171)			newScale = (newScale * factor);
            		}
HXLINE( 174)		bool _hx_tmp1;
HXDLIN( 174)		bool _hx_tmp2;
HXDLIN( 174)		if ((this->_nativeWidth == newNativeWidth)) {
HXLINE( 174)			_hx_tmp2 = (this->_nativeHeight != newNativeHeight);
            		}
            		else {
HXLINE( 174)			_hx_tmp2 = true;
            		}
HXDLIN( 174)		if (!(_hx_tmp2)) {
HXLINE( 174)			_hx_tmp1 = (this->_scale != newScale);
            		}
            		else {
HXLINE( 174)			_hx_tmp1 = true;
            		}
HXDLIN( 174)		if (_hx_tmp1) {
HXLINE( 177)			this->purge();
HXLINE( 179)			this->_scale = newScale;
HXLINE( 180)			this->_nativeWidth = newNativeWidth;
HXLINE( 181)			this->_nativeHeight = newNativeHeight;
            		}
HXLINE( 184)		this->_width = width;
HXLINE( 185)		this->_height = height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FilterHelper_obj,setSize,(void))

int FilterHelper_obj::getNativeSize(Float size,Float textureScale){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_189_getNativeSize)
HXLINE( 190)		Float nativeSize = (size * textureScale);
HXLINE( 192)		if (this->_usePotTextures) {
HXLINE( 193)			if ((nativeSize > this->_sizeStep)) {
HXLINE( 193)				return ::starling::utils::MathUtil_obj::getNextPowerOfTwo(nativeSize);
            			}
            			else {
HXLINE( 193)				return this->_sizeStep;
            			}
            		}
            		else {
HXLINE( 195)			return (::Math_obj::ceil(((Float)nativeSize / (Float)this->_sizeStep)) * this->_sizeStep);
            		}
HXLINE( 192)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FilterHelper_obj,getNativeSize,return )

 ::openfl::geom::Matrix3D FilterHelper_obj::get_projectionMatrix3D(){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_200_get_projectionMatrix3D)
HXDLIN( 200)		return this->_projectionMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterHelper_obj,get_projectionMatrix3D,return )

 ::openfl::geom::Matrix3D FilterHelper_obj::set_projectionMatrix3D( ::openfl::geom::Matrix3D value){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_202_set_projectionMatrix3D)
HXLINE( 203)		this->_projectionMatrix->copyFrom(value);
HXLINE( 204)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterHelper_obj,set_projectionMatrix3D,return )

 ::starling::textures::Texture FilterHelper_obj::get_renderTarget(){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_209_get_renderTarget)
HXDLIN( 209)		return this->_renderTarget;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterHelper_obj,get_renderTarget,return )

 ::starling::textures::Texture FilterHelper_obj::set_renderTarget( ::starling::textures::Texture value){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_210_set_renderTarget)
HXDLIN( 210)		return (this->_renderTarget = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterHelper_obj,set_renderTarget,return )

 ::openfl::geom::Rectangle FilterHelper_obj::get_clipRect(){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_214_get_clipRect)
HXDLIN( 214)		return this->_clipRect;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterHelper_obj,get_clipRect,return )

 ::openfl::geom::Rectangle FilterHelper_obj::set_clipRect( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_216_set_clipRect)
HXLINE( 217)		if (hx::IsNotNull( value )) {
HXLINE( 219)			if (hx::IsNotNull( this->_clipRect )) {
HXLINE( 219)				this->_clipRect->copyFrom(value);
            			}
            			else {
HXLINE( 220)				this->_clipRect = ::starling::utils::Pool_obj::getRectangle(value->x,value->y,value->width,value->height);
            			}
            		}
            		else {
HXLINE( 222)			if (hx::IsNotNull( this->_clipRect )) {
HXLINE( 224)				::starling::utils::Pool_obj::putRectangle(this->_clipRect);
HXLINE( 225)				this->_clipRect = null();
            			}
            		}
HXLINE( 227)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterHelper_obj,set_clipRect,return )

 ::openfl::geom::Rectangle FilterHelper_obj::get_targetBounds(){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_232_get_targetBounds)
HXDLIN( 232)		return this->_targetBounds;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterHelper_obj,get_targetBounds,return )

 ::openfl::geom::Rectangle FilterHelper_obj::set_targetBounds( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_234_set_targetBounds)
HXLINE( 235)		this->_targetBounds->copyFrom(value);
HXLINE( 236)		this->setSize(value->width,value->height);
HXLINE( 237)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterHelper_obj,set_targetBounds,return )

 ::starling::display::DisplayObject FilterHelper_obj::get_target(){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_242_get_target)
HXDLIN( 242)		return this->_target;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterHelper_obj,get_target,return )

 ::starling::display::DisplayObject FilterHelper_obj::set_target( ::starling::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_243_set_target)
HXDLIN( 243)		return (this->_target = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterHelper_obj,set_target,return )

Float FilterHelper_obj::get_textureScale(){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_247_get_textureScale)
HXDLIN( 247)		return this->_preferredScale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterHelper_obj,get_textureScale,return )

Float FilterHelper_obj::set_textureScale(Float value){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_250_set_textureScale)
HXDLIN( 250)		Float _hx_tmp;
HXDLIN( 250)		if ((value > (int)0)) {
HXDLIN( 250)			_hx_tmp = value;
            		}
            		else {
HXDLIN( 250)			_hx_tmp = ::starling::core::Starling_obj::get_current()->get_contentScaleFactor();
            		}
HXDLIN( 250)		return (this->_preferredScale = _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterHelper_obj,set_textureScale,return )

::String FilterHelper_obj::get_textureFormat(){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_255_get_textureFormat)
HXDLIN( 255)		return this->_textureFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterHelper_obj,get_textureFormat,return )

::String FilterHelper_obj::set_textureFormat(::String value){
            	HX_STACKFRAME(&_hx_pos_a6b6f16127efa2d1_256_set_textureFormat)
HXDLIN( 256)		return (this->_textureFormat = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterHelper_obj,set_textureFormat,return )


hx::ObjectPtr< FilterHelper_obj > FilterHelper_obj::__new(::String __o_textureFormat) {
	hx::ObjectPtr< FilterHelper_obj > __this = new FilterHelper_obj();
	__this->__construct(__o_textureFormat);
	return __this;
}

hx::ObjectPtr< FilterHelper_obj > FilterHelper_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_textureFormat) {
	FilterHelper_obj *__this = (FilterHelper_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FilterHelper_obj), true, "starling.filters.FilterHelper"));
	*(void **)__this = FilterHelper_obj::_hx_vtable;
	__this->__construct(__o_textureFormat);
	return __this;
}

FilterHelper_obj::FilterHelper_obj()
{
}

void FilterHelper_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FilterHelper);
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_nativeWidth,"_nativeWidth");
	HX_MARK_MEMBER_NAME(_nativeHeight,"_nativeHeight");
	HX_MARK_MEMBER_NAME(_pool,"_pool");
	HX_MARK_MEMBER_NAME(_usePotTextures,"_usePotTextures");
	HX_MARK_MEMBER_NAME(_textureFormat,"_textureFormat");
	HX_MARK_MEMBER_NAME(_preferredScale,"_preferredScale");
	HX_MARK_MEMBER_NAME(_scale,"_scale");
	HX_MARK_MEMBER_NAME(_sizeStep,"_sizeStep");
	HX_MARK_MEMBER_NAME(_numPasses,"_numPasses");
	HX_MARK_MEMBER_NAME(_projectionMatrix,"_projectionMatrix");
	HX_MARK_MEMBER_NAME(_renderTarget,"_renderTarget");
	HX_MARK_MEMBER_NAME(_targetBounds,"_targetBounds");
	HX_MARK_MEMBER_NAME(_target,"_target");
	HX_MARK_MEMBER_NAME(_clipRect,"_clipRect");
	HX_MARK_MEMBER_NAME(sRegion,"sRegion");
	HX_MARK_END_CLASS();
}

void FilterHelper_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_nativeWidth,"_nativeWidth");
	HX_VISIT_MEMBER_NAME(_nativeHeight,"_nativeHeight");
	HX_VISIT_MEMBER_NAME(_pool,"_pool");
	HX_VISIT_MEMBER_NAME(_usePotTextures,"_usePotTextures");
	HX_VISIT_MEMBER_NAME(_textureFormat,"_textureFormat");
	HX_VISIT_MEMBER_NAME(_preferredScale,"_preferredScale");
	HX_VISIT_MEMBER_NAME(_scale,"_scale");
	HX_VISIT_MEMBER_NAME(_sizeStep,"_sizeStep");
	HX_VISIT_MEMBER_NAME(_numPasses,"_numPasses");
	HX_VISIT_MEMBER_NAME(_projectionMatrix,"_projectionMatrix");
	HX_VISIT_MEMBER_NAME(_renderTarget,"_renderTarget");
	HX_VISIT_MEMBER_NAME(_targetBounds,"_targetBounds");
	HX_VISIT_MEMBER_NAME(_target,"_target");
	HX_VISIT_MEMBER_NAME(_clipRect,"_clipRect");
	HX_VISIT_MEMBER_NAME(sRegion,"sRegion");
}

hx::Val FilterHelper_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_pool") ) { return hx::Val( _pool ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		if (HX_FIELD_EQ(inName,"purge") ) { return hx::Val( purge_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width ); }
		if (HX_FIELD_EQ(inName,"_scale") ) { return hx::Val( _scale ); }
		if (HX_FIELD_EQ(inName,"target") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_target() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height ); }
		if (HX_FIELD_EQ(inName,"_target") ) { return hx::Val( _target ); }
		if (HX_FIELD_EQ(inName,"sRegion") ) { return hx::Val( sRegion ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSize") ) { return hx::Val( setSize_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"clipRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_clipRect() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_sizeStep") ) { return hx::Val( _sizeStep ); }
		if (HX_FIELD_EQ(inName,"_clipRect") ) { return hx::Val( _clipRect ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_numPasses") ) { return hx::Val( _numPasses ); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"putTexture") ) { return hx::Val( putTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_target") ) { return hx::Val( get_target_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_target") ) { return hx::Val( set_target_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_nativeWidth") ) { return hx::Val( _nativeWidth ); }
		if (HX_FIELD_EQ(inName,"renderTarget") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_renderTarget() ); }
		if (HX_FIELD_EQ(inName,"get_clipRect") ) { return hx::Val( get_clipRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_clipRect") ) { return hx::Val( set_clipRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"targetBounds") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_targetBounds() ); }
		if (HX_FIELD_EQ(inName,"textureScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textureScale() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_nativeHeight") ) { return hx::Val( _nativeHeight ); }
		if (HX_FIELD_EQ(inName,"_renderTarget") ) { return hx::Val( _renderTarget ); }
		if (HX_FIELD_EQ(inName,"_targetBounds") ) { return hx::Val( _targetBounds ); }
		if (HX_FIELD_EQ(inName,"getNativeSize") ) { return hx::Val( getNativeSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"textureFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textureFormat() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_textureFormat") ) { return hx::Val( _textureFormat ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_usePotTextures") ) { return hx::Val( _usePotTextures ); }
		if (HX_FIELD_EQ(inName,"_preferredScale") ) { return hx::Val( _preferredScale ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_renderTarget") ) { return hx::Val( get_renderTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_renderTarget") ) { return hx::Val( set_renderTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_targetBounds") ) { return hx::Val( get_targetBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_targetBounds") ) { return hx::Val( set_targetBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textureScale") ) { return hx::Val( get_textureScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textureScale") ) { return hx::Val( set_textureScale_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_projectionMatrix") ) { return hx::Val( _projectionMatrix ); }
		if (HX_FIELD_EQ(inName,"get_textureFormat") ) { return hx::Val( get_textureFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textureFormat") ) { return hx::Val( set_textureFormat_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionMatrix3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_projectionMatrix3D() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_projectionMatrix3D") ) { return hx::Val( get_projectionMatrix3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_projectionMatrix3D") ) { return hx::Val( set_projectionMatrix3D_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FilterHelper_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_pool") ) { _pool=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scale") ) { _scale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"target") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_target(inValue.Cast<  ::starling::display::DisplayObject >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_target") ) { _target=inValue.Cast<  ::starling::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sRegion") ) { sRegion=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"clipRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clipRect(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_sizeStep") ) { _sizeStep=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_clipRect") ) { _clipRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_numPasses") ) { _numPasses=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_nativeWidth") ) { _nativeWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderTarget") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_renderTarget(inValue.Cast<  ::starling::textures::Texture >()) ); }
		if (HX_FIELD_EQ(inName,"targetBounds") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_targetBounds(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		if (HX_FIELD_EQ(inName,"textureScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textureScale(inValue.Cast< Float >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_nativeHeight") ) { _nativeHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_renderTarget") ) { _renderTarget=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_targetBounds") ) { _targetBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textureFormat(inValue.Cast< ::String >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_textureFormat") ) { _textureFormat=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_usePotTextures") ) { _usePotTextures=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_preferredScale") ) { _preferredScale=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_projectionMatrix") ) { _projectionMatrix=inValue.Cast<  ::openfl::geom::Matrix3D >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionMatrix3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_projectionMatrix3D(inValue.Cast<  ::openfl::geom::Matrix3D >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FilterHelper_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"));
	outFields->push(HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"));
	outFields->push(HX_HCSTRING("_nativeWidth","\xf0","\xe6","\x67","\x97"));
	outFields->push(HX_HCSTRING("_nativeHeight","\xbd","\xa3","\xd1","\x99"));
	outFields->push(HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd"));
	outFields->push(HX_HCSTRING("_usePotTextures","\x85","\xc9","\x45","\x03"));
	outFields->push(HX_HCSTRING("_textureFormat","\xb3","\x52","\xf8","\xce"));
	outFields->push(HX_HCSTRING("_preferredScale","\x28","\xae","\x0e","\x83"));
	outFields->push(HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"));
	outFields->push(HX_HCSTRING("_sizeStep","\x0c","\xa0","\xc4","\x2d"));
	outFields->push(HX_HCSTRING("_numPasses","\x26","\x9a","\xd5","\xfa"));
	outFields->push(HX_HCSTRING("_projectionMatrix","\x8f","\x76","\x36","\x69"));
	outFields->push(HX_HCSTRING("_renderTarget","\x26","\x8a","\xb1","\xd8"));
	outFields->push(HX_HCSTRING("_targetBounds","\x85","\x53","\x10","\x05"));
	outFields->push(HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5"));
	outFields->push(HX_HCSTRING("_clipRect","\x73","\x87","\x00","\xa0"));
	outFields->push(HX_HCSTRING("sRegion","\xc7","\x8d","\x45","\xe3"));
	outFields->push(HX_HCSTRING("projectionMatrix3D","\xe1","\x20","\xd2","\x1c"));
	outFields->push(HX_HCSTRING("renderTarget","\x47","\xf7","\x42","\xf6"));
	outFields->push(HX_HCSTRING("clipRect","\x14","\x90","\x6a","\x58"));
	outFields->push(HX_HCSTRING("targetBounds","\xa6","\xc0","\xa1","\x22"));
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("textureScale","\xaf","\x7b","\x6e","\x71"));
	outFields->push(HX_HCSTRING("textureFormat","\x72","\x62","\xa6","\x90"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FilterHelper_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FilterHelper_obj,_width),HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6")},
	{hx::fsFloat,(int)offsetof(FilterHelper_obj,_height),HX_HCSTRING("_height","\x86","\x19","\xc3","\x70")},
	{hx::fsInt,(int)offsetof(FilterHelper_obj,_nativeWidth),HX_HCSTRING("_nativeWidth","\xf0","\xe6","\x67","\x97")},
	{hx::fsInt,(int)offsetof(FilterHelper_obj,_nativeHeight),HX_HCSTRING("_nativeHeight","\xbd","\xa3","\xd1","\x99")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(FilterHelper_obj,_pool),HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd")},
	{hx::fsBool,(int)offsetof(FilterHelper_obj,_usePotTextures),HX_HCSTRING("_usePotTextures","\x85","\xc9","\x45","\x03")},
	{hx::fsString,(int)offsetof(FilterHelper_obj,_textureFormat),HX_HCSTRING("_textureFormat","\xb3","\x52","\xf8","\xce")},
	{hx::fsFloat,(int)offsetof(FilterHelper_obj,_preferredScale),HX_HCSTRING("_preferredScale","\x28","\xae","\x0e","\x83")},
	{hx::fsFloat,(int)offsetof(FilterHelper_obj,_scale),HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74")},
	{hx::fsInt,(int)offsetof(FilterHelper_obj,_sizeStep),HX_HCSTRING("_sizeStep","\x0c","\xa0","\xc4","\x2d")},
	{hx::fsInt,(int)offsetof(FilterHelper_obj,_numPasses),HX_HCSTRING("_numPasses","\x26","\x9a","\xd5","\xfa")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(int)offsetof(FilterHelper_obj,_projectionMatrix),HX_HCSTRING("_projectionMatrix","\x8f","\x76","\x36","\x69")},
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(FilterHelper_obj,_renderTarget),HX_HCSTRING("_renderTarget","\x26","\x8a","\xb1","\xd8")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(FilterHelper_obj,_targetBounds),HX_HCSTRING("_targetBounds","\x85","\x53","\x10","\x05")},
	{hx::fsObject /*::starling::display::DisplayObject*/ ,(int)offsetof(FilterHelper_obj,_target),HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(FilterHelper_obj,_clipRect),HX_HCSTRING("_clipRect","\x73","\x87","\x00","\xa0")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(FilterHelper_obj,sRegion),HX_HCSTRING("sRegion","\xc7","\x8d","\x45","\xe3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FilterHelper_obj_sStaticStorageInfo = 0;
#endif

static ::String FilterHelper_obj_sMemberFields[] = {
	HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"),
	HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"),
	HX_HCSTRING("_nativeWidth","\xf0","\xe6","\x67","\x97"),
	HX_HCSTRING("_nativeHeight","\xbd","\xa3","\xd1","\x99"),
	HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd"),
	HX_HCSTRING("_usePotTextures","\x85","\xc9","\x45","\x03"),
	HX_HCSTRING("_textureFormat","\xb3","\x52","\xf8","\xce"),
	HX_HCSTRING("_preferredScale","\x28","\xae","\x0e","\x83"),
	HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"),
	HX_HCSTRING("_sizeStep","\x0c","\xa0","\xc4","\x2d"),
	HX_HCSTRING("_numPasses","\x26","\x9a","\xd5","\xfa"),
	HX_HCSTRING("_projectionMatrix","\x8f","\x76","\x36","\x69"),
	HX_HCSTRING("_renderTarget","\x26","\x8a","\xb1","\xd8"),
	HX_HCSTRING("_targetBounds","\x85","\x53","\x10","\x05"),
	HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5"),
	HX_HCSTRING("_clipRect","\x73","\x87","\x00","\xa0"),
	HX_HCSTRING("sRegion","\xc7","\x8d","\x45","\xe3"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("getTexture","\xe5","\x4e","\x42","\xee"),
	HX_HCSTRING("putTexture","\xcc","\x15","\xf7","\xdf"),
	HX_HCSTRING("purge","\x2b","\xca","\x8d","\xca"),
	HX_HCSTRING("setSize","\x83","\xe1","\xd7","\x11"),
	HX_HCSTRING("getNativeSize","\x2e","\x0a","\xd6","\x6f"),
	HX_HCSTRING("get_projectionMatrix3D","\x2a","\x9a","\x66","\x76"),
	HX_HCSTRING("set_projectionMatrix3D","\x9e","\x16","\x12","\xaa"),
	HX_HCSTRING("get_renderTarget","\xd0","\xe3","\xe1","\xfa"),
	HX_HCSTRING("set_renderTarget","\x44","\xd1","\x23","\x51"),
	HX_HCSTRING("get_clipRect","\x1d","\x44","\x84","\x0d"),
	HX_HCSTRING("set_clipRect","\x91","\x67","\x7d","\x22"),
	HX_HCSTRING("get_targetBounds","\x2f","\xad","\x40","\x27"),
	HX_HCSTRING("set_targetBounds","\xa3","\x9a","\x82","\x7d"),
	HX_HCSTRING("get_target","\x1a","\x63","\x74","\x77"),
	HX_HCSTRING("set_target","\x8e","\x01","\xf2","\x7a"),
	HX_HCSTRING("get_textureScale","\x38","\x68","\x0d","\x76"),
	HX_HCSTRING("set_textureScale","\xac","\x55","\x4f","\xcc"),
	HX_HCSTRING("get_textureFormat","\xc9","\x6d","\x16","\x97"),
	HX_HCSTRING("set_textureFormat","\xd5","\x45","\x84","\xba"),
	::String(null()) };

static void FilterHelper_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FilterHelper_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FilterHelper_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FilterHelper_obj::__mClass,"__mClass");
};

#endif

hx::Class FilterHelper_obj::__mClass;

void FilterHelper_obj::__register()
{
	hx::Object *dummy = new FilterHelper_obj;
	FilterHelper_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.filters.FilterHelper","\x5f","\xe3","\xbc","\x5d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FilterHelper_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FilterHelper_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FilterHelper_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FilterHelper_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FilterHelper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FilterHelper_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace filters
