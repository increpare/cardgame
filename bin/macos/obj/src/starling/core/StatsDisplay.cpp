// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_core_StatsDisplay
#include <starling/core/StatsDisplay.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_events_EnterFrameEvent
#include <starling/events/EnterFrameEvent.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_styles_MeshStyle
#include <starling/styles/MeshStyle.h>
#endif
#ifndef INCLUDED_starling_text_TextField
#include <starling/text/TextField.h>
#endif
#ifndef INCLUDED_starling_text_TextFormat
#include <starling/text/TextFormat.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_28_new,"starling.core.StatsDisplay","new",0xfac29c3e,"starling.core.StatsDisplay.new","starling/core/StatsDisplay.hx",28,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_98_onAddedToStage,"starling.core.StatsDisplay","onAddedToStage",0x6684a704,"starling.core.StatsDisplay.onAddedToStage","starling/core/StatsDisplay.hx",98,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_106_onRemovedFromStage,"starling.core.StatsDisplay","onRemovedFromStage",0xf03b0a55,"starling.core.StatsDisplay.onRemovedFromStage","starling/core/StatsDisplay.hx",106,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_110_onEnterFrame,"starling.core.StatsDisplay","onEnterFrame",0xf0076e56,"starling.core.StatsDisplay.onEnterFrame","starling/core/StatsDisplay.hx",110,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_125_update,"starling.core.StatsDisplay","update",0x0664f8eb,"starling.core.StatsDisplay.update","starling/core/StatsDisplay.hx",125,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_143_markFrameAsSkipped,"starling.core.StatsDisplay","markFrameAsSkipped",0x7e02f5c0,"starling.core.StatsDisplay.markFrameAsSkipped","starling/core/StatsDisplay.hx",143,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_147_render,"starling.core.StatsDisplay","render",0x8488de38,"starling.core.StatsDisplay.render","starling/core/StatsDisplay.hx",147,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_165_get_supportsGpuMem,"starling.core.StatsDisplay","get_supportsGpuMem",0x09c2ee98,"starling.core.StatsDisplay.get_supportsGpuMem","starling/core/StatsDisplay.hx",165,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_174_get_drawCount,"starling.core.StatsDisplay","get_drawCount",0x83addb60,"starling.core.StatsDisplay.get_drawCount","starling/core/StatsDisplay.hx",174,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_175_set_drawCount,"starling.core.StatsDisplay","set_drawCount",0xc8b3bd6c,"starling.core.StatsDisplay.set_drawCount","starling/core/StatsDisplay.hx",175,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_179_get_fps,"starling.core.StatsDisplay","get_fps",0x1ae7a35e,"starling.core.StatsDisplay.get_fps","starling/core/StatsDisplay.hx",179,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_180_set_fps,"starling.core.StatsDisplay","set_fps",0x0de9346a,"starling.core.StatsDisplay.set_fps","starling/core/StatsDisplay.hx",180,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_184_get_memory,"starling.core.StatsDisplay","get_memory",0xded6c6ac,"starling.core.StatsDisplay.get_memory","starling/core/StatsDisplay.hx",184,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_185_set_memory,"starling.core.StatsDisplay","set_memory",0xe2546520,"starling.core.StatsDisplay.set_memory","starling/core/StatsDisplay.hx",185,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_189_get_gpuMemory,"starling.core.StatsDisplay","get_gpuMemory",0x91161382,"starling.core.StatsDisplay.get_gpuMemory","starling/core/StatsDisplay.hx",189,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_190_set_gpuMemory,"starling.core.StatsDisplay","set_gpuMemory",0xd61bf58e,"starling.core.StatsDisplay.set_gpuMemory","starling/core/StatsDisplay.hx",190,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_30_boot,"starling.core.StatsDisplay","boot",0x679f1a94,"starling.core.StatsDisplay.boot","starling/core/StatsDisplay.hx",30,0x804bc492)
HX_LOCAL_STACK_FRAME(_hx_pos_c56883e0da8ef7b5_31_boot,"starling.core.StatsDisplay","boot",0x679f1a94,"starling.core.StatsDisplay.boot","starling/core/StatsDisplay.hx",31,0x804bc492)
namespace starling{
namespace core{

void StatsDisplay_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_28_new)
HXLINE(  44)		this->_hx___skipCount = (int)0;
HXLINE(  43)		this->_hx___drawCount = (int)0;
HXLINE(  42)		this->_hx___gpuMemory = ((Float)0);
HXLINE(  41)		this->_hx___memory = ((Float)0);
HXLINE(  40)		this->_hx___fps = ((Float)0);
HXLINE(  38)		this->_hx___totalTime = ((Float)0);
HXLINE(  37)		this->_hx___frameCount = (int)0;
HXLINE(  63)		super::__construct();
HXLINE(  65)		::String fontName = HX_("mini",97,4e,5c,48);
HXLINE(  66)		Float fontSize = (int)-1;
HXLINE(  67)		int fontColor = (int)16777215;
HXLINE(  68)		int width = (int)90;
HXLINE(  69)		int height;
HXDLIN(  69)		if (this->get_supportsGpuMem()) {
HXLINE(  69)			height = (int)35;
            		}
            		else {
HXLINE(  69)			height = (int)27;
            		}
HXLINE(  70)		::String gpuLabel;
HXDLIN(  70)		if (this->get_supportsGpuMem()) {
HXLINE(  70)			gpuLabel = HX_("\ngpu memory:",5b,f8,40,3d);
            		}
            		else {
HXLINE(  70)			gpuLabel = HX_("",00,00,00,00);
            		}
HXLINE(  71)		::String labels = ((HX_("frames/sec:\nstd memory:",a4,f6,11,d5) + gpuLabel) + HX_("\ndraw calls:",57,9d,08,f7));
HXLINE(  73)		this->_hx___labels =  ::starling::text::TextField_obj::__alloc( HX_CTX ,width,height,labels,null());
HXLINE(  74)		this->_hx___labels->get_format()->setTo(fontName,fontSize,fontColor,HX_("left",07,08,b0,47),null());
HXLINE(  75)		this->_hx___labels->set_batchable(true);
HXLINE(  76)		this->_hx___labels->set_x((int)2);
HXLINE(  78)		this->_hx___values =  ::starling::text::TextField_obj::__alloc( HX_CTX ,(width - (int)1),height,HX_("",00,00,00,00),null());
HXLINE(  79)		this->_hx___values->get_format()->setTo(fontName,fontSize,fontColor,HX_("right",dc,0b,64,e9),null());
HXLINE(  80)		this->_hx___values->set_batchable(true);
HXLINE(  82)		this->_hx___background =  ::starling::display::Quad_obj::__alloc( HX_CTX ,width,height,(int)0);
HXLINE(  85)		if (hx::IsNotEq( this->_hx___background->get_style()->get_type(),hx::ClassOf< ::starling::styles::MeshStyle >() )) {
HXLINE(  85)			 ::starling::display::Quad _hx_tmp = this->_hx___background;
HXDLIN(  85)			_hx_tmp->set_style( ::starling::styles::MeshStyle_obj::__alloc( HX_CTX ));
            		}
HXLINE(  86)		if (hx::IsNotEq( this->_hx___labels->get_style()->get_type(),hx::ClassOf< ::starling::styles::MeshStyle >() )) {
HXLINE(  86)			 ::starling::text::TextField _hx_tmp1 = this->_hx___labels;
HXDLIN(  86)			_hx_tmp1->set_style( ::starling::styles::MeshStyle_obj::__alloc( HX_CTX ));
            		}
HXLINE(  87)		if (hx::IsNotEq( this->_hx___values->get_style()->get_type(),hx::ClassOf< ::starling::styles::MeshStyle >() )) {
HXLINE(  87)			 ::starling::text::TextField _hx_tmp2 = this->_hx___values;
HXDLIN(  87)			_hx_tmp2->set_style( ::starling::styles::MeshStyle_obj::__alloc( HX_CTX ));
            		}
HXLINE(  89)		this->addChild(this->_hx___background);
HXLINE(  90)		this->addChild(this->_hx___labels);
HXLINE(  91)		this->addChild(this->_hx___values);
HXLINE(  93)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn());
HXLINE(  94)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn());
            	}

Dynamic StatsDisplay_obj::__CreateEmpty() { return new StatsDisplay_obj; }

void *StatsDisplay_obj::_hx_vtable = 0;

Dynamic StatsDisplay_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StatsDisplay_obj > _hx_result = new StatsDisplay_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StatsDisplay_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x478fd1bb) {
		if (inClassId<=(int)0x31a4bcfa) {
			if (inClassId<=(int)0x25137bc0) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
			} else {
				return inClassId==(int)0x31a4bcfa;
			}
		} else {
			return inClassId==(int)0x478fd1bb;
		}
	} else {
		return inClassId==(int)0x4ae232b2 || inClassId==(int)0x6dea180f;
	}
}

void StatsDisplay_obj::onAddedToStage( ::starling::events::Event e){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_98_onAddedToStage)
HXLINE(  99)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn());
HXLINE( 100)		this->_hx___totalTime = (this->_hx___frameCount = (this->_hx___skipCount = (int)0));
HXLINE( 101)		this->update();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatsDisplay_obj,onAddedToStage,(void))

void StatsDisplay_obj::onRemovedFromStage( ::starling::events::Event e){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_106_onRemovedFromStage)
HXDLIN( 106)		this->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatsDisplay_obj,onRemovedFromStage,(void))

void StatsDisplay_obj::onEnterFrame( ::starling::events::Event e){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_110_onEnterFrame)
HXLINE( 111)		 ::starling::events::EnterFrameEvent event = hx::TCast<  ::starling::events::EnterFrameEvent >::cast(e);
HXLINE( 112)		 ::starling::core::StatsDisplay _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 112)		Float _hx_tmp1 = _hx_tmp->_hx___totalTime;
HXDLIN( 112)		_hx_tmp->_hx___totalTime = (_hx_tmp1 + event->get_passedTime());
HXLINE( 113)		this->_hx___frameCount++;
HXLINE( 115)		if ((this->_hx___totalTime > ((Float)0.5))) {
HXLINE( 117)			this->update();
HXLINE( 118)			this->_hx___frameCount = (this->_hx___skipCount = (int)0);
HXLINE( 119)			this->_hx___totalTime = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatsDisplay_obj,onEnterFrame,(void))

void StatsDisplay_obj::update(){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_125_update)
HXLINE( 126)		int _hx_tmp;
HXDLIN( 126)		int _hx_tmp1 = this->_hx___skipCount;
HXDLIN( 126)		if ((_hx_tmp1 > ((Float)this->_hx___frameCount / (Float)(int)2))) {
HXLINE( 126)			_hx_tmp = (int)16128;
            		}
            		else {
HXLINE( 126)			_hx_tmp = (int)0;
            		}
HXDLIN( 126)		this->_hx___background->set_color(_hx_tmp);
HXLINE( 127)		Float _hx_tmp2;
HXDLIN( 127)		if ((this->_hx___totalTime > (int)0)) {
HXLINE( 127)			_hx_tmp2 = ((Float)this->_hx___frameCount / (Float)this->_hx___totalTime);
            		}
            		else {
HXLINE( 127)			_hx_tmp2 = (int)0;
            		}
HXDLIN( 127)		this->_hx___fps = _hx_tmp2;
HXLINE( 128)		this->_hx___memory = (::openfl::_hx_system::System_obj::get_totalMemory() * ((Float)9.5367431640625e-07));
HXLINE( 129)		Float _hx_tmp3;
HXDLIN( 129)		if (this->get_supportsGpuMem()) {
HXLINE( 129)			_hx_tmp3 = (::Reflect_obj::field(::starling::core::Starling_obj::get_current()->get_context(),HX_("totalGPUMemory",e9,89,1b,9c)) * ((Float)9.5367431640625e-07));
            		}
            		else {
HXLINE( 129)			_hx_tmp3 = (int)-1;
            		}
HXDLIN( 129)		this->_hx___gpuMemory = _hx_tmp3;
HXLINE( 131)		int fpsText;
HXDLIN( 131)		if ((this->_hx___fps < (int)100)) {
HXLINE( 131)			fpsText = (int)1;
            		}
            		else {
HXLINE( 131)			fpsText = (int)0;
            		}
HXDLIN( 131)		::String fpsText1 = ::starling::utils::MathUtil_obj::toFixed(this->_hx___fps,fpsText);
HXLINE( 132)		int memText;
HXDLIN( 132)		if ((this->_hx___memory < (int)100)) {
HXLINE( 132)			memText = (int)1;
            		}
            		else {
HXLINE( 132)			memText = (int)0;
            		}
HXDLIN( 132)		::String memText1 = ::starling::utils::MathUtil_obj::toFixed(this->_hx___memory,memText);
HXLINE( 133)		int gpuMemText;
HXDLIN( 133)		if ((this->_hx___gpuMemory < (int)100)) {
HXLINE( 133)			gpuMemText = (int)1;
            		}
            		else {
HXLINE( 133)			gpuMemText = (int)0;
            		}
HXDLIN( 133)		::String gpuMemText1 = ::starling::utils::MathUtil_obj::toFixed(this->_hx___gpuMemory,gpuMemText);
HXLINE( 134)		 ::Dynamic drwText;
HXDLIN( 134)		if ((this->_hx___totalTime > (int)0)) {
HXLINE( 134)			drwText = (this->_hx___drawCount - (int)2);
            		}
            		else {
HXLINE( 134)			drwText = this->_hx___drawCount;
            		}
HXDLIN( 134)		::String drwText1 = ::Std_obj::string(drwText);
HXLINE( 136)		 ::starling::text::TextField _hx_tmp4 = this->_hx___values;
HXLINE( 137)		::String _hx_tmp5;
HXDLIN( 137)		if ((this->_hx___gpuMemory >= (int)0)) {
HXLINE( 137)			_hx_tmp5 = (gpuMemText1 + HX_("\n",0a,00,00,00));
            		}
            		else {
HXLINE( 137)			_hx_tmp5 = HX_("",00,00,00,00);
            		}
HXLINE( 136)		_hx_tmp4->set_text((((((fpsText1 + HX_("\n",0a,00,00,00)) + memText1) + HX_("\n",0a,00,00,00)) + _hx_tmp5) + drwText1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDisplay_obj,update,(void))

void StatsDisplay_obj::markFrameAsSkipped(){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_143_markFrameAsSkipped)
HXDLIN( 143)		 ::starling::core::StatsDisplay _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 143)		_hx_tmp->_hx___skipCount = (_hx_tmp->_hx___skipCount + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDisplay_obj,markFrameAsSkipped,(void))

void StatsDisplay_obj::render( ::starling::rendering::Painter painter){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_147_render)
HXLINE( 152)		painter->excludeFromCache(hx::ObjectPtr<OBJ_>(this));
HXLINE( 153)		painter->finishMeshBatch();
HXLINE( 154)		this->super::render(painter);
            	}


bool StatsDisplay_obj::get_supportsGpuMem(){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_165_get_supportsGpuMem)
HXDLIN( 165)		return (::starling::core::Starling_obj::get_current()->get_context()->totalGPUMemory != (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDisplay_obj,get_supportsGpuMem,return )

int StatsDisplay_obj::get_drawCount(){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_174_get_drawCount)
HXDLIN( 174)		return this->_hx___drawCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDisplay_obj,get_drawCount,return )

int StatsDisplay_obj::set_drawCount(int value){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_175_set_drawCount)
HXDLIN( 175)		return (this->_hx___drawCount = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatsDisplay_obj,set_drawCount,return )

Float StatsDisplay_obj::get_fps(){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_179_get_fps)
HXDLIN( 179)		return this->_hx___fps;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDisplay_obj,get_fps,return )

Float StatsDisplay_obj::set_fps(Float value){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_180_set_fps)
HXDLIN( 180)		return (this->_hx___fps = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatsDisplay_obj,set_fps,return )

Float StatsDisplay_obj::get_memory(){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_184_get_memory)
HXDLIN( 184)		return this->_hx___memory;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDisplay_obj,get_memory,return )

Float StatsDisplay_obj::set_memory(Float value){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_185_set_memory)
HXDLIN( 185)		return (this->_hx___memory = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatsDisplay_obj,set_memory,return )

Float StatsDisplay_obj::get_gpuMemory(){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_189_get_gpuMemory)
HXDLIN( 189)		return this->_hx___gpuMemory;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatsDisplay_obj,get_gpuMemory,return )

Float StatsDisplay_obj::set_gpuMemory(Float value){
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_190_set_gpuMemory)
HXDLIN( 190)		return (this->_hx___gpuMemory = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatsDisplay_obj,set_gpuMemory,return )

Float StatsDisplay_obj::UPDATE_INTERVAL;

Float StatsDisplay_obj::B_TO_MB;


hx::ObjectPtr< StatsDisplay_obj > StatsDisplay_obj::__new() {
	hx::ObjectPtr< StatsDisplay_obj > __this = new StatsDisplay_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< StatsDisplay_obj > StatsDisplay_obj::__alloc(hx::Ctx *_hx_ctx) {
	StatsDisplay_obj *__this = (StatsDisplay_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StatsDisplay_obj), true, "starling.core.StatsDisplay"));
	*(void **)__this = StatsDisplay_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

StatsDisplay_obj::StatsDisplay_obj()
{
}

void StatsDisplay_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StatsDisplay);
	HX_MARK_MEMBER_NAME(_hx___background,"__background");
	HX_MARK_MEMBER_NAME(_hx___labels,"__labels");
	HX_MARK_MEMBER_NAME(_hx___values,"__values");
	HX_MARK_MEMBER_NAME(_hx___frameCount,"__frameCount");
	HX_MARK_MEMBER_NAME(_hx___totalTime,"__totalTime");
	HX_MARK_MEMBER_NAME(_hx___fps,"__fps");
	HX_MARK_MEMBER_NAME(_hx___memory,"__memory");
	HX_MARK_MEMBER_NAME(_hx___gpuMemory,"__gpuMemory");
	HX_MARK_MEMBER_NAME(_hx___drawCount,"__drawCount");
	HX_MARK_MEMBER_NAME(_hx___skipCount,"__skipCount");
	 ::starling::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StatsDisplay_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___background,"__background");
	HX_VISIT_MEMBER_NAME(_hx___labels,"__labels");
	HX_VISIT_MEMBER_NAME(_hx___values,"__values");
	HX_VISIT_MEMBER_NAME(_hx___frameCount,"__frameCount");
	HX_VISIT_MEMBER_NAME(_hx___totalTime,"__totalTime");
	HX_VISIT_MEMBER_NAME(_hx___fps,"__fps");
	HX_VISIT_MEMBER_NAME(_hx___memory,"__memory");
	HX_VISIT_MEMBER_NAME(_hx___gpuMemory,"__gpuMemory");
	HX_VISIT_MEMBER_NAME(_hx___drawCount,"__drawCount");
	HX_VISIT_MEMBER_NAME(_hx___skipCount,"__skipCount");
	 ::starling::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val StatsDisplay_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fps() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"__fps") ) { return hx::Val( _hx___fps ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"memory") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_memory() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_fps") ) { return hx::Val( get_fps_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fps") ) { return hx::Val( set_fps_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__labels") ) { return hx::Val( _hx___labels ); }
		if (HX_FIELD_EQ(inName,"__values") ) { return hx::Val( _hx___values ); }
		if (HX_FIELD_EQ(inName,"__memory") ) { return hx::Val( _hx___memory ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawCount") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_drawCount() ); }
		if (HX_FIELD_EQ(inName,"gpuMemory") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_gpuMemory() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_memory") ) { return hx::Val( get_memory_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_memory") ) { return hx::Val( set_memory_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__totalTime") ) { return hx::Val( _hx___totalTime ); }
		if (HX_FIELD_EQ(inName,"__gpuMemory") ) { return hx::Val( _hx___gpuMemory ); }
		if (HX_FIELD_EQ(inName,"__drawCount") ) { return hx::Val( _hx___drawCount ); }
		if (HX_FIELD_EQ(inName,"__skipCount") ) { return hx::Val( _hx___skipCount ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__background") ) { return hx::Val( _hx___background ); }
		if (HX_FIELD_EQ(inName,"__frameCount") ) { return hx::Val( _hx___frameCount ); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return hx::Val( onEnterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_drawCount") ) { return hx::Val( get_drawCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_drawCount") ) { return hx::Val( set_drawCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gpuMemory") ) { return hx::Val( get_gpuMemory_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gpuMemory") ) { return hx::Val( set_gpuMemory_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return hx::Val( onAddedToStage_dyn() ); }
		if (HX_FIELD_EQ(inName,"supportsGpuMem") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_supportsGpuMem() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return hx::Val( onRemovedFromStage_dyn() ); }
		if (HX_FIELD_EQ(inName,"markFrameAsSkipped") ) { return hx::Val( markFrameAsSkipped_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_supportsGpuMem") ) { return hx::Val( get_supportsGpuMem_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val StatsDisplay_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fps(inValue.Cast< Float >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"__fps") ) { _hx___fps=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"memory") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_memory(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__labels") ) { _hx___labels=inValue.Cast<  ::starling::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__values") ) { _hx___values=inValue.Cast<  ::starling::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__memory") ) { _hx___memory=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawCount") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_drawCount(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"gpuMemory") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gpuMemory(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__totalTime") ) { _hx___totalTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__gpuMemory") ) { _hx___gpuMemory=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__drawCount") ) { _hx___drawCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__skipCount") ) { _hx___skipCount=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__background") ) { _hx___background=inValue.Cast<  ::starling::display::Quad >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__frameCount") ) { _hx___frameCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StatsDisplay_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__background","\x0e","\x0f","\xb1","\x5e"));
	outFields->push(HX_HCSTRING("__labels","\x1f","\x93","\xac","\xf1"));
	outFields->push(HX_HCSTRING("__values","\x02","\x6f","\xe6","\xf7"));
	outFields->push(HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66"));
	outFields->push(HX_HCSTRING("__totalTime","\xd1","\xc6","\xe3","\x97"));
	outFields->push(HX_HCSTRING("__fps","\xc9","\x28","\x2a","\xf2"));
	outFields->push(HX_HCSTRING("__memory","\x21","\x36","\xef","\xac"));
	outFields->push(HX_HCSTRING("__gpuMemory","\x2d","\xfb","\x02","\x4e"));
	outFields->push(HX_HCSTRING("__drawCount","\x0b","\xc3","\x9a","\x40"));
	outFields->push(HX_HCSTRING("__skipCount","\xb0","\xfa","\x8a","\x8c"));
	outFields->push(HX_HCSTRING("supportsGpuMem","\xed","\xcf","\x77","\x90"));
	outFields->push(HX_HCSTRING("drawCount","\x2b","\x7a","\x6e","\x12"));
	outFields->push(HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00"));
	outFields->push(HX_HCSTRING("memory","\x01","\xcb","\xbf","\x04"));
	outFields->push(HX_HCSTRING("gpuMemory","\x4d","\xb2","\xd6","\x1f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo StatsDisplay_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::display::Quad*/ ,(int)offsetof(StatsDisplay_obj,_hx___background),HX_HCSTRING("__background","\x0e","\x0f","\xb1","\x5e")},
	{hx::fsObject /*::starling::text::TextField*/ ,(int)offsetof(StatsDisplay_obj,_hx___labels),HX_HCSTRING("__labels","\x1f","\x93","\xac","\xf1")},
	{hx::fsObject /*::starling::text::TextField*/ ,(int)offsetof(StatsDisplay_obj,_hx___values),HX_HCSTRING("__values","\x02","\x6f","\xe6","\xf7")},
	{hx::fsInt,(int)offsetof(StatsDisplay_obj,_hx___frameCount),HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66")},
	{hx::fsFloat,(int)offsetof(StatsDisplay_obj,_hx___totalTime),HX_HCSTRING("__totalTime","\xd1","\xc6","\xe3","\x97")},
	{hx::fsFloat,(int)offsetof(StatsDisplay_obj,_hx___fps),HX_HCSTRING("__fps","\xc9","\x28","\x2a","\xf2")},
	{hx::fsFloat,(int)offsetof(StatsDisplay_obj,_hx___memory),HX_HCSTRING("__memory","\x21","\x36","\xef","\xac")},
	{hx::fsFloat,(int)offsetof(StatsDisplay_obj,_hx___gpuMemory),HX_HCSTRING("__gpuMemory","\x2d","\xfb","\x02","\x4e")},
	{hx::fsInt,(int)offsetof(StatsDisplay_obj,_hx___drawCount),HX_HCSTRING("__drawCount","\x0b","\xc3","\x9a","\x40")},
	{hx::fsInt,(int)offsetof(StatsDisplay_obj,_hx___skipCount),HX_HCSTRING("__skipCount","\xb0","\xfa","\x8a","\x8c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo StatsDisplay_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &StatsDisplay_obj::UPDATE_INTERVAL,HX_HCSTRING("UPDATE_INTERVAL","\x7b","\xc5","\x17","\x6d")},
	{hx::fsFloat,(void *) &StatsDisplay_obj::B_TO_MB,HX_HCSTRING("B_TO_MB","\xdc","\xd3","\x98","\x46")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String StatsDisplay_obj_sMemberFields[] = {
	HX_HCSTRING("__background","\x0e","\x0f","\xb1","\x5e"),
	HX_HCSTRING("__labels","\x1f","\x93","\xac","\xf1"),
	HX_HCSTRING("__values","\x02","\x6f","\xe6","\xf7"),
	HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66"),
	HX_HCSTRING("__totalTime","\xd1","\xc6","\xe3","\x97"),
	HX_HCSTRING("__fps","\xc9","\x28","\x2a","\xf2"),
	HX_HCSTRING("__memory","\x21","\x36","\xef","\xac"),
	HX_HCSTRING("__gpuMemory","\x2d","\xfb","\x02","\x4e"),
	HX_HCSTRING("__drawCount","\x0b","\xc3","\x9a","\x40"),
	HX_HCSTRING("__skipCount","\xb0","\xfa","\x8a","\x8c"),
	HX_HCSTRING("onAddedToStage","\x22","\x82","\x44","\x36"),
	HX_HCSTRING("onRemovedFromStage","\x73","\xcc","\x89","\x12"),
	HX_HCSTRING("onEnterFrame","\xf4","\xa5","\x93","\xda"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("markFrameAsSkipped","\xde","\xb7","\x51","\xa0"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("get_supportsGpuMem","\xb6","\xb0","\x11","\x2c"),
	HX_HCSTRING("get_drawCount","\x02","\x4e","\xd2","\xd3"),
	HX_HCSTRING("set_drawCount","\x0e","\x30","\xd8","\x18"),
	HX_HCSTRING("get_fps","\x80","\x90","\xc2","\x26"),
	HX_HCSTRING("set_fps","\x8c","\x21","\xc4","\x19"),
	HX_HCSTRING("get_memory","\xca","\x3a","\x47","\xf5"),
	HX_HCSTRING("set_memory","\x3e","\xd9","\xc4","\xf8"),
	HX_HCSTRING("get_gpuMemory","\x24","\x86","\x3a","\xe1"),
	HX_HCSTRING("set_gpuMemory","\x30","\x68","\x40","\x26"),
	::String(null()) };

static void StatsDisplay_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StatsDisplay_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(StatsDisplay_obj::UPDATE_INTERVAL,"UPDATE_INTERVAL");
	HX_MARK_MEMBER_NAME(StatsDisplay_obj::B_TO_MB,"B_TO_MB");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StatsDisplay_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StatsDisplay_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(StatsDisplay_obj::UPDATE_INTERVAL,"UPDATE_INTERVAL");
	HX_VISIT_MEMBER_NAME(StatsDisplay_obj::B_TO_MB,"B_TO_MB");
};

#endif

hx::Class StatsDisplay_obj::__mClass;

static ::String StatsDisplay_obj_sStaticFields[] = {
	HX_HCSTRING("UPDATE_INTERVAL","\x7b","\xc5","\x17","\x6d"),
	HX_HCSTRING("B_TO_MB","\xdc","\xd3","\x98","\x46"),
	::String(null())
};

void StatsDisplay_obj::__register()
{
	hx::Object *dummy = new StatsDisplay_obj;
	StatsDisplay_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.core.StatsDisplay","\x4c","\x65","\xfc","\x72");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StatsDisplay_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(StatsDisplay_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StatsDisplay_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StatsDisplay_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StatsDisplay_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StatsDisplay_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StatsDisplay_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StatsDisplay_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_30_boot)
HXDLIN(  30)		UPDATE_INTERVAL = ((Float)0.5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c56883e0da8ef7b5_31_boot)
HXDLIN(  31)		B_TO_MB = ((Float)9.5367431640625e-07);
            	}
}

} // end namespace starling
} // end namespace core
