// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_Effect
#include <starling/rendering/Effect.h>
#endif
#ifndef INCLUDED_starling_rendering_FilterEffect
#include <starling/rendering/FilterEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_IndexData
#include <starling/rendering/IndexData.h>
#endif
#ifndef INCLUDED_starling_rendering_MeshEffect
#include <starling/rendering/MeshEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexData
#include <starling/rendering/VertexData.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexDataFormat
#include <starling/rendering/VertexDataFormat.h>
#endif
#ifndef INCLUDED_starling_styles_MeshStyle
#include <starling/styles/MeshStyle.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_131_new,"starling.styles.MeshStyle","new",0xb3ee44f0,"starling.styles.MeshStyle.new","starling/styles/MeshStyle.hx",131,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_141_copyFrom,"starling.styles.MeshStyle","copyFrom",0xbfc60d2f,"starling.styles.MeshStyle.copyFrom","starling/styles/MeshStyle.hx",141,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_151_clone,"starling.styles.MeshStyle","clone",0xeeefcbed,"starling.styles.MeshStyle.clone","starling/styles/MeshStyle.hx",151,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_162_createEffect,"starling.styles.MeshStyle","createEffect",0x7453141d,"starling.styles.MeshStyle.createEffect","starling/styles/MeshStyle.hx",162,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_172_updateEffect,"starling.styles.MeshStyle","updateEffect",0x51c17aea,"starling.styles.MeshStyle.updateEffect","starling/styles/MeshStyle.hx",172,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_191_canBatchWith,"starling.styles.MeshStyle","canBatchWith",0x698ed220,"starling.styles.MeshStyle.canBatchWith","starling/styles/MeshStyle.hx",191,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_216_batchVertexData,"starling.styles.MeshStyle","batchVertexData",0x202b8498,"starling.styles.MeshStyle.batchVertexData","starling/styles/MeshStyle.hx",216,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_230_batchIndexData,"starling.styles.MeshStyle","batchIndexData",0x2b8ef4b2,"starling.styles.MeshStyle.batchIndexData","starling/styles/MeshStyle.hx",230,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_237_setRequiresRedraw,"starling.styles.MeshStyle","setRequiresRedraw",0xd6738917,"starling.styles.MeshStyle.setRequiresRedraw","starling/styles/MeshStyle.hx",237,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_244_setVertexDataChanged,"starling.styles.MeshStyle","setVertexDataChanged",0xfe57c254,"starling.styles.MeshStyle.setVertexDataChanged","starling/styles/MeshStyle.hx",244,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_251_setIndexDataChanged,"starling.styles.MeshStyle","setIndexDataChanged",0x2ed77e4a,"starling.styles.MeshStyle.setIndexDataChanged","starling/styles/MeshStyle.hx",251,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_256_onTargetAssigned,"starling.styles.MeshStyle","onTargetAssigned",0xcc35afae,"starling.styles.MeshStyle.onTargetAssigned","starling/styles/MeshStyle.hx",256,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_261_addEventListener,"starling.styles.MeshStyle","addEventListener",0x90cffd3d,"starling.styles.MeshStyle.addEventListener","starling/styles/MeshStyle.hx",261,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_269_removeEventListener,"starling.styles.MeshStyle","removeEventListener",0x815e1c5a,"starling.styles.MeshStyle.removeEventListener","starling/styles/MeshStyle.hx",269,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_278_onEnterFrame,"starling.styles.MeshStyle","onEnterFrame",0xcbee1f64,"starling.styles.MeshStyle.onEnterFrame","starling/styles/MeshStyle.hx",278,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_287_setTarget,"starling.styles.MeshStyle","setTarget",0x6790a923,"starling.styles.MeshStyle.setTarget","starling/styles/MeshStyle.hx",287,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_319_getVertexPosition,"starling.styles.MeshStyle","getVertexPosition",0xa18f3bf3,"starling.styles.MeshStyle.getVertexPosition","starling/styles/MeshStyle.hx",319,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_323_setVertexPosition,"starling.styles.MeshStyle","setVertexPosition",0xc4fd13ff,"starling.styles.MeshStyle.setVertexPosition","starling/styles/MeshStyle.hx",323,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_331_getVertexAlpha,"starling.styles.MeshStyle","getVertexAlpha",0x957079d4,"starling.styles.MeshStyle.getVertexAlpha","starling/styles/MeshStyle.hx",331,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_336_setVertexAlpha,"starling.styles.MeshStyle","setVertexAlpha",0xb5906248,"starling.styles.MeshStyle.setVertexAlpha","starling/styles/MeshStyle.hx",336,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_344_getVertexColor,"starling.styles.MeshStyle","getVertexColor",0xbe3643d9,"starling.styles.MeshStyle.getVertexColor","starling/styles/MeshStyle.hx",344,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_349_setVertexColor,"starling.styles.MeshStyle","setVertexColor",0xde562c4d,"starling.styles.MeshStyle.setVertexColor","starling/styles/MeshStyle.hx",349,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_357_getTexCoords,"starling.styles.MeshStyle","getTexCoords",0xa224735f,"starling.styles.MeshStyle.getTexCoords","starling/styles/MeshStyle.hx",357,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_363_setTexCoords,"starling.styles.MeshStyle","setTexCoords",0xb71d96d3,"starling.styles.MeshStyle.setTexCoords","starling/styles/MeshStyle.hx",363,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_376_get_vertexData,"starling.styles.MeshStyle","get_vertexData",0x21151d67,"starling.styles.MeshStyle.get_vertexData","starling/styles/MeshStyle.hx",376,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_382_get_indexData,"starling.styles.MeshStyle","get_indexData",0xfda4aac3,"starling.styles.MeshStyle.get_indexData","starling/styles/MeshStyle.hx",382,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_386_get_type,"starling.styles.MeshStyle","get_type",0xc428afb3,"starling.styles.MeshStyle.get_type","starling/styles/MeshStyle.hx",386,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_393_get_color,"starling.styles.MeshStyle","get_color",0x0f020e4a,"starling.styles.MeshStyle.get_color","starling/styles/MeshStyle.hx",393,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_398_set_color,"starling.styles.MeshStyle","set_color",0xf252fa56,"starling.styles.MeshStyle.set_color","starling/styles/MeshStyle.hx",398,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_416_get_vertexFormat,"starling.styles.MeshStyle","get_vertexFormat",0x41ae5fb4,"starling.styles.MeshStyle.get_vertexFormat","starling/styles/MeshStyle.hx",416,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_421_get_texture,"starling.styles.MeshStyle","get_texture",0x0dd4ad82,"starling.styles.MeshStyle.get_texture","starling/styles/MeshStyle.hx",421,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_423_set_texture,"starling.styles.MeshStyle","set_texture",0x1841b48e,"starling.styles.MeshStyle.set_texture","starling/styles/MeshStyle.hx",423,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_449_get_textureSmoothing,"starling.styles.MeshStyle","get_textureSmoothing",0xc8334792,"starling.styles.MeshStyle.get_textureSmoothing","starling/styles/MeshStyle.hx",449,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_451_set_textureSmoothing,"starling.styles.MeshStyle","set_textureSmoothing",0x94eaff06,"starling.styles.MeshStyle.set_textureSmoothing","starling/styles/MeshStyle.hx",451,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_463_get_textureRepeat,"starling.styles.MeshStyle","get_textureRepeat",0x7f0bc67d,"starling.styles.MeshStyle.get_textureRepeat","starling/styles/MeshStyle.hx",463,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_464_set_textureRepeat,"starling.styles.MeshStyle","set_textureRepeat",0xa2799e89,"starling.styles.MeshStyle.set_textureRepeat","starling/styles/MeshStyle.hx",464,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_468_get_target,"starling.styles.MeshStyle","get_target",0xd330a08a,"starling.styles.MeshStyle.get_target","starling/styles/MeshStyle.hx",468,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_96_boot,"starling.styles.MeshStyle","boot",0xb4a70da2,"starling.styles.MeshStyle.boot","starling/styles/MeshStyle.hx",96,0xf0aecaa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4b73943b20d9c3fa_108_boot,"starling.styles.MeshStyle","boot",0xb4a70da2,"starling.styles.MeshStyle.boot","starling/styles/MeshStyle.hx",108,0xf0aecaa0)
namespace starling{
namespace styles{

void MeshStyle_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_131_new)
HXLINE( 132)		super::__construct();
HXLINE( 133)		this->_textureSmoothing = HX_("bilinear",ec,b6,3d,e0);
HXLINE( 134)		this->_type = ::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic MeshStyle_obj::__CreateEmpty() { return new MeshStyle_obj; }

void *MeshStyle_obj::_hx_vtable = 0;

Dynamic MeshStyle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MeshStyle_obj > _hx_result = new MeshStyle_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MeshStyle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25137bc0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
	} else {
		return inClassId==(int)0x5759bdd6;
	}
}

void MeshStyle_obj::copyFrom( ::starling::styles::MeshStyle meshStyle){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_141_copyFrom)
HXLINE( 142)		this->_texture = meshStyle->_texture;
HXLINE( 143)		this->_textureRoot = meshStyle->_textureRoot;
HXLINE( 144)		this->_textureRepeat = meshStyle->_textureRepeat;
HXLINE( 145)		this->_textureSmoothing = meshStyle->_textureSmoothing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshStyle_obj,copyFrom,(void))

 ::starling::styles::MeshStyle MeshStyle_obj::clone(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_151_clone)
HXLINE( 152)		 ::starling::styles::MeshStyle clone = ( ( ::starling::styles::MeshStyle)(::Type_obj::createInstance(this->_type,::cpp::VirtualArray_obj::__new(0))) );
HXLINE( 153)		clone->copyFrom(hx::ObjectPtr<OBJ_>(this));
HXLINE( 154)		return clone;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,clone,return )

 ::starling::rendering::MeshEffect MeshStyle_obj::createEffect(){
            	HX_GC_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_162_createEffect)
HXDLIN( 162)		return  ::starling::rendering::MeshEffect_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,createEffect,return )

void MeshStyle_obj::updateEffect( ::starling::rendering::MeshEffect effect, ::starling::rendering::RenderState state){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_172_updateEffect)
HXLINE( 173)		effect->set_texture(this->_texture);
HXLINE( 174)		effect->set_textureRepeat(this->_textureRepeat);
HXLINE( 175)		effect->set_textureSmoothing(this->_textureSmoothing);
HXLINE( 176)		effect->set_mvpMatrix3D(state->get_mvpMatrix3D());
HXLINE( 177)		effect->set_alpha(state->get_alpha());
HXLINE( 178)		effect->set_tinted(this->_vertexData->get_tinted());
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshStyle_obj,updateEffect,(void))

bool MeshStyle_obj::canBatchWith( ::starling::styles::MeshStyle meshStyle){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_191_canBatchWith)
HXDLIN( 191)		if (hx::IsEq( this->_type,meshStyle->_type )) {
HXLINE( 193)			 ::starling::textures::Texture newTexture = meshStyle->_texture;
HXLINE( 195)			bool _hx_tmp;
HXDLIN( 195)			if (hx::IsNull( this->_texture )) {
HXLINE( 195)				_hx_tmp = hx::IsNull( newTexture );
            			}
            			else {
HXLINE( 195)				_hx_tmp = false;
            			}
HXDLIN( 195)			if (_hx_tmp) {
HXLINE( 195)				return true;
            			}
            			else {
HXLINE( 196)				bool _hx_tmp1;
HXDLIN( 196)				if (hx::IsNotNull( this->_texture )) {
HXLINE( 196)					_hx_tmp1 = hx::IsNotNull( newTexture );
            				}
            				else {
HXLINE( 196)					_hx_tmp1 = false;
            				}
HXDLIN( 196)				if (_hx_tmp1) {
HXLINE( 197)					bool _hx_tmp2;
HXDLIN( 197)					if (hx::IsEq( this->_textureRoot,meshStyle->_textureRoot )) {
HXLINE( 197)						_hx_tmp2 = (this->_textureSmoothing == meshStyle->_textureSmoothing);
            					}
            					else {
HXLINE( 197)						_hx_tmp2 = false;
            					}
HXDLIN( 197)					if (_hx_tmp2) {
HXLINE( 199)						return (this->_textureRepeat == meshStyle->_textureRepeat);
            					}
            					else {
HXLINE( 197)						return false;
            					}
            				}
            				else {
HXLINE( 200)					return false;
            				}
            			}
            		}
            		else {
HXLINE( 202)			return false;
            		}
HXLINE( 191)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshStyle_obj,canBatchWith,return )

void MeshStyle_obj::batchVertexData( ::starling::styles::MeshStyle targetStyle,hx::Null< int >  __o_targetVertexID, ::openfl::geom::Matrix matrix,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices){
int targetVertexID = __o_targetVertexID.Default(0);
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_216_batchVertexData)
HXDLIN( 216)		this->_vertexData->copyTo(targetStyle->_vertexData,targetVertexID,matrix,vertexID,numVertices);
            	}


HX_DEFINE_DYNAMIC_FUNC5(MeshStyle_obj,batchVertexData,(void))

void MeshStyle_obj::batchIndexData( ::starling::styles::MeshStyle targetStyle,hx::Null< int >  __o_targetIndexID,hx::Null< int >  __o_offset,hx::Null< int >  __o_indexID,hx::Null< int >  __o_numIndices){
int targetIndexID = __o_targetIndexID.Default(0);
int offset = __o_offset.Default(0);
int indexID = __o_indexID.Default(0);
int numIndices = __o_numIndices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_230_batchIndexData)
HXDLIN( 230)		this->_indexData->copyTo(targetStyle->_indexData,targetIndexID,offset,indexID,numIndices);
            	}


HX_DEFINE_DYNAMIC_FUNC5(MeshStyle_obj,batchIndexData,(void))

void MeshStyle_obj::setRequiresRedraw(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_237_setRequiresRedraw)
HXDLIN( 237)		if (hx::IsNotNull( this->_target )) {
HXDLIN( 237)			this->_target->setRequiresRedraw();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,setRequiresRedraw,(void))

void MeshStyle_obj::setVertexDataChanged(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_244_setVertexDataChanged)
HXDLIN( 244)		if (hx::IsNotNull( this->_target )) {
HXDLIN( 244)			this->_target->setVertexDataChanged();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,setVertexDataChanged,(void))

void MeshStyle_obj::setIndexDataChanged(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_251_setIndexDataChanged)
HXDLIN( 251)		if (hx::IsNotNull( this->_target )) {
HXDLIN( 251)			this->_target->setIndexDataChanged();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,setIndexDataChanged,(void))

void MeshStyle_obj::onTargetAssigned( ::starling::display::Mesh target){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_256_onTargetAssigned)
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshStyle_obj,onTargetAssigned,(void))

void MeshStyle_obj::addEventListener(::String type, ::Dynamic _tmp_listener){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_261_addEventListener)
HXLINE( 262)		 ::Dynamic listener = _tmp_listener;
HXDLIN( 262)		bool _hx_tmp;
HXDLIN( 262)		if ((type == HX_("enterFrame",f5,03,50,02))) {
HXLINE( 262)			_hx_tmp = hx::IsNotNull( this->_target );
            		}
            		else {
HXLINE( 262)			_hx_tmp = false;
            		}
HXDLIN( 262)		if (_hx_tmp) {
HXLINE( 263)			this->_target->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn());
            		}
HXLINE( 265)		this->super::addEventListener(type,listener);
            	}


void MeshStyle_obj::removeEventListener(::String type, ::Dynamic _tmp_listener){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_269_removeEventListener)
HXLINE( 270)		 ::Dynamic listener = _tmp_listener;
HXDLIN( 270)		bool _hx_tmp;
HXDLIN( 270)		if ((type == HX_("enterFrame",f5,03,50,02))) {
HXLINE( 270)			_hx_tmp = hx::IsNotNull( this->_target );
            		}
            		else {
HXLINE( 270)			_hx_tmp = false;
            		}
HXDLIN( 270)		if (_hx_tmp) {
HXLINE( 271)			this->_target->removeEventListener(type,this->onEnterFrame_dyn());
            		}
HXLINE( 273)		this->super::removeEventListener(type,listener);
            	}


void MeshStyle_obj::onEnterFrame( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_278_onEnterFrame)
HXDLIN( 278)		this->dispatchEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshStyle_obj,onEnterFrame,(void))

void MeshStyle_obj::setTarget( ::starling::display::Mesh target, ::starling::rendering::VertexData vertexData, ::starling::rendering::IndexData indexData){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_287_setTarget)
HXDLIN( 287)		if (hx::IsNotEq( this->_target,target )) {
HXLINE( 289)			if (hx::IsNotNull( this->_target )) {
HXLINE( 289)				this->_target->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn());
            			}
HXLINE( 290)			if (hx::IsNotNull( vertexData )) {
HXLINE( 290)				vertexData->set_format(this->get_vertexFormat());
            			}
HXLINE( 292)			this->_target = target;
HXLINE( 293)			this->_vertexData = vertexData;
HXLINE( 294)			this->_indexData = indexData;
HXLINE( 296)			if (hx::IsNotNull( target )) {
HXLINE( 298)				if (this->hasEventListener(HX_("enterFrame",f5,03,50,02),null())) {
HXLINE( 299)					target->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn());
            				}
HXLINE( 301)				this->onTargetAssigned(target);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(MeshStyle_obj,setTarget,(void))

 ::openfl::geom::Point MeshStyle_obj::getVertexPosition(int vertexID, ::openfl::geom::Point out){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_319_getVertexPosition)
HXDLIN( 319)		return this->_vertexData->getPoint(vertexID,HX_("position",a9,a0,fa,ca),out);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshStyle_obj,getVertexPosition,return )

void MeshStyle_obj::setVertexPosition(int vertexID,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_323_setVertexPosition)
HXLINE( 324)		this->_vertexData->setPoint(vertexID,HX_("position",a9,a0,fa,ca),x,y);
HXLINE( 325)		this->setVertexDataChanged();
            	}


HX_DEFINE_DYNAMIC_FUNC3(MeshStyle_obj,setVertexPosition,(void))

Float MeshStyle_obj::getVertexAlpha(int vertexID){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_331_getVertexAlpha)
HXDLIN( 331)		return this->_vertexData->getAlpha(vertexID,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshStyle_obj,getVertexAlpha,return )

void MeshStyle_obj::setVertexAlpha(int vertexID,Float alpha){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_336_setVertexAlpha)
HXLINE( 337)		this->_vertexData->setAlpha(vertexID,HX_("color",63,71,5c,4a),alpha);
HXLINE( 338)		this->setVertexDataChanged();
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshStyle_obj,setVertexAlpha,(void))

int MeshStyle_obj::getVertexColor(int vertexID){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_344_getVertexColor)
HXDLIN( 344)		return this->_vertexData->getColor(vertexID,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshStyle_obj,getVertexColor,return )

void MeshStyle_obj::setVertexColor(int vertexID,int color){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_349_setVertexColor)
HXLINE( 350)		this->_vertexData->setColor(vertexID,HX_("color",63,71,5c,4a),color);
HXLINE( 351)		this->setVertexDataChanged();
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshStyle_obj,setVertexColor,(void))

 ::openfl::geom::Point MeshStyle_obj::getTexCoords(int vertexID, ::openfl::geom::Point out){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_357_getTexCoords)
HXDLIN( 357)		if (hx::IsNotNull( this->_texture )) {
HXDLIN( 357)			return this->_texture->getTexCoords(this->_vertexData,vertexID,HX_("texCoords",65,5d,73,a1),out);
            		}
            		else {
HXLINE( 358)			return this->_vertexData->getPoint(vertexID,HX_("texCoords",65,5d,73,a1),out);
            		}
HXLINE( 357)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshStyle_obj,getTexCoords,return )

void MeshStyle_obj::setTexCoords(int vertexID,Float u,Float v){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_363_setTexCoords)
HXLINE( 364)		if (hx::IsNotNull( this->_texture )) {
HXLINE( 364)			this->_texture->setTexCoords(this->_vertexData,vertexID,HX_("texCoords",65,5d,73,a1),u,v);
            		}
            		else {
HXLINE( 365)			this->_vertexData->setPoint(vertexID,HX_("texCoords",65,5d,73,a1),u,v);
            		}
HXLINE( 367)		this->setVertexDataChanged();
            	}


HX_DEFINE_DYNAMIC_FUNC3(MeshStyle_obj,setTexCoords,(void))

 ::starling::rendering::VertexData MeshStyle_obj::get_vertexData(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_376_get_vertexData)
HXDLIN( 376)		return this->_vertexData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,get_vertexData,return )

 ::starling::rendering::IndexData MeshStyle_obj::get_indexData(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_382_get_indexData)
HXDLIN( 382)		return this->_indexData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,get_indexData,return )

hx::Class MeshStyle_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_386_get_type)
HXDLIN( 386)		return this->_type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,get_type,return )

int MeshStyle_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_393_get_color)
HXDLIN( 393)		if ((this->_vertexData->get_numVertices() > (int)0)) {
HXDLIN( 393)			return this->_vertexData->getColor((int)0,null());
            		}
            		else {
HXLINE( 394)			return (int)0;
            		}
HXLINE( 393)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,get_color,return )

int MeshStyle_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_398_set_color)
HXLINE( 399)		int i;
HXLINE( 400)		int numVertices = this->_vertexData->get_numVertices();
HXLINE( 402)		{
HXLINE( 402)			int _g1 = (int)0;
HXDLIN( 402)			int _g = numVertices;
HXDLIN( 402)			while((_g1 < _g)){
HXLINE( 402)				_g1 = (_g1 + (int)1);
HXDLIN( 402)				int i1 = (_g1 - (int)1);
HXLINE( 403)				this->_vertexData->setColor(i1,HX_("color",63,71,5c,4a),value);
            			}
            		}
HXLINE( 405)		bool _hx_tmp;
HXDLIN( 405)		if ((value == (int)16777215)) {
HXLINE( 405)			_hx_tmp = this->_vertexData->get_tinted();
            		}
            		else {
HXLINE( 405)			_hx_tmp = false;
            		}
HXDLIN( 405)		if (_hx_tmp) {
HXLINE( 406)			this->_vertexData->updateTinted(null());
            		}
HXLINE( 408)		this->setVertexDataChanged();
HXLINE( 409)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshStyle_obj,set_color,return )

 ::starling::rendering::VertexDataFormat MeshStyle_obj::get_vertexFormat(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_416_get_vertexFormat)
HXDLIN( 416)		return ::starling::styles::MeshStyle_obj::VERTEX_FORMAT;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,get_vertexFormat,return )

 ::starling::textures::Texture MeshStyle_obj::get_texture(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_421_get_texture)
HXDLIN( 421)		return this->_texture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,get_texture,return )

 ::starling::textures::Texture MeshStyle_obj::set_texture( ::starling::textures::Texture value){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_423_set_texture)
HXLINE( 424)		if (hx::IsNotEq( value,this->_texture )) {
HXLINE( 426)			if (hx::IsNotNull( value )) {
HXLINE( 428)				int i;
HXLINE( 429)				int numVertices;
HXDLIN( 429)				if (hx::IsNotNull( this->_vertexData )) {
HXLINE( 429)					numVertices = this->_vertexData->get_numVertices();
            				}
            				else {
HXLINE( 429)					numVertices = (int)0;
            				}
HXLINE( 431)				{
HXLINE( 431)					int _g1 = (int)0;
HXDLIN( 431)					int _g = numVertices;
HXDLIN( 431)					while((_g1 < _g)){
HXLINE( 431)						_g1 = (_g1 + (int)1);
HXDLIN( 431)						int i1 = (_g1 - (int)1);
HXLINE( 433)						this->getTexCoords(i1,::starling::styles::MeshStyle_obj::sPoint);
HXLINE( 434)						value->setTexCoords(this->_vertexData,i1,HX_("texCoords",65,5d,73,a1),::starling::styles::MeshStyle_obj::sPoint->x,::starling::styles::MeshStyle_obj::sPoint->y);
            					}
            				}
HXLINE( 437)				this->setVertexDataChanged();
            			}
            			else {
HXLINE( 439)				this->setRequiresRedraw();
            			}
HXLINE( 441)			this->_texture = value;
HXLINE( 442)			 ::starling::textures::ConcreteTexture _hx_tmp;
HXDLIN( 442)			if (hx::IsNotNull( value )) {
HXLINE( 442)				_hx_tmp = value->get_root();
            			}
            			else {
HXLINE( 442)				_hx_tmp = null();
            			}
HXDLIN( 442)			this->_textureRoot = _hx_tmp;
            		}
HXLINE( 444)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshStyle_obj,set_texture,return )

::String MeshStyle_obj::get_textureSmoothing(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_449_get_textureSmoothing)
HXDLIN( 449)		return this->_textureSmoothing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,get_textureSmoothing,return )

::String MeshStyle_obj::set_textureSmoothing(::String value){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_451_set_textureSmoothing)
HXLINE( 452)		if ((value != this->_textureSmoothing)) {
HXLINE( 454)			this->_textureSmoothing = value;
HXLINE( 455)			this->setRequiresRedraw();
            		}
HXLINE( 457)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshStyle_obj,set_textureSmoothing,return )

bool MeshStyle_obj::get_textureRepeat(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_463_get_textureRepeat)
HXDLIN( 463)		return this->_textureRepeat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,get_textureRepeat,return )

bool MeshStyle_obj::set_textureRepeat(bool value){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_464_set_textureRepeat)
HXDLIN( 464)		return (this->_textureRepeat = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshStyle_obj,set_textureRepeat,return )

 ::starling::display::Mesh MeshStyle_obj::get_target(){
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_468_get_target)
HXDLIN( 468)		return this->_target;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshStyle_obj,get_target,return )

 ::starling::rendering::VertexDataFormat MeshStyle_obj::VERTEX_FORMAT;

 ::openfl::geom::Point MeshStyle_obj::sPoint;


hx::ObjectPtr< MeshStyle_obj > MeshStyle_obj::__new() {
	hx::ObjectPtr< MeshStyle_obj > __this = new MeshStyle_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< MeshStyle_obj > MeshStyle_obj::__alloc(hx::Ctx *_hx_ctx) {
	MeshStyle_obj *__this = (MeshStyle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MeshStyle_obj), true, "starling.styles.MeshStyle"));
	*(void **)__this = MeshStyle_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MeshStyle_obj::MeshStyle_obj()
{
}

void MeshStyle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MeshStyle);
	HX_MARK_MEMBER_NAME(_type,"_type");
	HX_MARK_MEMBER_NAME(_target,"_target");
	HX_MARK_MEMBER_NAME(_texture,"_texture");
	HX_MARK_MEMBER_NAME(_textureSmoothing,"_textureSmoothing");
	HX_MARK_MEMBER_NAME(_textureRepeat,"_textureRepeat");
	HX_MARK_MEMBER_NAME(_textureRoot,"_textureRoot");
	HX_MARK_MEMBER_NAME(_vertexData,"_vertexData");
	HX_MARK_MEMBER_NAME(_indexData,"_indexData");
	 ::starling::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MeshStyle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_type,"_type");
	HX_VISIT_MEMBER_NAME(_target,"_target");
	HX_VISIT_MEMBER_NAME(_texture,"_texture");
	HX_VISIT_MEMBER_NAME(_textureSmoothing,"_textureSmoothing");
	HX_VISIT_MEMBER_NAME(_textureRepeat,"_textureRepeat");
	HX_VISIT_MEMBER_NAME(_textureRoot,"_textureRoot");
	HX_VISIT_MEMBER_NAME(_vertexData,"_vertexData");
	HX_VISIT_MEMBER_NAME(_indexData,"_indexData");
	 ::starling::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MeshStyle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_type") ) { return hx::Val( _type ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_color() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_target() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_target") ) { return hx::Val( _target ); }
		if (HX_FIELD_EQ(inName,"texture") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_texture() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_texture") ) { return hx::Val( _texture ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setTarget") ) { return hx::Val( setTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"indexData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_indexData() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_indexData") ) { return hx::Val( _indexData ); }
		if (HX_FIELD_EQ(inName,"vertexData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_vertexData() ); }
		if (HX_FIELD_EQ(inName,"get_target") ) { return hx::Val( get_target_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_vertexData") ) { return hx::Val( _vertexData ); }
		if (HX_FIELD_EQ(inName,"get_texture") ) { return hx::Val( get_texture_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_texture") ) { return hx::Val( set_texture_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_textureRoot") ) { return hx::Val( _textureRoot ); }
		if (HX_FIELD_EQ(inName,"createEffect") ) { return hx::Val( createEffect_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateEffect") ) { return hx::Val( updateEffect_dyn() ); }
		if (HX_FIELD_EQ(inName,"canBatchWith") ) { return hx::Val( canBatchWith_dyn() ); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return hx::Val( onEnterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTexCoords") ) { return hx::Val( getTexCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTexCoords") ) { return hx::Val( setTexCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"vertexFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_vertexFormat() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_indexData") ) { return hx::Val( get_indexData_dyn() ); }
		if (HX_FIELD_EQ(inName,"textureRepeat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textureRepeat() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_textureRepeat") ) { return hx::Val( _textureRepeat ); }
		if (HX_FIELD_EQ(inName,"batchIndexData") ) { return hx::Val( batchIndexData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVertexAlpha") ) { return hx::Val( getVertexAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVertexAlpha") ) { return hx::Val( setVertexAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVertexColor") ) { return hx::Val( getVertexColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVertexColor") ) { return hx::Val( setVertexColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexData") ) { return hx::Val( get_vertexData_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"batchVertexData") ) { return hx::Val( batchVertexData_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onTargetAssigned") ) { return hx::Val( onTargetAssigned_dyn() ); }
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return hx::Val( addEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexFormat") ) { return hx::Val( get_vertexFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"textureSmoothing") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textureSmoothing() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_textureSmoothing") ) { return hx::Val( _textureSmoothing ); }
		if (HX_FIELD_EQ(inName,"setRequiresRedraw") ) { return hx::Val( setRequiresRedraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVertexPosition") ) { return hx::Val( getVertexPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVertexPosition") ) { return hx::Val( setVertexPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textureRepeat") ) { return hx::Val( get_textureRepeat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textureRepeat") ) { return hx::Val( set_textureRepeat_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setIndexDataChanged") ) { return hx::Val( setIndexDataChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { return hx::Val( removeEventListener_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setVertexDataChanged") ) { return hx::Val( setVertexDataChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textureSmoothing") ) { return hx::Val( get_textureSmoothing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textureSmoothing") ) { return hx::Val( set_textureSmoothing_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MeshStyle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sPoint") ) { outValue = ( sPoint ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"VERTEX_FORMAT") ) { outValue = ( VERTEX_FORMAT ); return true; }
	}
	return false;
}

hx::Val MeshStyle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_type") ) { _type=inValue.Cast< hx::Class >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_target") ) { _target=inValue.Cast<  ::starling::display::Mesh >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texture") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_texture(inValue.Cast<  ::starling::textures::Texture >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_texture") ) { _texture=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_indexData") ) { _indexData=inValue.Cast<  ::starling::rendering::IndexData >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_vertexData") ) { _vertexData=inValue.Cast<  ::starling::rendering::VertexData >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_textureRoot") ) { _textureRoot=inValue.Cast<  ::starling::textures::ConcreteTexture >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textureRepeat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textureRepeat(inValue.Cast< bool >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_textureRepeat") ) { _textureRepeat=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textureSmoothing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textureSmoothing(inValue.Cast< ::String >()) ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_textureSmoothing") ) { _textureSmoothing=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MeshStyle_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sPoint") ) { sPoint=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"VERTEX_FORMAT") ) { VERTEX_FORMAT=ioValue.Cast<  ::starling::rendering::VertexDataFormat >(); return true; }
	}
	return false;
}

void MeshStyle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_type","\x99","\x0e","\x1a","\x00"));
	outFields->push(HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5"));
	outFields->push(HX_HCSTRING("_texture","\x5c","\x22","\x99","\xd8"));
	outFields->push(HX_HCSTRING("_textureSmoothing","\x78","\x67","\xaa","\x02"));
	outFields->push(HX_HCSTRING("_textureRepeat","\xd7","\x5a","\xe6","\xd7"));
	outFields->push(HX_HCSTRING("_textureRoot","\x9e","\x9a","\x37","\x68"));
	outFields->push(HX_HCSTRING("_vertexData","\xcd","\xac","\xa9","\xa5"));
	outFields->push(HX_HCSTRING("_indexData","\x1d","\x8a","\x13","\x5a"));
	outFields->push(HX_HCSTRING("vertexData","\xae","\xdf","\x1f","\xd3"));
	outFields->push(HX_HCSTRING("indexData","\x5c","\x0e","\x71","\xfe"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("vertexFormat","\xbb","\x81","\xa3","\x9d"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("textureSmoothing","\x19","\x79","\x2f","\x6a"));
	outFields->push(HX_HCSTRING("textureRepeat","\x96","\x6a","\x94","\x99"));
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MeshStyle_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(MeshStyle_obj,_type),HX_HCSTRING("_type","\x99","\x0e","\x1a","\x00")},
	{hx::fsObject /*::starling::display::Mesh*/ ,(int)offsetof(MeshStyle_obj,_target),HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5")},
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(MeshStyle_obj,_texture),HX_HCSTRING("_texture","\x5c","\x22","\x99","\xd8")},
	{hx::fsString,(int)offsetof(MeshStyle_obj,_textureSmoothing),HX_HCSTRING("_textureSmoothing","\x78","\x67","\xaa","\x02")},
	{hx::fsBool,(int)offsetof(MeshStyle_obj,_textureRepeat),HX_HCSTRING("_textureRepeat","\xd7","\x5a","\xe6","\xd7")},
	{hx::fsObject /*::starling::textures::ConcreteTexture*/ ,(int)offsetof(MeshStyle_obj,_textureRoot),HX_HCSTRING("_textureRoot","\x9e","\x9a","\x37","\x68")},
	{hx::fsObject /*::starling::rendering::VertexData*/ ,(int)offsetof(MeshStyle_obj,_vertexData),HX_HCSTRING("_vertexData","\xcd","\xac","\xa9","\xa5")},
	{hx::fsObject /*::starling::rendering::IndexData*/ ,(int)offsetof(MeshStyle_obj,_indexData),HX_HCSTRING("_indexData","\x1d","\x8a","\x13","\x5a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MeshStyle_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::starling::rendering::VertexDataFormat*/ ,(void *) &MeshStyle_obj::VERTEX_FORMAT,HX_HCSTRING("VERTEX_FORMAT","\xf2","\x39","\xe1","\x29")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &MeshStyle_obj::sPoint,HX_HCSTRING("sPoint","\xdd","\xa2","\xc7","\x54")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MeshStyle_obj_sMemberFields[] = {
	HX_HCSTRING("_type","\x99","\x0e","\x1a","\x00"),
	HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5"),
	HX_HCSTRING("_texture","\x5c","\x22","\x99","\xd8"),
	HX_HCSTRING("_textureSmoothing","\x78","\x67","\xaa","\x02"),
	HX_HCSTRING("_textureRepeat","\xd7","\x5a","\xe6","\xd7"),
	HX_HCSTRING("_textureRoot","\x9e","\x9a","\x37","\x68"),
	HX_HCSTRING("_vertexData","\xcd","\xac","\xa9","\xa5"),
	HX_HCSTRING("_indexData","\x1d","\x8a","\x13","\x5a"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("createEffect","\xad","\x9a","\xf8","\x82"),
	HX_HCSTRING("updateEffect","\x7a","\x01","\x67","\x60"),
	HX_HCSTRING("canBatchWith","\xb0","\x58","\x34","\x78"),
	HX_HCSTRING("batchVertexData","\x08","\x78","\x6c","\xf8"),
	HX_HCSTRING("batchIndexData","\x42","\x3f","\x8f","\x53"),
	HX_HCSTRING("setRequiresRedraw","\x87","\x38","\x6c","\xf7"),
	HX_HCSTRING("setVertexDataChanged","\xe4","\x58","\xbe","\xbe"),
	HX_HCSTRING("setIndexDataChanged","\xba","\xe9","\xee","\x02"),
	HX_HCSTRING("onTargetAssigned","\x3e","\xbe","\xc9","\x2c"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("onEnterFrame","\xf4","\xa5","\x93","\xda"),
	HX_HCSTRING("setTarget","\x93","\x68","\x94","\xe6"),
	HX_HCSTRING("getVertexPosition","\x63","\xeb","\x87","\xc2"),
	HX_HCSTRING("setVertexPosition","\x6f","\xc3","\xf5","\xe5"),
	HX_HCSTRING("getVertexAlpha","\x64","\xc4","\x70","\xbd"),
	HX_HCSTRING("setVertexAlpha","\xd8","\xac","\x90","\xdd"),
	HX_HCSTRING("getVertexColor","\x69","\x8e","\x36","\xe6"),
	HX_HCSTRING("setVertexColor","\xdd","\x76","\x56","\x06"),
	HX_HCSTRING("getTexCoords","\xef","\xf9","\xc9","\xb0"),
	HX_HCSTRING("setTexCoords","\x63","\x1d","\xc3","\xc5"),
	HX_HCSTRING("get_vertexData","\xf7","\x67","\x15","\x49"),
	HX_HCSTRING("get_indexData","\x33","\xe2","\xd4","\xbf"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_vertexFormat","\x44","\x6e","\x42","\xa2"),
	HX_HCSTRING("get_texture","\xf2","\x28","\xdb","\x24"),
	HX_HCSTRING("set_texture","\xfe","\x2f","\x48","\x2f"),
	HX_HCSTRING("get_textureSmoothing","\x22","\xde","\x99","\x88"),
	HX_HCSTRING("set_textureSmoothing","\x96","\x95","\x51","\x55"),
	HX_HCSTRING("get_textureRepeat","\xed","\x75","\x04","\xa0"),
	HX_HCSTRING("set_textureRepeat","\xf9","\x4d","\x72","\xc3"),
	HX_HCSTRING("get_target","\x1a","\x63","\x74","\x77"),
	::String(null()) };

static void MeshStyle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MeshStyle_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MeshStyle_obj::VERTEX_FORMAT,"VERTEX_FORMAT");
	HX_MARK_MEMBER_NAME(MeshStyle_obj::sPoint,"sPoint");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MeshStyle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MeshStyle_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MeshStyle_obj::VERTEX_FORMAT,"VERTEX_FORMAT");
	HX_VISIT_MEMBER_NAME(MeshStyle_obj::sPoint,"sPoint");
};

#endif

hx::Class MeshStyle_obj::__mClass;

static ::String MeshStyle_obj_sStaticFields[] = {
	HX_HCSTRING("VERTEX_FORMAT","\xf2","\x39","\xe1","\x29"),
	HX_HCSTRING("sPoint","\xdd","\xa2","\xc7","\x54"),
	::String(null())
};

void MeshStyle_obj::__register()
{
	hx::Object *dummy = new MeshStyle_obj;
	MeshStyle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.styles.MeshStyle","\xfe","\x4c","\xd5","\x52");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MeshStyle_obj::__GetStatic;
	__mClass->mSetStaticField = &MeshStyle_obj::__SetStatic;
	__mClass->mMarkFunc = MeshStyle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MeshStyle_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MeshStyle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MeshStyle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MeshStyle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MeshStyle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MeshStyle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MeshStyle_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_96_boot)
HXDLIN(  96)		VERTEX_FORMAT = ::starling::rendering::MeshEffect_obj::VERTEX_FORMAT;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_4b73943b20d9c3fa_108_boot)
HXDLIN( 108)		sPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace starling
} // end namespace styles
