// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_filters_FragmentFilter
#include <starling/filters/FragmentFilter.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchToken
#include <starling/rendering/BatchToken.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_RenderTexture
#include <starling/textures/RenderTexture.h>
#endif
#ifndef INCLUDED_starling_textures_SubTexture
#include <starling/textures/SubTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_621ee6af00e2eba1_141_new,"starling.textures.RenderTexture","new",0xe121eea7,"starling.textures.RenderTexture.new","starling/textures/RenderTexture.hx",141,0xd2e91a89)
HX_DEFINE_STACK_FRAME(_hx_pos_621ee6af00e2eba1_138_new,"starling.textures.RenderTexture","new",0xe121eea7,"starling.textures.RenderTexture.new","starling/textures/RenderTexture.hx",138,0xd2e91a89)
HX_DEFINE_STACK_FRAME(_hx_pos_621ee6af00e2eba1_148_new,"starling.textures.RenderTexture","new",0xe121eea7,"starling.textures.RenderTexture.new","starling/textures/RenderTexture.hx",148,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_156_dispose,"starling.textures.RenderTexture","dispose",0x01f4ce66,"starling.textures.RenderTexture.dispose","starling/textures/RenderTexture.hx",156,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_182_draw,"starling.textures.RenderTexture","draw",0x15fc8bdd,"starling.textures.RenderTexture.draw","starling/textures/RenderTexture.hx",182,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_203_drawBundled,"starling.textures.RenderTexture","drawBundled",0xbed0a045,"starling.textures.RenderTexture.drawBundled","starling/textures/RenderTexture.hx",203,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_202_drawBundled,"starling.textures.RenderTexture","drawBundled",0xbed0a045,"starling.textures.RenderTexture.drawBundled","starling/textures/RenderTexture.hx",202,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_209_bundlelock,"starling.textures.RenderTexture","bundlelock",0x2ff0c106,"starling.textures.RenderTexture.bundlelock","starling/textures/RenderTexture.hx",209,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_253_bundleunlock,"starling.textures.RenderTexture","bundleunlock",0xaa2d849f,"starling.textures.RenderTexture.bundleunlock","starling/textures/RenderTexture.hx",253,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_260___render,"starling.textures.RenderTexture","__render",0x39f496cf,"starling.textures.RenderTexture.__render","starling/textures/RenderTexture.hx",260,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_292___renderBundled,"starling.textures.RenderTexture","__renderBundled",0x93fdb793,"starling.textures.RenderTexture.__renderBundled","starling/textures/RenderTexture.hx",292,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_345_clear,"starling.textures.RenderTexture","clear",0x8fa2ef94,"starling.textures.RenderTexture.clear","starling/textures/RenderTexture.hx",345,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_356_get_isDoubleBuffered,"starling.textures.RenderTexture","get_isDoubleBuffered",0x1ad731fc,"starling.textures.RenderTexture.get_isDoubleBuffered","starling/textures/RenderTexture.hx",356,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_360_get_isPersistent,"starling.textures.RenderTexture","get_isPersistent",0x5afcbcc3,"starling.textures.RenderTexture.get_isPersistent","starling/textures/RenderTexture.hx",360,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_363_get_base,"starling.textures.RenderTexture","get_base",0x4d6763f3,"starling.textures.RenderTexture.get_base","starling/textures/RenderTexture.hx",363,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_366_get_root,"starling.textures.RenderTexture","get_root",0x58056a04,"starling.textures.RenderTexture.get_root","starling/textures/RenderTexture.hx",366,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_380_get_useDoubleBuffering,"starling.textures.RenderTexture","get_useDoubleBuffering",0x8ac6416c,"starling.textures.RenderTexture.get_useDoubleBuffering","starling/textures/RenderTexture.hx",380,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_401_set_useDoubleBuffering,"starling.textures.RenderTexture","set_useDoubleBuffering",0xbe71bde0,"starling.textures.RenderTexture.set_useDoubleBuffering","starling/textures/RenderTexture.hx",401,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_102_boot,"starling.textures.RenderTexture","boot",0x14a7e40b,"starling.textures.RenderTexture.boot","starling/textures/RenderTexture.hx",102,0xd2e91a89)
HX_LOCAL_STACK_FRAME(_hx_pos_621ee6af00e2eba1_112_boot,"starling.textures.RenderTexture","boot",0x14a7e40b,"starling.textures.RenderTexture.boot","starling/textures/RenderTexture.hx",112,0xd2e91a89)
namespace starling{
namespace textures{

void RenderTexture_obj::__construct(int width,int height,hx::Null< bool >  __o_persistent,hx::Null< Float >  __o_scale,::String __o_format){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::starling::textures::ConcreteTexture textureRoot){
            			HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_141_new)
HXLINE( 141)			textureRoot->clear(null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

bool persistent = __o_persistent.Default(true);
Float scale = __o_scale.Default(-1);
::String format = __o_format.Default(HX_HCSTRING("bgra","\xb4","\x74","\x15","\x41"));
            	HX_GC_STACKFRAME(&_hx_pos_621ee6af00e2eba1_138_new)
HXLINE( 139)		this->_isPersistent = persistent;
HXLINE( 140)		this->_activeTexture = ::starling::textures::Texture_obj::empty(width,height,true,false,true,scale,format,null());
HXLINE( 141)		this->_activeTexture->get_root()->set_onRestore( ::Dynamic(new _hx_Closure_0()));
HXLINE( 143)		 ::starling::textures::Texture _hx_tmp = this->_activeTexture;
HXDLIN( 143)		super::__construct(_hx_tmp, ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height),true,null(),false,null());
HXLINE( 145)		bool _hx_tmp1;
HXDLIN( 145)		if (persistent) {
HXLINE( 145)			_hx_tmp1 = ::starling::textures::RenderTexture_obj::get_useDoubleBuffering();
            		}
            		else {
HXLINE( 145)			_hx_tmp1 = false;
            		}
HXDLIN( 145)		if (_hx_tmp1) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::starling::textures::ConcreteTexture textureRoot1){
            				HX_GC_STACKFRAME(&_hx_pos_621ee6af00e2eba1_148_new)
HXLINE( 148)				textureRoot1->clear(null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 147)			this->_bufferTexture = ::starling::textures::Texture_obj::empty(width,height,true,false,true,scale,format,null());
HXLINE( 148)			this->_bufferTexture->get_root()->set_onRestore( ::Dynamic(new _hx_Closure_1()));
HXLINE( 149)			this->_helperImage =  ::starling::display::Image_obj::__alloc( HX_CTX ,this->_bufferTexture);
HXLINE( 150)			this->_helperImage->set_textureSmoothing(HX_("none",b8,12,0a,49));
            		}
            	}

Dynamic RenderTexture_obj::__CreateEmpty() { return new RenderTexture_obj; }

void *RenderTexture_obj::_hx_vtable = 0;

Dynamic RenderTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderTexture_obj > _hx_result = new RenderTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool RenderTexture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0d644757) {
		if (inClassId<=(int)0x0269bfa1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0269bfa1;
		} else {
			return inClassId==(int)0x0d644757;
		}
	} else {
		return inClassId==(int)0x22869da3;
	}
}

void RenderTexture_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_156_dispose)
HXLINE( 157)		this->_activeTexture->dispose();
HXLINE( 159)		if (this->get_isDoubleBuffered()) {
HXLINE( 161)			this->_bufferTexture->dispose();
HXLINE( 162)			this->_helperImage->dispose();
            		}
HXLINE( 165)		this->super::dispose();
            	}


void RenderTexture_obj::draw( ::starling::display::DisplayObject object, ::openfl::geom::Matrix matrix,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_antiAliasing){
Float alpha = __o_alpha.Default(((Float)1.0));
int antiAliasing = __o_antiAliasing.Default(0);
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_182_draw)
HXLINE( 183)		if (hx::IsNull( object )) {
HXLINE( 183)			return;
            		}
HXLINE( 185)		if (this->_drawing) {
HXLINE( 186)			this->_hx___render(object,matrix,alpha);
            		}
            		else {
HXLINE( 188)			this->_hx___renderBundled(this->_hx___render_dyn(),object,matrix,alpha,antiAliasing);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(RenderTexture_obj,draw,(void))

void RenderTexture_obj::drawBundled( ::Dynamic drawingBlock,hx::Null< int >  __o_antiAliasing){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,drawingBlock) HXARGC(3)
            		void _hx_run( ::starling::display::DisplayObject object, ::openfl::geom::Matrix matrix,Float alpha){
            			HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_203_drawBundled)
HXLINE( 203)			drawingBlock();
            		}
            		HX_END_LOCAL_FUNC3((void))

int antiAliasing = __o_antiAliasing.Default(0);
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_202_drawBundled)
HXLINE( 203)		 ::Dynamic renderBlockFunc =  ::Dynamic(new _hx_Closure_0(drawingBlock));
HXLINE( 204)		this->_hx___renderBundled(renderBlockFunc,null(),null(),((Float)1.0),antiAliasing);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderTexture_obj,drawBundled,(void))

void RenderTexture_obj::bundlelock(hx::Null< int >  __o_antiAliasing){
int antiAliasing = __o_antiAliasing.Default(0);
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_209_bundlelock)
HXLINE( 210)		 ::starling::rendering::Painter painter = ::starling::core::Starling_obj::get_current()->get_painter();
HXLINE( 211)		 ::starling::rendering::RenderState state = painter->get_state();
HXLINE( 213)		if (!(::starling::core::Starling_obj::get_current()->get_contextValid())) {
HXLINE( 213)			return;
            		}
HXLINE( 216)		if (this->get_isDoubleBuffered()) {
HXLINE( 218)			 ::starling::textures::Texture tmpTexture = this->_activeTexture;
HXLINE( 219)			this->_activeTexture = this->_bufferTexture;
HXLINE( 220)			this->_bufferTexture = tmpTexture;
HXLINE( 221)			this->_helperImage->set_texture(this->_bufferTexture);
            		}
HXLINE( 224)		painter->pushState(null());
HXLINE( 226)		 ::starling::textures::Texture rootTexture = this->_activeTexture->get_root();
HXLINE( 227)		Float _hx_tmp = rootTexture->get_width();
HXDLIN( 227)		Float _hx_tmp1 = rootTexture->get_height();
HXDLIN( 227)		Float _hx_tmp2 = this->get_width();
HXDLIN( 227)		state->setProjectionMatrix((int)0,(int)0,_hx_tmp,_hx_tmp1,_hx_tmp2,this->get_height(),null());
HXLINE( 230)		 ::openfl::geom::Rectangle _hx_tmp3 = ::starling::textures::RenderTexture_obj::sClipRect;
HXDLIN( 230)		Float _hx_tmp4 = this->_activeTexture->get_width();
HXDLIN( 230)		_hx_tmp3->setTo((int)0,(int)0,_hx_tmp4,this->_activeTexture->get_height());
HXLINE( 232)		state->set_clipRect(::starling::textures::RenderTexture_obj::sClipRect);
HXLINE( 233)		state->setRenderTarget(this->_activeTexture,true,antiAliasing);
HXLINE( 235)		painter->prepareToDraw();
HXLINE( 236)		painter->get_context()->setStencilActions((int)2,(int)0,null(),null(),null());
HXLINE( 239)		bool _hx_tmp5;
HXDLIN( 239)		bool _hx_tmp6;
HXDLIN( 239)		if (!(this->get_isDoubleBuffered())) {
HXLINE( 239)			_hx_tmp6 = !(this->get_isPersistent());
            		}
            		else {
HXLINE( 239)			_hx_tmp6 = true;
            		}
HXDLIN( 239)		if (!(_hx_tmp6)) {
HXLINE( 239)			_hx_tmp5 = !(this->_bufferReady);
            		}
            		else {
HXLINE( 239)			_hx_tmp5 = true;
            		}
HXDLIN( 239)		if (_hx_tmp5) {
HXLINE( 240)			painter->clear(null(),null());
            		}
HXLINE( 243)		bool _hx_tmp7;
HXDLIN( 243)		if (this->get_isDoubleBuffered()) {
HXLINE( 243)			_hx_tmp7 = this->_bufferReady;
            		}
            		else {
HXLINE( 243)			_hx_tmp7 = false;
            		}
HXDLIN( 243)		if (_hx_tmp7) {
HXLINE( 244)			this->_helperImage->render(painter);
            		}
            		else {
HXLINE( 246)			this->_bufferReady = true;
            		}
HXLINE( 248)		this->_drawing = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderTexture_obj,bundlelock,(void))

void RenderTexture_obj::bundleunlock(){
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_253_bundleunlock)
HXLINE( 254)		this->_drawing = false;
HXLINE( 255)		 ::starling::rendering::Painter painter = ::starling::core::Starling_obj::get_current()->get_painter();
HXLINE( 256)		painter->popState(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderTexture_obj,bundleunlock,(void))

void RenderTexture_obj::_hx___render( ::starling::display::DisplayObject object, ::openfl::geom::Matrix matrix,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_260___render)
HXLINE( 261)		 ::starling::rendering::Painter painter = ::starling::core::Starling_obj::get_current()->get_painter();
HXLINE( 262)		 ::starling::rendering::RenderState state = painter->get_state();
HXLINE( 263)		bool wasCacheEnabled = painter->get_cacheEnabled();
HXLINE( 264)		 ::starling::filters::FragmentFilter filter = object->get_filter();
HXLINE( 265)		 ::starling::display::DisplayObject mask = object->get_mask();
HXLINE( 267)		painter->set_cacheEnabled(false);
HXLINE( 268)		painter->pushState(null());
HXLINE( 270)		state->set_alpha((object->get_alpha() * alpha));
HXLINE( 271)		state->setModelviewMatricesToIdentity();
HXLINE( 272)		::String _hx_tmp;
HXDLIN( 272)		if ((object->get_blendMode() == HX_("auto",6f,df,76,40))) {
HXLINE( 272)			_hx_tmp = HX_("normal",27,72,69,30);
            		}
            		else {
HXLINE( 272)			_hx_tmp = object->get_blendMode();
            		}
HXDLIN( 272)		state->set_blendMode(_hx_tmp);
HXLINE( 275)		if (hx::IsNotNull( matrix )) {
HXLINE( 275)			state->transformModelviewMatrix(matrix);
            		}
            		else {
HXLINE( 276)			state->transformModelviewMatrix(object->get_transformationMatrix());
            		}
HXLINE( 278)		if (hx::IsNotNull( mask )) {
HXLINE( 278)			painter->drawMask(mask,object);
            		}
HXLINE( 280)		if (hx::IsNotNull( filter )) {
HXLINE( 280)			filter->render(painter);
            		}
            		else {
HXLINE( 281)			object->render(painter);
            		}
HXLINE( 283)		if (hx::IsNotNull( mask )) {
HXLINE( 283)			painter->eraseMask(mask,object);
            		}
HXLINE( 285)		painter->popState(null());
HXLINE( 286)		painter->set_cacheEnabled(wasCacheEnabled);
            	}


HX_DEFINE_DYNAMIC_FUNC3(RenderTexture_obj,_hx___render,(void))

void RenderTexture_obj::_hx___renderBundled( ::Dynamic renderBlock, ::starling::display::DisplayObject object, ::openfl::geom::Matrix matrix,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_antiAliasing){
Float alpha = __o_alpha.Default(((Float)1.0));
int antiAliasing = __o_antiAliasing.Default(0);
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_292___renderBundled)
HXLINE( 293)		 ::starling::rendering::Painter painter = ::starling::core::Starling_obj::get_current()->get_painter();
HXLINE( 294)		 ::starling::rendering::RenderState state = painter->get_state();
HXLINE( 296)		if (!(::starling::core::Starling_obj::get_current()->get_contextValid())) {
HXLINE( 296)			return;
            		}
HXLINE( 299)		if (this->get_isDoubleBuffered()) {
HXLINE( 301)			 ::starling::textures::Texture tmpTexture = this->_activeTexture;
HXLINE( 302)			this->_activeTexture = this->_bufferTexture;
HXLINE( 303)			this->_bufferTexture = tmpTexture;
HXLINE( 304)			this->_helperImage->set_texture(this->_bufferTexture);
            		}
HXLINE( 307)		painter->pushState(null());
HXLINE( 309)		 ::starling::textures::Texture rootTexture = this->_activeTexture->get_root();
HXLINE( 310)		Float _hx_tmp = rootTexture->get_width();
HXDLIN( 310)		Float _hx_tmp1 = rootTexture->get_height();
HXDLIN( 310)		Float _hx_tmp2 = this->get_width();
HXDLIN( 310)		state->setProjectionMatrix((int)0,(int)0,_hx_tmp,_hx_tmp1,_hx_tmp2,this->get_height(),null());
HXLINE( 313)		 ::openfl::geom::Rectangle _hx_tmp3 = ::starling::textures::RenderTexture_obj::sClipRect;
HXDLIN( 313)		Float _hx_tmp4 = this->_activeTexture->get_width();
HXDLIN( 313)		_hx_tmp3->setTo((int)0,(int)0,_hx_tmp4,this->_activeTexture->get_height());
HXLINE( 315)		state->set_clipRect(::starling::textures::RenderTexture_obj::sClipRect);
HXLINE( 316)		state->setRenderTarget(this->_activeTexture,true,antiAliasing);
HXLINE( 318)		painter->prepareToDraw();
HXLINE( 319)		painter->get_context()->setStencilActions((int)2,(int)0,null(),null(),null());
HXLINE( 322)		bool _hx_tmp5;
HXDLIN( 322)		bool _hx_tmp6;
HXDLIN( 322)		if (!(this->get_isDoubleBuffered())) {
HXLINE( 322)			_hx_tmp6 = !(this->get_isPersistent());
            		}
            		else {
HXLINE( 322)			_hx_tmp6 = true;
            		}
HXDLIN( 322)		if (!(_hx_tmp6)) {
HXLINE( 322)			_hx_tmp5 = !(this->_bufferReady);
            		}
            		else {
HXLINE( 322)			_hx_tmp5 = true;
            		}
HXDLIN( 322)		if (_hx_tmp5) {
HXLINE( 323)			painter->clear(null(),null());
            		}
HXLINE( 326)		bool _hx_tmp7;
HXDLIN( 326)		if (this->get_isDoubleBuffered()) {
HXLINE( 326)			_hx_tmp7 = this->_bufferReady;
            		}
            		else {
HXLINE( 326)			_hx_tmp7 = false;
            		}
HXDLIN( 326)		if (_hx_tmp7) {
HXLINE( 327)			this->_helperImage->render(painter);
            		}
            		else {
HXLINE( 329)			this->_bufferReady = true;
            		}
HXLINE( 331)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 333)			this->_drawing = true;
HXLINE( 334)			renderBlock(object,matrix,alpha);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 338)		this->_drawing = false;
HXLINE( 339)		painter->popState(null());
            	}


HX_DEFINE_DYNAMIC_FUNC5(RenderTexture_obj,_hx___renderBundled,(void))

void RenderTexture_obj::clear(hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha){
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_345_clear)
HXLINE( 346)		this->_activeTexture->get_root()->clear(color,alpha);
HXLINE( 347)		this->_bufferReady = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderTexture_obj,clear,(void))

bool RenderTexture_obj::get_isDoubleBuffered(){
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_356_get_isDoubleBuffered)
HXDLIN( 356)		return hx::IsNotNull( this->_bufferTexture );
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderTexture_obj,get_isDoubleBuffered,return )

bool RenderTexture_obj::get_isPersistent(){
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_360_get_isPersistent)
HXDLIN( 360)		return this->_isPersistent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderTexture_obj,get_isPersistent,return )

 ::openfl::display3D::textures::TextureBase RenderTexture_obj::get_base(){
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_363_get_base)
HXDLIN( 363)		return this->_activeTexture->get_base();
            	}


 ::starling::textures::ConcreteTexture RenderTexture_obj::get_root(){
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_366_get_root)
HXDLIN( 366)		return this->_activeTexture->get_root();
            	}


::String RenderTexture_obj::USE_DOUBLE_BUFFERING_DATA_NAME;

 ::openfl::geom::Rectangle RenderTexture_obj::sClipRect;

bool RenderTexture_obj::get_useDoubleBuffering(){
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_380_get_useDoubleBuffering)
HXDLIN( 380)		if (hx::IsNotNull( ::starling::core::Starling_obj::get_current() )) {
HXLINE( 382)			 ::starling::rendering::Painter painter = ::starling::core::Starling_obj::get_current()->get_painter();
HXLINE( 383)			 ::haxe::ds::StringMap sharedData = painter->get_sharedData();
HXLINE( 385)			if (sharedData->exists(HX_("starling.textures.RenderTexture.useDoubleBuffering",a3,87,2a,82))) {
HXLINE( 387)				return ( (bool)(sharedData->get(HX_("starling.textures.RenderTexture.useDoubleBuffering",a3,87,2a,82))) );
            			}
            			else {
HXLINE( 391)				::String profile;
HXDLIN( 391)				if (hx::IsNotNull( painter->get_profile() )) {
HXLINE( 391)					profile = painter->get_profile();
            				}
            				else {
HXLINE( 391)					profile = HX_("baseline",85,dc,27,11);
            				}
HXLINE( 392)				bool value;
HXDLIN( 392)				if ((profile != HX_("baseline",85,dc,27,11))) {
HXLINE( 392)					value = (profile == HX_("baselineConstrained",d1,73,c8,e8));
            				}
            				else {
HXLINE( 392)					value = true;
            				}
HXLINE( 393)				sharedData->set(HX_("starling.textures.RenderTexture.useDoubleBuffering",a3,87,2a,82),value);
HXLINE( 394)				return value;
            			}
            		}
            		else {
HXLINE( 397)			return false;
            		}
HXLINE( 380)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(RenderTexture_obj,get_useDoubleBuffering,return )

bool RenderTexture_obj::set_useDoubleBuffering(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_621ee6af00e2eba1_401_set_useDoubleBuffering)
HXLINE( 402)		if (hx::IsNull( ::starling::core::Starling_obj::get_current() )) {
HXLINE( 403)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Starling not yet initialized",d7,01,2c,69)));
            		}
            		else {
HXLINE( 405)			::starling::core::Starling_obj::get_current()->get_painter()->get_sharedData()->set(HX_("starling.textures.RenderTexture.useDoubleBuffering",a3,87,2a,82),value);
            		}
HXLINE( 406)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RenderTexture_obj,set_useDoubleBuffering,return )


hx::ObjectPtr< RenderTexture_obj > RenderTexture_obj::__new(int width,int height,hx::Null< bool >  __o_persistent,hx::Null< Float >  __o_scale,::String __o_format) {
	hx::ObjectPtr< RenderTexture_obj > __this = new RenderTexture_obj();
	__this->__construct(width,height,__o_persistent,__o_scale,__o_format);
	return __this;
}

hx::ObjectPtr< RenderTexture_obj > RenderTexture_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< bool >  __o_persistent,hx::Null< Float >  __o_scale,::String __o_format) {
	RenderTexture_obj *__this = (RenderTexture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RenderTexture_obj), true, "starling.textures.RenderTexture"));
	*(void **)__this = RenderTexture_obj::_hx_vtable;
	__this->__construct(width,height,__o_persistent,__o_scale,__o_format);
	return __this;
}

RenderTexture_obj::RenderTexture_obj()
{
}

void RenderTexture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderTexture);
	HX_MARK_MEMBER_NAME(_activeTexture,"_activeTexture");
	HX_MARK_MEMBER_NAME(_bufferTexture,"_bufferTexture");
	HX_MARK_MEMBER_NAME(_helperImage,"_helperImage");
	HX_MARK_MEMBER_NAME(_drawing,"_drawing");
	HX_MARK_MEMBER_NAME(_bufferReady,"_bufferReady");
	HX_MARK_MEMBER_NAME(_isPersistent,"_isPersistent");
	HX_MARK_MEMBER_NAME(haxegonpreviousRenderTarget,"haxegonpreviousRenderTarget");
	 ::starling::textures::SubTexture_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RenderTexture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_activeTexture,"_activeTexture");
	HX_VISIT_MEMBER_NAME(_bufferTexture,"_bufferTexture");
	HX_VISIT_MEMBER_NAME(_helperImage,"_helperImage");
	HX_VISIT_MEMBER_NAME(_drawing,"_drawing");
	HX_VISIT_MEMBER_NAME(_bufferReady,"_bufferReady");
	HX_VISIT_MEMBER_NAME(_isPersistent,"_isPersistent");
	HX_VISIT_MEMBER_NAME(haxegonpreviousRenderTarget,"haxegonpreviousRenderTarget");
	 ::starling::textures::SubTexture_obj::__Visit(HX_VISIT_ARG);
}

hx::Val RenderTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_drawing") ) { return hx::Val( _drawing ); }
		if (HX_FIELD_EQ(inName,"__render") ) { return hx::Val( _hx___render_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_base") ) { return hx::Val( get_base_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bundlelock") ) { return hx::Val( bundlelock_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"drawBundled") ) { return hx::Val( drawBundled_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_helperImage") ) { return hx::Val( _helperImage ); }
		if (HX_FIELD_EQ(inName,"_bufferReady") ) { return hx::Val( _bufferReady ); }
		if (HX_FIELD_EQ(inName,"bundleunlock") ) { return hx::Val( bundleunlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"isPersistent") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isPersistent() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_isPersistent") ) { return hx::Val( _isPersistent ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_activeTexture") ) { return hx::Val( _activeTexture ); }
		if (HX_FIELD_EQ(inName,"_bufferTexture") ) { return hx::Val( _bufferTexture ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__renderBundled") ) { return hx::Val( _hx___renderBundled_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"isDoubleBuffered") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isDoubleBuffered() ); }
		if (HX_FIELD_EQ(inName,"get_isPersistent") ) { return hx::Val( get_isPersistent_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_isDoubleBuffered") ) { return hx::Val( get_isDoubleBuffered_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"haxegonpreviousRenderTarget") ) { return hx::Val( haxegonpreviousRenderTarget ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RenderTexture_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"sClipRect") ) { outValue = ( sClipRect ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useDoubleBuffering") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_useDoubleBuffering() ); return true; } }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_useDoubleBuffering") ) { outValue = get_useDoubleBuffering_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_useDoubleBuffering") ) { outValue = set_useDoubleBuffering_dyn(); return true; }
	}
	return false;
}

hx::Val RenderTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_drawing") ) { _drawing=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_helperImage") ) { _helperImage=inValue.Cast<  ::starling::display::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bufferReady") ) { _bufferReady=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_isPersistent") ) { _isPersistent=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_activeTexture") ) { _activeTexture=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bufferTexture") ) { _bufferTexture=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"haxegonpreviousRenderTarget") ) { haxegonpreviousRenderTarget=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool RenderTexture_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"sClipRect") ) { sClipRect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useDoubleBuffering") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_useDoubleBuffering(ioValue.Cast< bool >()) ); }
	}
	return false;
}

void RenderTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_activeTexture","\xf6","\x03","\xfc","\x94"));
	outFields->push(HX_HCSTRING("_bufferTexture","\xfc","\xc3","\xb0","\x12"));
	outFields->push(HX_HCSTRING("_helperImage","\x0e","\x51","\xee","\xee"));
	outFields->push(HX_HCSTRING("_drawing","\xdf","\x94","\xa0","\x35"));
	outFields->push(HX_HCSTRING("_bufferReady","\x44","\xe1","\x0f","\xea"));
	outFields->push(HX_HCSTRING("_isPersistent","\xc0","\x21","\x83","\xb4"));
	outFields->push(HX_HCSTRING("haxegonpreviousRenderTarget","\xfe","\x96","\x19","\xd7"));
	outFields->push(HX_HCSTRING("isDoubleBuffered","\x1a","\x6b","\x45","\xd5"));
	outFields->push(HX_HCSTRING("isPersistent","\xe1","\x8e","\x14","\xd2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RenderTexture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(RenderTexture_obj,_activeTexture),HX_HCSTRING("_activeTexture","\xf6","\x03","\xfc","\x94")},
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(RenderTexture_obj,_bufferTexture),HX_HCSTRING("_bufferTexture","\xfc","\xc3","\xb0","\x12")},
	{hx::fsObject /*::starling::display::Image*/ ,(int)offsetof(RenderTexture_obj,_helperImage),HX_HCSTRING("_helperImage","\x0e","\x51","\xee","\xee")},
	{hx::fsBool,(int)offsetof(RenderTexture_obj,_drawing),HX_HCSTRING("_drawing","\xdf","\x94","\xa0","\x35")},
	{hx::fsBool,(int)offsetof(RenderTexture_obj,_bufferReady),HX_HCSTRING("_bufferReady","\x44","\xe1","\x0f","\xea")},
	{hx::fsBool,(int)offsetof(RenderTexture_obj,_isPersistent),HX_HCSTRING("_isPersistent","\xc0","\x21","\x83","\xb4")},
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(RenderTexture_obj,haxegonpreviousRenderTarget),HX_HCSTRING("haxegonpreviousRenderTarget","\xfe","\x96","\x19","\xd7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo RenderTexture_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &RenderTexture_obj::USE_DOUBLE_BUFFERING_DATA_NAME,HX_HCSTRING("USE_DOUBLE_BUFFERING_DATA_NAME","\xad","\x26","\xb8","\xb3")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &RenderTexture_obj::sClipRect,HX_HCSTRING("sClipRect","\xa7","\x77","\x8e","\xf4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String RenderTexture_obj_sMemberFields[] = {
	HX_HCSTRING("_activeTexture","\xf6","\x03","\xfc","\x94"),
	HX_HCSTRING("_bufferTexture","\xfc","\xc3","\xb0","\x12"),
	HX_HCSTRING("_helperImage","\x0e","\x51","\xee","\xee"),
	HX_HCSTRING("_drawing","\xdf","\x94","\xa0","\x35"),
	HX_HCSTRING("_bufferReady","\x44","\xe1","\x0f","\xea"),
	HX_HCSTRING("_isPersistent","\xc0","\x21","\x83","\xb4"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawBundled","\xfe","\x62","\xc0","\x94"),
	HX_HCSTRING("haxegonpreviousRenderTarget","\xfe","\x96","\x19","\xd7"),
	HX_HCSTRING("bundlelock","\x6d","\x78","\xa1","\x74"),
	HX_HCSTRING("bundleunlock","\xc6","\x23","\x08","\x06"),
	HX_HCSTRING("__render","\x76","\xd6","\x58","\xad"),
	HX_HCSTRING("__renderBundled","\xcc","\xca","\x17","\xcf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("get_isDoubleBuffered","\x23","\xd0","\xaf","\xf3"),
	HX_HCSTRING("get_isPersistent","\x6a","\x7b","\xb3","\xd6"),
	HX_HCSTRING("get_base","\x9a","\xa3","\xcb","\xc0"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	::String(null()) };

static void RenderTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RenderTexture_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(RenderTexture_obj::USE_DOUBLE_BUFFERING_DATA_NAME,"USE_DOUBLE_BUFFERING_DATA_NAME");
	HX_MARK_MEMBER_NAME(RenderTexture_obj::sClipRect,"sClipRect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RenderTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RenderTexture_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(RenderTexture_obj::USE_DOUBLE_BUFFERING_DATA_NAME,"USE_DOUBLE_BUFFERING_DATA_NAME");
	HX_VISIT_MEMBER_NAME(RenderTexture_obj::sClipRect,"sClipRect");
};

#endif

hx::Class RenderTexture_obj::__mClass;

static ::String RenderTexture_obj_sStaticFields[] = {
	HX_HCSTRING("USE_DOUBLE_BUFFERING_DATA_NAME","\xad","\x26","\xb8","\xb3"),
	HX_HCSTRING("sClipRect","\xa7","\x77","\x8e","\xf4"),
	HX_HCSTRING("get_useDoubleBuffering","\x53","\xf7","\x9f","\xc1"),
	HX_HCSTRING("set_useDoubleBuffering","\xc7","\x73","\x4b","\xf5"),
	::String(null())
};

void RenderTexture_obj::__register()
{
	hx::Object *dummy = new RenderTexture_obj;
	RenderTexture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.textures.RenderTexture","\x35","\x0f","\x76","\xc8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RenderTexture_obj::__GetStatic;
	__mClass->mSetStaticField = &RenderTexture_obj::__SetStatic;
	__mClass->mMarkFunc = RenderTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(RenderTexture_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RenderTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RenderTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RenderTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RenderTexture_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_621ee6af00e2eba1_102_boot)
HXDLIN( 102)		USE_DOUBLE_BUFFERING_DATA_NAME = HX_("starling.textures.RenderTexture.useDoubleBuffering",a3,87,2a,82);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_621ee6af00e2eba1_112_boot)
HXDLIN( 112)		sClipRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace starling
} // end namespace textures
