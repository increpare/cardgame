// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_events_Touch
#include <starling/events/Touch.h>
#endif
#ifndef INCLUDED_starling_events_TouchEvent
#include <starling/events/TouchEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_509988a874b6269d_84_new,"starling.events.TouchEvent","new",0x438433fc,"starling.events.TouchEvent.new","starling/events/TouchEvent.hx",84,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_97_resetTo,"starling.events.TouchEvent","resetTo",0x79ea46c6,"starling.events.TouchEvent.resetTo","starling/events/TouchEvent.hx",97,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_109_updateTimestamp,"starling.events.TouchEvent","updateTimestamp",0x325f0329,"starling.events.TouchEvent.updateTimestamp","starling/events/TouchEvent.hx",109,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_125_getTouches,"starling.events.TouchEvent","getTouches",0x08092bdb,"starling.events.TouchEvent.getTouches","starling/events/TouchEvent.hx",125,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_150_getTouch,"starling.events.TouchEvent","getTouch",0x573f2e2d,"starling.events.TouchEvent.getTouch","starling/events/TouchEvent.hx",150,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_173_interactsWith,"starling.events.TouchEvent","interactsWith",0x4b49173f,"starling.events.TouchEvent.interactsWith","starling/events/TouchEvent.hx",173,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_199_dispatch,"starling.events.TouchEvent","dispatch",0x0198d59e,"starling.events.TouchEvent.dispatch","starling/events/TouchEvent.hx",199,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_225_get_timestamp,"starling.events.TouchEvent","get_timestamp",0x11662749,"starling.events.TouchEvent.get_timestamp","starling/events/TouchEvent.hx",225,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_230_get_touches,"starling.events.TouchEvent","get_touches",0x38d9dda0,"starling.events.TouchEvent.get_touches","starling/events/TouchEvent.hx",230,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_237_get_shiftKey,"starling.events.TouchEvent","get_shiftKey",0x1f458f2a,"starling.events.TouchEvent.get_shiftKey","starling/events/TouchEvent.hx",237,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_241_get_ctrlKey,"starling.events.TouchEvent","get_ctrlKey",0xc15ef567,"starling.events.TouchEvent.get_ctrlKey","starling/events/TouchEvent.hx",241,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_58_boot,"starling.events.TouchEvent","boot",0xc8424916,"starling.events.TouchEvent.boot","starling/events/TouchEvent.hx",58,0xf5cc18d4)
HX_LOCAL_STACK_FRAME(_hx_pos_509988a874b6269d_66_boot,"starling.events.TouchEvent","boot",0xc8424916,"starling.events.TouchEvent.boot","starling/events/TouchEvent.hx",66,0xf5cc18d4)
namespace starling{
namespace events{

void TouchEvent_obj::__construct(::String type, ::openfl::_Vector::AbstractVector touches,hx::Null< bool >  __o_shiftKey,hx::Null< bool >  __o_ctrlKey,hx::Null< bool >  __o_bubbles){
bool shiftKey = __o_shiftKey.Default(false);
bool ctrlKey = __o_ctrlKey.Default(false);
bool bubbles = __o_bubbles.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_509988a874b6269d_84_new)
HXLINE(  85)		super::__construct(type,bubbles,touches);
HXLINE(  87)		this->_hx___shiftKey = shiftKey;
HXLINE(  88)		this->_hx___ctrlKey = ctrlKey;
HXLINE(  89)		int length = null();
HXDLIN(  89)		bool fixed = null();
HXDLIN(  89)		this->_hx___visitedObjects =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE(  91)		this->updateTimestamp(touches);
            	}

Dynamic TouchEvent_obj::__CreateEmpty() { return new TouchEvent_obj; }

void *TouchEvent_obj::_hx_vtable = 0;

Dynamic TouchEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TouchEvent_obj > _hx_result = new TouchEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool TouchEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1e772cb9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1e772cb9;
	} else {
		return inClassId==(int)0x443726dc;
	}
}

 ::starling::events::TouchEvent TouchEvent_obj::resetTo(::String type, ::openfl::_Vector::AbstractVector touches,hx::Null< bool >  __o_shiftKey,hx::Null< bool >  __o_ctrlKey,hx::Null< bool >  __o_bubbles){
bool shiftKey = __o_shiftKey.Default(false);
bool ctrlKey = __o_ctrlKey.Default(false);
bool bubbles = __o_bubbles.Default(true);
            	HX_STACKFRAME(&_hx_pos_509988a874b6269d_97_resetTo)
HXLINE(  98)		this->super::reset(type,bubbles,touches);
HXLINE( 100)		this->_hx___shiftKey = shiftKey;
HXLINE( 101)		this->_hx___ctrlKey = ctrlKey;
HXLINE( 102)		::openfl::_Vector::IVector_obj::set_length(this->_hx___visitedObjects->data,(int)0);
HXLINE( 103)		this->updateTimestamp(touches);
HXLINE( 105)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(TouchEvent_obj,resetTo,return )

void TouchEvent_obj::updateTimestamp( ::openfl::_Vector::AbstractVector touches){
            	HX_STACKFRAME(&_hx_pos_509988a874b6269d_109_updateTimestamp)
HXLINE( 110)		this->_hx___timestamp = ((Float)-1.0);
HXLINE( 111)		int numTouches;
HXDLIN( 111)		if (hx::IsNotNull( touches )) {
HXLINE( 111)			numTouches = ::openfl::_Vector::IVector_obj::get_length(touches->data);
            		}
            		else {
HXLINE( 111)			numTouches = (int)0;
            		}
HXLINE( 113)		{
HXLINE( 113)			int _g1 = (int)0;
HXDLIN( 113)			int _g = numTouches;
HXDLIN( 113)			while((_g1 < _g)){
HXLINE( 113)				_g1 = (_g1 + (int)1);
HXDLIN( 113)				int i = (_g1 - (int)1);
HXLINE( 115)				Float _hx_tmp = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(touches->data,i)) )->get_timestamp();
HXDLIN( 115)				if ((_hx_tmp > this->_hx___timestamp)) {
HXLINE( 116)					this->_hx___timestamp = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(touches->data,i)) )->get_timestamp();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchEvent_obj,updateTimestamp,(void))

 ::openfl::_Vector::AbstractVector TouchEvent_obj::getTouches( ::starling::display::DisplayObject target,::String phase, ::openfl::_Vector::AbstractVector out){
            	HX_GC_STACKFRAME(&_hx_pos_509988a874b6269d_125_getTouches)
HXLINE( 126)		if (hx::IsNull( out )) {
HXLINE( 126)			int length = null();
HXDLIN( 126)			bool fixed = null();
HXDLIN( 126)			out =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
HXLINE( 127)		 ::openfl::_Vector::AbstractVector allTouches = ( ( ::openfl::_Vector::AbstractVector)(this->data) );
HXLINE( 128)		int numTouches = ::openfl::_Vector::IVector_obj::get_length(allTouches->data);
HXLINE( 130)		{
HXLINE( 130)			int _g1 = (int)0;
HXDLIN( 130)			int _g = numTouches;
HXDLIN( 130)			while((_g1 < _g)){
HXLINE( 130)				_g1 = (_g1 + (int)1);
HXDLIN( 130)				int i = (_g1 - (int)1);
HXLINE( 132)				 ::starling::events::Touch touch = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(allTouches->data,i)) );
HXLINE( 133)				bool correctTarget = touch->isTouching(target);
HXLINE( 134)				bool correctPhase;
HXDLIN( 134)				if (hx::IsNotNull( phase )) {
HXLINE( 134)					correctPhase = (phase == touch->get_phase());
            				}
            				else {
HXLINE( 134)					correctPhase = true;
            				}
HXLINE( 136)				bool _hx_tmp;
HXDLIN( 136)				if (correctTarget) {
HXLINE( 136)					_hx_tmp = correctPhase;
            				}
            				else {
HXLINE( 136)					_hx_tmp = false;
            				}
HXDLIN( 136)				if (_hx_tmp) {
HXLINE( 137)					int index = ::openfl::_Vector::IVector_obj::get_length(out->data);
HXDLIN( 137)					::openfl::_Vector::IVector_obj::set(out->data,index,touch);
            				}
            			}
            		}
HXLINE( 139)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TouchEvent_obj,getTouches,return )

 ::starling::events::Touch TouchEvent_obj::getTouch( ::starling::display::DisplayObject target,::String phase,hx::Null< int >  __o_id){
int id = __o_id.Default(-1);
            	HX_STACKFRAME(&_hx_pos_509988a874b6269d_150_getTouch)
HXLINE( 151)		this->getTouches(target,phase,::starling::events::TouchEvent_obj::sTouches);
HXLINE( 152)		int numTouches = ::openfl::_Vector::IVector_obj::get_length(::starling::events::TouchEvent_obj::sTouches->data);
HXLINE( 154)		if ((numTouches > (int)0)) {
HXLINE( 156)			 ::starling::events::Touch touch = null();
HXLINE( 158)			if ((id < (int)0)) {
HXLINE( 158)				touch = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(::starling::events::TouchEvent_obj::sTouches->data,(int)0)) );
            			}
            			else {
HXLINE( 161)				int _g1 = (int)0;
HXDLIN( 161)				int _g = numTouches;
HXDLIN( 161)				while((_g1 < _g)){
HXLINE( 161)					_g1 = (_g1 + (int)1);
HXDLIN( 161)					int i = (_g1 - (int)1);
HXLINE( 162)					if ((( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(::starling::events::TouchEvent_obj::sTouches->data,i)) )->get_id() == id)) {
HXLINE( 162)						touch = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(::starling::events::TouchEvent_obj::sTouches->data,i)) );
HXDLIN( 162)						goto _hx_goto_6;
            					}
            				}
            				_hx_goto_6:;
            			}
HXLINE( 165)			::openfl::_Vector::IVector_obj::set_length(::starling::events::TouchEvent_obj::sTouches->data,(int)0);
HXLINE( 166)			return touch;
            		}
            		else {
HXLINE( 168)			return null();
            		}
HXLINE( 154)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TouchEvent_obj,getTouch,return )

bool TouchEvent_obj::interactsWith( ::starling::display::DisplayObject target){
            	HX_STACKFRAME(&_hx_pos_509988a874b6269d_173_interactsWith)
HXLINE( 174)		bool result = false;
HXLINE( 175)		this->getTouches(target,null(),::starling::events::TouchEvent_obj::sTouches);
HXLINE( 177)		int i = (::openfl::_Vector::IVector_obj::get_length(::starling::events::TouchEvent_obj::sTouches->data) - (int)1);
HXLINE( 178)		while((i >= (int)0)){
HXLINE( 180)			if ((( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(::starling::events::TouchEvent_obj::sTouches->data,i)) )->get_phase() != HX_("ended",fa,48,7a,70))) {
HXLINE( 182)				result = true;
HXLINE( 183)				goto _hx_goto_8;
            			}
HXLINE( 185)			i = (i - (int)1);
            		}
            		_hx_goto_8:;
HXLINE( 188)		::openfl::_Vector::IVector_obj::set_length(::starling::events::TouchEvent_obj::sTouches->data,(int)0);
HXLINE( 189)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchEvent_obj,interactsWith,return )

void TouchEvent_obj::dispatch( ::openfl::_Vector::AbstractVector chain){
            	HX_STACKFRAME(&_hx_pos_509988a874b6269d_199_dispatch)
HXDLIN( 199)		bool _hx_tmp;
HXDLIN( 199)		if (hx::IsNotNull( chain )) {
HXDLIN( 199)			_hx_tmp = (::openfl::_Vector::IVector_obj::get_length(chain->data) != (int)0);
            		}
            		else {
HXDLIN( 199)			_hx_tmp = false;
            		}
HXDLIN( 199)		if (_hx_tmp) {
HXLINE( 201)			int chainLength;
HXDLIN( 201)			if (this->bubbles) {
HXLINE( 201)				chainLength = ::openfl::_Vector::IVector_obj::get_length(chain->data);
            			}
            			else {
HXLINE( 201)				chainLength = (int)1;
            			}
HXLINE( 202)			 ::starling::events::EventDispatcher previousTarget = this->target;
HXLINE( 203)			this->setTarget(( ( ::starling::events::EventDispatcher)(::openfl::_Vector::IVector_obj::get(chain->data,(int)0)) ));
HXLINE( 205)			{
HXLINE( 205)				int _g1 = (int)0;
HXDLIN( 205)				int _g = chainLength;
HXDLIN( 205)				while((_g1 < _g)){
HXLINE( 205)					_g1 = (_g1 + (int)1);
HXDLIN( 205)					int i = (_g1 - (int)1);
HXLINE( 207)					if (hx::IsNull( ( ( ::starling::events::EventDispatcher)(::openfl::_Vector::IVector_obj::get(chain->data,i)) ) )) {
HXLINE( 207)						continue;
            					}
HXLINE( 208)					 ::starling::events::EventDispatcher chainElement = ( ( ::starling::events::EventDispatcher)(::openfl::_Vector::IVector_obj::get(chain->data,i)) );
HXLINE( 209)					if ((::openfl::_Vector::IVector_obj::indexOf(this->_hx___visitedObjects->data,chainElement,(int)0) == (int)-1)) {
HXLINE( 211)						bool stopPropagation = chainElement->_hx___invokeEvent(hx::ObjectPtr<OBJ_>(this));
HXLINE( 212)						{
HXLINE( 212)							 ::openfl::_Vector::AbstractVector this1 = this->_hx___visitedObjects;
HXDLIN( 212)							int index = ::openfl::_Vector::IVector_obj::get_length(this->_hx___visitedObjects->data);
HXDLIN( 212)							::openfl::_Vector::IVector_obj::set(this1->data,index,chainElement);
            						}
HXLINE( 213)						if (stopPropagation) {
HXLINE( 213)							goto _hx_goto_10;
            						}
            					}
            				}
            				_hx_goto_10:;
            			}
HXLINE( 217)			this->setTarget(previousTarget);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchEvent_obj,dispatch,(void))

Float TouchEvent_obj::get_timestamp(){
            	HX_STACKFRAME(&_hx_pos_509988a874b6269d_225_get_timestamp)
HXDLIN( 225)		return this->_hx___timestamp;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchEvent_obj,get_timestamp,return )

 ::openfl::_Vector::AbstractVector TouchEvent_obj::get_touches(){
            	HX_GC_STACKFRAME(&_hx_pos_509988a874b6269d_230_get_touches)
HXLINE( 231)		 ::openfl::_Vector::AbstractVector touches = ( ( ::openfl::_Vector::AbstractVector)(this->data) );
HXLINE( 232)		::Dynamic data = null();
HXDLIN( 232)		return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::concat(touches->data,data),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchEvent_obj,get_touches,return )

bool TouchEvent_obj::get_shiftKey(){
            	HX_STACKFRAME(&_hx_pos_509988a874b6269d_237_get_shiftKey)
HXDLIN( 237)		return this->_hx___shiftKey;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchEvent_obj,get_shiftKey,return )

bool TouchEvent_obj::get_ctrlKey(){
            	HX_STACKFRAME(&_hx_pos_509988a874b6269d_241_get_ctrlKey)
HXDLIN( 241)		return this->_hx___ctrlKey;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchEvent_obj,get_ctrlKey,return )

::String TouchEvent_obj::TOUCH;

 ::openfl::_Vector::AbstractVector TouchEvent_obj::sTouches;


hx::ObjectPtr< TouchEvent_obj > TouchEvent_obj::__new(::String type, ::openfl::_Vector::AbstractVector touches,hx::Null< bool >  __o_shiftKey,hx::Null< bool >  __o_ctrlKey,hx::Null< bool >  __o_bubbles) {
	hx::ObjectPtr< TouchEvent_obj > __this = new TouchEvent_obj();
	__this->__construct(type,touches,__o_shiftKey,__o_ctrlKey,__o_bubbles);
	return __this;
}

hx::ObjectPtr< TouchEvent_obj > TouchEvent_obj::__alloc(hx::Ctx *_hx_ctx,::String type, ::openfl::_Vector::AbstractVector touches,hx::Null< bool >  __o_shiftKey,hx::Null< bool >  __o_ctrlKey,hx::Null< bool >  __o_bubbles) {
	TouchEvent_obj *__this = (TouchEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TouchEvent_obj), true, "starling.events.TouchEvent"));
	*(void **)__this = TouchEvent_obj::_hx_vtable;
	__this->__construct(type,touches,__o_shiftKey,__o_ctrlKey,__o_bubbles);
	return __this;
}

TouchEvent_obj::TouchEvent_obj()
{
}

void TouchEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TouchEvent);
	HX_MARK_MEMBER_NAME(_hx___shiftKey,"__shiftKey");
	HX_MARK_MEMBER_NAME(_hx___ctrlKey,"__ctrlKey");
	HX_MARK_MEMBER_NAME(_hx___timestamp,"__timestamp");
	HX_MARK_MEMBER_NAME(_hx___visitedObjects,"__visitedObjects");
	 ::starling::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TouchEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___shiftKey,"__shiftKey");
	HX_VISIT_MEMBER_NAME(_hx___ctrlKey,"__ctrlKey");
	HX_VISIT_MEMBER_NAME(_hx___timestamp,"__timestamp");
	HX_VISIT_MEMBER_NAME(_hx___visitedObjects,"__visitedObjects");
	 ::starling::events::Event_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TouchEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"resetTo") ) { return hx::Val( resetTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"touches") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_touches() ); }
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_ctrlKey() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getTouch") ) { return hx::Val( getTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispatch") ) { return hx::Val( dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"shiftKey") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shiftKey() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__ctrlKey") ) { return hx::Val( _hx___ctrlKey ); }
		if (HX_FIELD_EQ(inName,"timestamp") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_timestamp() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__shiftKey") ) { return hx::Val( _hx___shiftKey ); }
		if (HX_FIELD_EQ(inName,"getTouches") ) { return hx::Val( getTouches_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__timestamp") ) { return hx::Val( _hx___timestamp ); }
		if (HX_FIELD_EQ(inName,"get_touches") ) { return hx::Val( get_touches_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ctrlKey") ) { return hx::Val( get_ctrlKey_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_shiftKey") ) { return hx::Val( get_shiftKey_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"interactsWith") ) { return hx::Val( interactsWith_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_timestamp") ) { return hx::Val( get_timestamp_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateTimestamp") ) { return hx::Val( updateTimestamp_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__visitedObjects") ) { return hx::Val( _hx___visitedObjects ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TouchEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"sTouches") ) { outValue = ( sTouches ); return true; }
	}
	return false;
}

hx::Val TouchEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__ctrlKey") ) { _hx___ctrlKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__shiftKey") ) { _hx___shiftKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__timestamp") ) { _hx___timestamp=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__visitedObjects") ) { _hx___visitedObjects=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TouchEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"sTouches") ) { sTouches=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
	}
	return false;
}

void TouchEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__shiftKey","\x5d","\x05","\xd8","\x3c"));
	outFields->push(HX_HCSTRING("__ctrlKey","\x94","\x86","\xcb","\xe2"));
	outFields->push(HX_HCSTRING("__timestamp","\xb6","\x1d","\xfb","\xd3"));
	outFields->push(HX_HCSTRING("__visitedObjects","\x2a","\x92","\xa1","\xf2"));
	outFields->push(HX_HCSTRING("timestamp","\xd6","\xd4","\xce","\xa5"));
	outFields->push(HX_HCSTRING("touches","\xed","\x1d","\xf8","\xd8"));
	outFields->push(HX_HCSTRING("shiftKey","\x3d","\x92","\x9f","\x99"));
	outFields->push(HX_HCSTRING("ctrlKey","\xb4","\x35","\x7d","\x61"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TouchEvent_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(TouchEvent_obj,_hx___shiftKey),HX_HCSTRING("__shiftKey","\x5d","\x05","\xd8","\x3c")},
	{hx::fsBool,(int)offsetof(TouchEvent_obj,_hx___ctrlKey),HX_HCSTRING("__ctrlKey","\x94","\x86","\xcb","\xe2")},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,_hx___timestamp),HX_HCSTRING("__timestamp","\xb6","\x1d","\xfb","\xd3")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(TouchEvent_obj,_hx___visitedObjects),HX_HCSTRING("__visitedObjects","\x2a","\x92","\xa1","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TouchEvent_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &TouchEvent_obj::TOUCH,HX_HCSTRING("TOUCH","\x9f","\x4f","\x21","\x92")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &TouchEvent_obj::sTouches,HX_HCSTRING("sTouches","\xba","\x89","\xf2","\x57")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TouchEvent_obj_sMemberFields[] = {
	HX_HCSTRING("__shiftKey","\x5d","\x05","\xd8","\x3c"),
	HX_HCSTRING("__ctrlKey","\x94","\x86","\xcb","\xe2"),
	HX_HCSTRING("__timestamp","\xb6","\x1d","\xfb","\xd3"),
	HX_HCSTRING("__visitedObjects","\x2a","\x92","\xa1","\xf2"),
	HX_HCSTRING("resetTo","\x2a","\xe5","\xc9","\x60"),
	HX_HCSTRING("updateTimestamp","\x8d","\xa5","\x59","\xf5"),
	HX_HCSTRING("getTouches","\xf7","\xa3","\x59","\x28"),
	HX_HCSTRING("getTouch","\x49","\x27","\x0a","\x74"),
	HX_HCSTRING("interactsWith","\xa3","\x98","\x15","\xa1"),
	HX_HCSTRING("dispatch","\xba","\xce","\x63","\x1e"),
	HX_HCSTRING("get_timestamp","\xad","\xa8","\x32","\x67"),
	HX_HCSTRING("get_touches","\x04","\x7e","\xf2","\x5e"),
	HX_HCSTRING("get_shiftKey","\x46","\x46","\xb9","\x4e"),
	HX_HCSTRING("get_ctrlKey","\xcb","\x95","\x77","\xe7"),
	::String(null()) };

static void TouchEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TouchEvent_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TouchEvent_obj::TOUCH,"TOUCH");
	HX_MARK_MEMBER_NAME(TouchEvent_obj::sTouches,"sTouches");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TouchEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::TOUCH,"TOUCH");
	HX_VISIT_MEMBER_NAME(TouchEvent_obj::sTouches,"sTouches");
};

#endif

hx::Class TouchEvent_obj::__mClass;

static ::String TouchEvent_obj_sStaticFields[] = {
	HX_HCSTRING("TOUCH","\x9f","\x4f","\x21","\x92"),
	HX_HCSTRING("sTouches","\xba","\x89","\xf2","\x57"),
	::String(null())
};

void TouchEvent_obj::__register()
{
	hx::Object *dummy = new TouchEvent_obj;
	TouchEvent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.events.TouchEvent","\x0a","\xc6","\x6b","\xfa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TouchEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &TouchEvent_obj::__SetStatic;
	__mClass->mMarkFunc = TouchEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TouchEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TouchEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TouchEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TouchEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TouchEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TouchEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TouchEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_509988a874b6269d_58_boot)
HXDLIN(  58)		TOUCH = HX_("touch",bf,17,33,14);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_509988a874b6269d_66_boot)
HXDLIN(  66)			int length = null();
HXDLIN(  66)			bool fixed = null();
HXDLIN(  66)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_509988a874b6269d_66_boot)
HXDLIN(  66)		sTouches =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace starling
} // end namespace events
